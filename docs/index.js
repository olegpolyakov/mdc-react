(()=>{var __webpack_modules__={929:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(294);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(697);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nfunction extends_extends() {\n  extends_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return extends_extends.apply(this, arguments);\n}\n;// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js\nfunction isAbsolute(pathname) {\n  return pathname.charAt(0) === \'/\';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node\'s url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = \'\';\n\n  var toParts = (to && to.split(\'/\')) || [];\n  var fromParts = (from && from.split(\'/\')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return \'/\';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === \'.\' || last === \'..\' || last === \'\';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === \'.\') {\n      spliceOne(fromParts, i);\n    } else if (part === \'..\') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift(\'..\');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== \'\' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift(\'\');\n\n  var result = fromParts.join(\'/\');\n\n  if (hasTrailingSlash && result.substr(-1) !== \'/\') result += \'/\';\n\n  return result;\n}\n\n/* harmony default export */ const resolve_pathname = (resolvePathname);\n\n;// CONCATENATED MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js\nvar isProduction = "production" === \'production\';\nvar prefix = \'Invariant failed\';\nfunction tiny_invariant_esm_invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + ": " + (message || \'\'));\n}\n\n/* harmony default export */ const tiny_invariant_esm = (tiny_invariant_esm_invariant);\n\n;// CONCATENATED MODULE: ./node_modules/history/esm/history.js\n\n\n\n\n\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === \'/\' ? path : \'/\' + path;\n}\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === \'/\' ? path.substr(1) : path;\n}\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && \'/?#\'.indexOf(path.charAt(prefix.length)) !== -1;\n}\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === \'/\' ? path.slice(0, -1) : path;\n}\nfunction parsePath(path) {\n  var pathname = path || \'/\';\n  var search = \'\';\n  var hash = \'\';\n  var hashIndex = pathname.indexOf(\'#\');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf(\'?\');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === \'?\' ? \'\' : search,\n    hash: hash === \'#\' ? \'\' : hash\n  };\n}\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || \'/\';\n  if (search && search !== \'?\') path += search.charAt(0) === \'?\' ? search : "?" + search;\n  if (hash && hash !== \'#\') path += hash.charAt(0) === \'#\' ? hash : "#" + hash;\n  return path;\n}\n\nfunction history_createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === \'string\') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = extends_extends({}, path);\n    if (location.pathname === undefined) location.pathname = \'\';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== \'?\') location.search = \'?\' + location.search;\n    } else {\n      location.search = \'\';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== \'#\') location.hash = \'#\' + location.hash;\n    } else {\n      location.hash = \'\';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError(\'Pathname "\' + location.pathname + \'" could not be decoded. \' + \'This is likely caused by an invalid percent-encoding.\');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== \'/\') {\n      location.pathname = resolve_pathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = \'/\';\n    }\n  }\n\n  return location;\n}\nfunction history_locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n     false ? 0 : void 0;\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we\'re still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === \'function\' ? prompt(location, action) : prompt;\n\n      if (typeof result === \'string\') {\n        if (typeof getUserConfirmation === \'function\') {\n          getUserConfirmation(result, callback);\n        } else {\n           false ? 0 : void 0;\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf(\'Android 2.\') !== -1 || ua.indexOf(\'Android 4.0\') !== -1) && ua.indexOf(\'Mobile Safari\') !== -1 && ua.indexOf(\'Chrome\') === -1 && ua.indexOf(\'Windows Phone\') === -1) return false;\n  return window.history && \'pushState\' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf(\'Trident\') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf(\'Firefox\') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf(\'CriOS\') === -1;\n}\n\nvar PopStateEvent = \'popstate\';\nvar HashChangeEvent = \'hashchange\';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : \'\';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n     false ? 0 : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return history_createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    extends_extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = \'POP\';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we\'ve seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don\'t know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n     false ? 0 : void 0;\n    var action = \'PUSH\';\n    var location = history_createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? 0 : void 0;\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? 0 : void 0;\n    var action = \'REPLACE\';\n    var location = history_createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? 0 : void 0;\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: \'POP\',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = \'hashchange\';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === \'!\' ? path : \'!/\' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === \'!\' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf(\'#\');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can\'t use window.location.hash here because it\'s not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf(\'#\');\n  return hashIndex === -1 ? \'\' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + \'#\' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? \'slash\' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : \'\';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n     false ? 0 : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return history_createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    extends_extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn\'t always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = \'POP\';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we\'ve seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don\'t know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector(\'base\');\n    var href = \'\';\n\n    if (baseTag && baseTag.getAttribute(\'href\')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + \'#\' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n     false ? 0 : void 0;\n    var action = \'PUSH\';\n    var location = history_createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we\'d\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n         false ? 0 : void 0;\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? 0 : void 0;\n    var action = \'REPLACE\';\n    var location = history_createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we\'d\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n     false ? 0 : void 0;\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: \'POP\',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? [\'/\'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    extends_extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === \'string\' ? history_createLocation(entry, undefined, createKey()) : history_createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n     false ? 0 : void 0;\n    var action = \'PUSH\';\n    var location = history_createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n     false ? 0 : void 0;\n    var action = \'REPLACE\';\n    var location = history_createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = \'POP\';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: \'POP\',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/mini-create-react-context/dist/esm/index.js\n\n\n\n\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== \'undefined\' ? globalThis : typeof window !== \'undefined\' ? window : typeof __webpack_require__.g !== \'undefined\' ? __webpack_require__.g : {};\n\nfunction getUniqueId() {\n  var key = \'__global_unique_id__\';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = \'__create-react-context-\' + getUniqueId() + \'__\';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    _inheritsLoose(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === \'function\' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (false) {}\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(react.Component);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = (prop_types_default()).object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    _inheritsLoose(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(react.Component);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = (prop_types_default()).object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = react.createContext || createReactContext;\n\n/* harmony default export */ const esm = (index);\n\n// EXTERNAL MODULE: ./node_modules/path-to-regexp/index.js\nvar path_to_regexp = __webpack_require__(779);\nvar path_to_regexp_default = /*#__PURE__*/__webpack_require__.n(path_to_regexp);\n// EXTERNAL MODULE: ./node_modules/react-is/index.js\nvar react_is = __webpack_require__(864);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(679);\n;// CONCATENATED MODULE: ./node_modules/react-router/esm/react-router.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext = function createNamedContext(name) {\n  var context = esm();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext = /*#__PURE__*/createNamedContext("Router-History");\n\nvar context = /*#__PURE__*/createNamedContext("Router");\n\n/**\n * The public API for putting history on context.\n */\n\nvar Router = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: "/",\n      url: "/",\n      params: {},\n      isExact: pathname === "/"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) {\n      this.unlisten();\n      this._isMounted = false;\n      this._pendingLocation = null;\n    }\n  };\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, /*#__PURE__*/react.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(react.Component);\n\nif (false) {}\n\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\nvar MemoryRouter = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createMemoryHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(react.Component);\n\nif (false) {}\n\nvar Lifecycle = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(react.Component);\n\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : invariant(false) : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return /*#__PURE__*/React.createElement(Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\nif (false) { var messageType; }\n\nvar cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (cache[path]) return cache[path];\n  var generator = pathToRegexp.compile(path);\n\n  if (cacheCount < cacheLimit) {\n    cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = "/";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === "/" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n\n/**\n * The public API for navigating programmatically with a component.\n */\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : invariant(false) : void 0;\n    var history = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history.push : history.replace;\n    var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = createLocation(prevProps.to);\n\n        if (!locationsAreEqual(prevLocation, _extends({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\nif (false) {}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = "" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = path_to_regexp_default()(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === "string" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== "") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === "/" && url === "" ? "/" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return react.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   false ? 0 : void 0;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar Route = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return /*#__PURE__*/react.createElement(context.Consumer, null, function (context$1) {\n      !context$1 ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = extends_extends({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that\'s the case.\n\n      if (Array.isArray(children) && isEmptyChildren(children)) {\n        children = null;\n      }\n\n      return /*#__PURE__*/react.createElement(context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === "function" ?  false ? 0 : children(props) : children : component ? /*#__PURE__*/react.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  false ? 0 : children(props) : null);\n    });\n  };\n\n  return Route;\n}(react.Component);\n\nif (false) {}\n\nfunction react_router_addLeadingSlash(path) {\n  return path.charAt(0) === "/" ? path : "/" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return extends_extends({}, location, {\n    pathname: react_router_addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction react_router_stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = react_router_addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return extends_extends({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === "string" ? location : createPath(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n      false ? 0 : tiny_invariant_esm(false) ;\n  };\n}\n\nfunction noop() {}\n/**\n * The public top-level API for a "static" <Router>, so-called because it\n * can\'t actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar StaticRouter = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, "PUSH");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, "REPLACE");\n    };\n\n    _this.handleListen = function () {\n      return noop;\n    };\n\n    _this.handleBlock = function () {\n      return noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? "" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, history_createLocation(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? "/" : _this$props2$location,\n        rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);\n\n    var history = {\n      createHref: function createHref(path) {\n        return react_router_addLeadingSlash(basename + createURL(path));\n      },\n      action: "POP",\n      location: react_router_stripBasename(basename, history_createLocation(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler("go"),\n      goBack: staticHandler("goBack"),\n      goForward: staticHandler("goForward"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return /*#__PURE__*/react.createElement(Router, extends_extends({}, rest, {\n      history: history,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(react.Component);\n\nif (false) {}\n\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\nvar Switch = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return /*#__PURE__*/react.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      react.Children.forEach(_this.props.children, function (child) {\n        if (match == null && /*#__PURE__*/react.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, extends_extends({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? /*#__PURE__*/react.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(react.Component);\n\nif (false) {}\n\n/**\n * A public higher-order component to access the imperative API\n */\n\nfunction withRouter(Component) {\n  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = _objectWithoutPropertiesLoose(props, ["wrappedComponentRef"]);\n\n    return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {\n      !context ?  false ? 0 : invariant(false) : void 0;\n      return /*#__PURE__*/React.createElement(Component, _extends({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  if (false) {}\n\n  return hoistStatics(C, Component);\n}\n\nvar useContext = react.useContext;\nfunction useHistory() {\n  if (false) {}\n\n  return useContext(historyContext);\n}\nfunction useLocation() {\n  if (false) {}\n\n  return useContext(context).location;\n}\nfunction useParams() {\n  if (false) {}\n\n  var match = useContext(context).match;\n  return match ? match.params : {};\n}\nfunction useRouteMatch(path) {\n  if (false) {}\n\n  var location = useLocation();\n  var match = useContext(context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\nif (false) { var secondaryBuildName, initialBuildName, buildNames, key, global; }\n\n\n//# sourceMappingURL=react-router.js.map\n\n;// CONCATENATED MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createBrowserHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(react.Component);\n\nif (false) {}\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar HashRouter = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createHashHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(react.Component);\n\nif (false) {}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === "function" ? to(currentLocation) : to;\n};\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === "string" ? history_createLocation(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar react_router_dom_forwardRef = react.forwardRef;\n\nif (typeof react_router_dom_forwardRef === "undefined") {\n  react_router_dom_forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = react_router_dom_forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);\n\n  var target = rest.target;\n\n  var props = extends_extends({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === "_self") && // let browser handle "target=_blank" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== react_router_dom_forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return /*#__PURE__*/react.createElement("a", props);\n});\n\nif (false) {}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = react_router_dom_forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);\n\n  return /*#__PURE__*/react.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : "";\n\n    var props = extends_extends({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var isDuplicateNavigation = createPath(context.location) === createPath(normalizeToLocation(location));\n        var method = replace || isDuplicateNavigation ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== react_router_dom_forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react.createElement(component, props);\n  });\n});\n\nif (false) { var refType, toType; }\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = react.forwardRef;\n\nif (typeof forwardRef$1 === "undefined") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(" ");\n}\n/**\n * A <Link> wrapper that knows if it\'s "active" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref["aria-current"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);\n\n  return /*#__PURE__*/react.createElement(context.Consumer, null, function (context) {\n    !context ?  false ? 0 : tiny_invariant_esm(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, "\\\\$1");\n    var match = escapedPath ? matchPath(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = typeof classNameProp === "function" ? classNameProp(isActive) : classNameProp;\n    var style = typeof styleProp === "function" ? styleProp(isActive) : styleProp;\n\n    if (isActive) {\n      className = joinClassnames(className, activeClassName);\n      style = extends_extends({}, style, activeStyle);\n    }\n\n    var props = extends_extends({\n      "aria-current": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react.createElement(Link, props);\n  });\n});\n\nif (false) { var ariaCurrentType; }\n\n\n//# sourceMappingURL=react-router-dom.js.map\n\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(935);\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(184);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n;// CONCATENATED MODULE: ./src/component.js\nvar _excluded = ["component", "fallback", "className", "children"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = component_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction component_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nfunction createComponent(_ref, fn) {\n  var displayName = _ref.displayName,\n      propTypes = _ref.propTypes,\n      defaultProps = _ref.defaultProps;\n  var Component = fn.length > 1 ? /*#__PURE__*/forwardRef(fn) : fn;\n  Component.displayName = displayName;\n  Component.propTypes = propTypes;\n  Component.defaultProps = defaultProps;\n  return Component;\n}\nvar Clone = /*#__PURE__*/(0,react.forwardRef)(function Clone(_ref2, ref) {\n  var component = _ref2.component,\n      fallback = _ref2.fallback,\n      className = _ref2.className,\n      _ref2$children = _ref2.children,\n      children = _ref2$children === void 0 ? component : _ref2$children,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  if ( /*#__PURE__*/(0,react.isValidElement)(component)) {\n    return /*#__PURE__*/(0,react.cloneElement)(component, _objectSpread({\n      ref: ref,\n      className: classnames_default()(className, component.props.className)\n    }, props));\n  } else if ( /*#__PURE__*/(0,react.isValidElement)(fallback)) {\n    return /*#__PURE__*/(0,react.cloneElement)(fallback, _objectSpread({\n      ref: ref,\n      className: classnames_default()(className, fallback.props.className)\n    }, props));\n  } else if (fallback) {\n    return /*#__PURE__*/(0,react.createElement)(fallback, _objectSpread({\n      ref: ref,\n      className: className\n    }, props), children);\n  } else {\n    return children;\n  }\n});\n\n;// CONCATENATED MODULE: ./src/icon/constants.js\nvar cssClasses = {\n  ROOT: \'mdc-icon\',\n  LIGHT: \'mdc-icon--light\',\n  DARK: \'mdc-icon--dark\',\n  INACTIVE: \'mdc-icon--inactive\'\n};\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(893);\n;// CONCATENATED MODULE: ./src/icon/Icon.jsx\nvar Icon_excluded = ["name", "type", "size", "light", "dark", "inactive", "element", "component", "children", "className"];\n\nfunction Icon_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Icon_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Icon_ownKeys(Object(source), true).forEach(function (key) { Icon_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Icon_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Icon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Icon_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Icon_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Icon_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar Icon = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var name = _ref.name,\n      type = _ref.type,\n      size = _ref.size,\n      _ref$light = _ref.light,\n      light = _ref$light === void 0 ? false : _ref$light,\n      _ref$dark = _ref.dark,\n      dark = _ref$dark === void 0 ? false : _ref$dark,\n      _ref$inactive = _ref.inactive,\n      inactive = _ref$inactive === void 0 ? false : _ref$inactive,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'i\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? name : _ref$children,\n      className = _ref.className,\n      props = Icon_objectWithoutProperties(_ref, Icon_excluded);\n\n  var classNames = classnames_default()(cssClasses.ROOT, (_classnames = {}, Icon_defineProperty(_classnames, "".concat(cssClasses.ROOT, "--").concat(type), type), Icon_defineProperty(_classnames, "".concat(cssClasses.ROOT, "--").concat(size), size), Icon_defineProperty(_classnames, cssClasses.LIGHT, light), Icon_defineProperty(_classnames, cssClasses.DARK, dark), Icon_defineProperty(_classnames, cssClasses.INACTIVE, inactive), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Icon_objectSpread(Icon_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: children\n  }));\n});\nIcon.displayName = \'MDCIcon\';\nIcon.propTypes = {\n  type: prop_types_default().oneOf([\'\', \'filled\', \'outlined\', \'round\', \'sharp\', \'two-tone\']),\n  size: (prop_types_default()).string,\n  light: (prop_types_default()).bool,\n  dark: (prop_types_default()).bool,\n  inactive: (prop_types_default()).bool\n};\n/* harmony default export */ const icon_Icon = (Icon);\n;// CONCATENATED MODULE: ./src/icon/index.js\n\n;// CONCATENATED MODULE: ./src/avatar/constants.js\nvar constants_cssClasses = {\n  ROOT: \'mdc-avatar\',\n  SMALL: \'mdc-avatar--small\',\n  MEDIUM: \'mdc-avatar--medium\',\n  LARGE: \'mdc-avatar--large\',\n  IMAGE: \'mdc-avatar__image\',\n  ICON: \'mdc-avatar__icon\',\n  TEXT: \'mdc-avatar__text\'\n};\n;// CONCATENATED MODULE: ./src/avatar/Avatar.jsx\nvar Avatar_excluded = ["image", "icon", "text", "size", "element", "component", "className", "children"];\n\nfunction Avatar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Avatar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Avatar_ownKeys(Object(source), true).forEach(function (key) { Avatar_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Avatar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Avatar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Avatar_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Avatar_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Avatar_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar Avatar = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var image = _ref.image,\n      icon = _ref.icon,\n      text = _ref.text,\n      size = _ref.size,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'span\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? text : _ref$children,\n      props = Avatar_objectWithoutProperties(_ref, Avatar_excluded);\n\n  var classNames = classnames_default()(constants_cssClasses.ROOT, Avatar_defineProperty({}, "".concat(constants_cssClasses.ROOT, "--").concat(size), size), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, Avatar_objectSpread(Avatar_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [image && /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n      className: constants_cssClasses.IMAGE,\n      src: (image === null || image === void 0 ? void 0 : image.src) || image,\n      alt: (image === null || image === void 0 ? void 0 : image.alt) || \'\'\n    }), icon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: icon,\n      fallback: icon_Icon,\n      className: constants_cssClasses.ICON\n    }), children && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      fallback: "span",\n      className: constants_cssClasses.TEXT\n    })]\n  }));\n});\nAvatar.displayName = \'MDCAvatar\';\nAvatar.propTypes = {\n  src: (prop_types_default()).string,\n  icon: (prop_types_default()).node,\n  text: (prop_types_default()).node,\n  size: prop_types_default().oneOf([\'small\', \'medium\', \'large\'])\n};\n/* harmony default export */ const avatar_Avatar = (Avatar);\n;// CONCATENATED MODULE: ./src/avatar/index.js\n\n;// CONCATENATED MODULE: ./src/badge/constants.js\nvar badge_constants_cssClasses = {\n  ROOT: \'mdc-badge\',\n  INSET: \'mdc-badge--inset\',\n  TRANSPARENT: \'mdc-badge--transparent\'\n};\n;// CONCATENATED MODULE: ./src/badge/Badge.jsx\nvar Badge_excluded = ["value", "inset", "transparent", "element", "className"];\n\nfunction Badge_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Badge_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Badge_ownKeys(Object(source), true).forEach(function (key) { Badge_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Badge_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Badge_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Badge_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Badge_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Badge_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar Badge = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var value = _ref.value,\n      _ref$inset = _ref.inset,\n      inset = _ref$inset === void 0 ? false : _ref$inset,\n      _ref$transparent = _ref.transparent,\n      transparent = _ref$transparent === void 0 ? false : _ref$transparent,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'span\' : _ref$element,\n      className = _ref.className,\n      props = Badge_objectWithoutProperties(_ref, Badge_excluded);\n\n  var classNames = classnames_default()(badge_constants_cssClasses.ROOT, (_classnames = {}, Badge_defineProperty(_classnames, badge_constants_cssClasses.INSET, inset), Badge_defineProperty(_classnames, badge_constants_cssClasses.TRANSPARENT, transparent), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Badge_objectSpread({\n    ref: ref,\n    className: classNames,\n    "data-badge": value\n  }, props));\n});\nBadge.displayName = \'MDCBadge\';\nBadge.propTypes = {\n  value: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]).isRequired,\n  inset: (prop_types_default()).bool,\n  transparent: (prop_types_default()).bool\n};\n/* harmony default export */ const badge_Badge = (Badge);\n;// CONCATENATED MODULE: ./src/badge/index.js\n\n;// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/hasClass.js\n/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nfunction hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;\n}\n;// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/addClass.js\n\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nfunction addClass_addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === \'string\') element.className = element.className + " " + className;else element.setAttribute(\'class\', (element.className && element.className.baseVal || \'\') + " " + className);\n}\n;// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/removeClass.js\nfunction replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp("(^|\\\\s)" + classToRemove + "(?:\\\\s|$)", \'g\'), \'$1\').replace(/\\s+/g, \' \').replace(/^\\s*|\\s*$/g, \'\');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nfunction removeClass_removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === \'string\') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute(\'class\', replaceClassName(element.className && element.className.baseVal || \'\', className));\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/config.js\n/* harmony default export */ const config = ({\n  disabled: false\n});\n;// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/TransitionGroupContext.js\n\n/* harmony default export */ const TransitionGroupContext = (react.createContext(null));\n;// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/Transition.js\n\n\n\n\n\n\n\n\nvar UNMOUNTED = \'unmounted\';\nvar EXITED = \'exited\';\nvar ENTERING = \'entering\';\nvar ENTERED = \'entered\';\nvar EXITING = \'exiting\';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it\'s used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you\'re using\n * transitions in CSS, you\'ll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks "enter" and "exit" states for the\n * components. It\'s up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from \'react-transition-group\';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I\'m a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `\'entering\'`\n *  - `\'entered\'`\n *  - `\'exiting\'`\n *  - `\'exited\'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the "Enter" stage. During this stage, the component will shift from\n * its current transition state, to `\'entering\'` for the duration of the\n * transition and then to the `\'entered\'` stage once it\'s complete. Let\'s take\n * the following example (we\'ll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `\'entering\'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `\'entered\'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `\'exiting\'` to `\'exited\'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== \'number\') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [react_dom.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : react_dom.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn\'t be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      react.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === \'function\' ? children(status, childProps) : react.cloneElement(react.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(react.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes =  false ? 0 : {}; // Name the function so it is clearer in the documentation\n\nfunction Transition_noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: Transition_noop,\n  onEntering: Transition_noop,\n  onEntered: Transition_noop,\n  onExit: Transition_noop,\n  onExiting: Transition_noop,\n  onExited: Transition_noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\n/* harmony default export */ const esm_Transition = (Transition);\n;// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/CSSTransition.js\n\n\n\n\n\n\n\n\n\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(\' \').forEach(function (c) {\n    return addClass_addClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(\' \').forEach(function (c) {\n    return removeClass_removeClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you\'re using CSS transitions or animations. It\'s built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames="my-node">\n *         <div>\n *           {"I\'ll receive my-node-* classes"}\n *         </div>\n *       </CSSTransition>\n *       <button type="button" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it\'s\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you\'re using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, \'exit\');\n\n      _this.addClass(node, appearing ? \'appear\' : \'enter\', \'base\');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? \'appear\' : \'enter\';\n\n      _this.addClass(node, type, \'active\');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? \'appear\' : \'enter\';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, \'done\');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, \'appear\');\n\n      _this.removeClasses(node, \'enter\');\n\n      _this.addClass(node, \'exit\', \'base\');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, \'exit\', \'active\');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, \'exit\');\n\n      _this.addClass(node, \'exit\', \'done\');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === \'string\';\n      var prefix = isStringClassNames && classNames ? classNames + "-" : \'\';\n      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];\n      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + "ClassName"];\n\n    var _this$getClassNames = this.getClassNames(\'enter\'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === \'appear\' && phase === \'done\' && doneClassName) {\n      className += " " + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === \'active\') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(_this$props, ["classNames"]);\n\n    return /*#__PURE__*/react.createElement(esm_Transition, extends_extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(react.Component);\n\nCSSTransition.defaultProps = {\n  classNames: \'\'\n};\nCSSTransition.propTypes =  false ? 0 : {};\n/* harmony default export */ const esm_CSSTransition = (CSSTransition);\n;// CONCATENATED MODULE: ./src/banner/constants.js\nvar numbers = {\n  BANNER_ANIMATION_CLOSE_TIME_MS: 250,\n  BANNER_ANIMATION_OPEN_TIME_MS: 300\n};\nvar banner_constants_cssClasses = {\n  ROOT: \'mdc-banner\',\n  FIXED: \'mdc-banner--fixed\',\n  CENTERED: \'mdc-banner--centered\',\n  MOBILE_STACKED: \'mdc-banner--mobile-stacked\',\n  APPEARING: \'mdc-banner--appearing\',\n  APPEARED: \'mdc-banner--appeared\',\n  OPENING: \'mdc-banner--opening\',\n  OPEN: \'mdc-banner--open\',\n  CLOSING: \'mdc-banner--closing\',\n  CONTENT: \'mdc-banner__content\',\n  GRAPHIC_TEXT_WRAPPER: \'mdc-banner__graphic-text-wrapper\',\n  GRAPHIC: \'mdc-banner__graphic\',\n  ICON: \'mdc-banner__icon\',\n  TEXT: \'mdc-banner__text\',\n  ACTIONS: \'mdc-banner__actions\',\n  PRIMARY_ACTION: \'mdc-banner__primary-action\',\n  SECONDARY_ACTION: \'mdc-banner__secondary-action\'\n};\n;// CONCATENATED MODULE: ./src/banner/Banner.jsx\nvar Banner_excluded = ["text", "icon", "graphic", "action", "primaryAction", "secondaryAction", "open", "centered", "fixed", "mobileStacked", "element", "component", "className", "children"];\n\nfunction Banner_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Banner_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Banner_ownKeys(Object(source), true).forEach(function (key) { Banner_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Banner_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Banner_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Banner_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Banner_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Banner_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\nvar Banner = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var text = _ref.text,\n      icon = _ref.icon,\n      _ref$graphic = _ref.graphic,\n      graphic = _ref$graphic === void 0 ? icon : _ref$graphic,\n      action = _ref.action,\n      _ref$primaryAction = _ref.primaryAction,\n      primaryAction = _ref$primaryAction === void 0 ? action : _ref$primaryAction,\n      secondaryAction = _ref.secondaryAction,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      _ref$centered = _ref.centered,\n      centered = _ref$centered === void 0 ? false : _ref$centered,\n      _ref$fixed = _ref.fixed,\n      fixed = _ref$fixed === void 0 ? false : _ref$fixed,\n      _ref$mobileStacked = _ref.mobileStacked,\n      mobileStacked = _ref$mobileStacked === void 0 ? false : _ref$mobileStacked,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? text : _ref$children,\n      props = Banner_objectWithoutProperties(_ref, Banner_excluded);\n\n  var rootRef = (0,react.useRef)();\n  var contentRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  var handleEntering = (0,react.useCallback)(function (node, isAppearing) {\n    if (!isAppearing) {\n      node.style.height = "".concat(contentRef.current.offsetHeight, "px");\n    }\n  }, []);\n  var handleExiting = (0,react.useCallback)(function (node) {\n    node.style.height = \'0px\';\n  }, []);\n  var classNames = classnames_default()(banner_constants_cssClasses.ROOT, (_classnames = {}, Banner_defineProperty(_classnames, banner_constants_cssClasses.FIXED, fixed), Banner_defineProperty(_classnames, banner_constants_cssClasses.CENTERED, centered), Banner_defineProperty(_classnames, banner_constants_cssClasses.MOBILE_STACKED, mobileStacked), _classnames), className);\n\n  var content = /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    ref: contentRef,\n    className: banner_constants_cssClasses.CONTENT,\n    role: "status",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: banner_constants_cssClasses.GRAPHIC_TEXT_WRAPPER,\n      children: [graphic && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: banner_constants_cssClasses.GRAPHIC,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n          component: graphic,\n          fallback: icon_Icon,\n          className: banner_constants_cssClasses.ICON\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: children,\n        fallback: "div",\n        className: banner_constants_cssClasses.TEXT\n      })]\n    }), primaryAction && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: banner_constants_cssClasses.ACTIONS,\n      children: [secondaryAction && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: secondaryAction,\n        className: banner_constants_cssClasses.SECONDARY_ACTION\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: primaryAction,\n        className: banner_constants_cssClasses.PRIMARY_ACTION\n      })]\n    })]\n  });\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(esm_CSSTransition, {\n    "in": open,\n    appear: open,\n    timeout: {\n      appear: 0,\n      enter: numbers.BANNER_ANIMATION_OPEN_TIME_MS,\n      exit: numbers.BANNER_ANIMATION_CLOSE_TIME_MS\n    },\n    classNames: {\n      appear: banner_constants_cssClasses.APPEARING,\n      appearDone: banner_constants_cssClasses.APPEARED,\n      enter: banner_constants_cssClasses.OPENING,\n      enterActive: banner_constants_cssClasses.OPEN,\n      enterDone: banner_constants_cssClasses.OPEN,\n      exit: banner_constants_cssClasses.CLOSING\n    },\n    mountOnEnter: true,\n    unmountOnExit: true,\n    onEntering: handleEntering,\n    onExiting: handleExiting,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Banner_objectSpread(Banner_objectSpread({\n      ref: rootRef,\n      className: classNames,\n      role: "banner"\n    }, props), {}, {\n      children: content\n    }))\n  });\n});\nBanner.displayName = \'MDCBanner\';\nBanner.propTypes = {\n  text: (prop_types_default()).node.isRequired,\n  icon: (prop_types_default()).node,\n  graphic: (prop_types_default()).element,\n  action: (prop_types_default()).element,\n  primaryAction: (prop_types_default()).element,\n  secondaryAction: (prop_types_default()).element,\n  open: (prop_types_default()).bool,\n  appear: (prop_types_default()).bool,\n  fixed: (prop_types_default()).bool,\n  centered: (prop_types_default()).bool,\n  mobileStacked: (prop_types_default()).bool\n};\n/* harmony default export */ const banner_Banner = (Banner);\n;// CONCATENATED MODULE: ./src/banner/index.js\n\n;// CONCATENATED MODULE: ./src/button/constants.js\nvar button_constants_cssClasses = {\n  ROOT: \'mdc-button\',\n  RAISED: \'mdc-button--raised\',\n  UNELEVATED: \'mdc-button--unelevated\',\n  OUTLINED: \'mdc-button--outlined\',\n  TOUCH: \'mdc-button--touch\',\n  ICON_LEADING: \'mdc-button--icon-leading\',\n  ICON_TRAILING: \'mdc-button--icon-trailing\',\n  RIPPLE: \'mdc-button__ripple\',\n  ICON: \'mdc-button__icon\',\n  LABEL: \'mdc-button__label\',\n  TOUCH_ELEMENT: \'mdc-button__touch\'\n};\n;// CONCATENATED MODULE: ./src/button/Button.jsx\nvar Button_excluded = ["label", "icon", "leadingIcon", "trailingIcon", "raised", "unelevated", "outlined", "touch", "element", "component", "className", "children"];\n\nfunction Button_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Button_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Button_ownKeys(Object(source), true).forEach(function (key) { Button_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Button_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Button_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Button_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Button_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Button_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar Button = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var label = _ref.label,\n      icon = _ref.icon,\n      _ref$leadingIcon = _ref.leadingIcon,\n      leadingIcon = _ref$leadingIcon === void 0 ? icon : _ref$leadingIcon,\n      trailingIcon = _ref.trailingIcon,\n      _ref$raised = _ref.raised,\n      raised = _ref$raised === void 0 ? false : _ref$raised,\n      _ref$unelevated = _ref.unelevated,\n      unelevated = _ref$unelevated === void 0 ? false : _ref$unelevated,\n      _ref$outlined = _ref.outlined,\n      outlined = _ref$outlined === void 0 ? false : _ref$outlined,\n      _ref$touch = _ref.touch,\n      touch = _ref$touch === void 0 ? false : _ref$touch,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'button\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? label : _ref$children,\n      props = Button_objectWithoutProperties(_ref, Button_excluded);\n\n  var classNames = classnames_default()(button_constants_cssClasses.ROOT, (_classnames = {}, Button_defineProperty(_classnames, button_constants_cssClasses.RAISED, raised), Button_defineProperty(_classnames, button_constants_cssClasses.UNELEVATED, unelevated), Button_defineProperty(_classnames, button_constants_cssClasses.OUTLINED, outlined), Button_defineProperty(_classnames, button_constants_cssClasses.TOUCH, touch), Button_defineProperty(_classnames, button_constants_cssClasses.ICON_LEADING, Boolean(leadingIcon)), Button_defineProperty(_classnames, button_constants_cssClasses.ICON_TRAILING, Boolean(trailingIcon)), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, Button_objectSpread(Button_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: button_constants_cssClasses.RIPPLE\n    }), touch && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: button_constants_cssClasses.TOUCH_ELEMENT\n    }), leadingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: leadingIcon,\n      fallback: icon_Icon,\n      className: button_constants_cssClasses.ICON,\n      "aria-hidden": "true"\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: button_constants_cssClasses.LABEL,\n      children: children\n    }), trailingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: trailingIcon,\n      fallback: icon_Icon,\n      className: button_constants_cssClasses.ICON,\n      "aria-hidden": "true"\n    })]\n  }));\n});\nButton.displayName = \'MDCButton\';\nButton.propTypes = {\n  label: (prop_types_default()).node,\n  icon: (prop_types_default()).node,\n  leadingIcon: (prop_types_default()).node,\n  trailingIcon: (prop_types_default()).node,\n  raised: (prop_types_default()).bool,\n  unelevated: (prop_types_default()).bool,\n  outlined: (prop_types_default()).bool,\n  touch: (prop_types_default()).bool\n};\n/* harmony default export */ const button_Button = (Button);\n;// CONCATENATED MODULE: ./src/button/index.js\n\n;// CONCATENATED MODULE: ./src/card/constants.js\nvar card_constants_cssClasses = {\n  ROOT: \'mdc-card\',\n  OUTLINED: \'mdc-card--outlined\',\n  TITLE: \'mdc-card__title\',\n  SUBTITLE: \'mdc-card__subtitle\',\n  OVERLINE: \'mdc-card__overline\',\n  ACTIONS: \'mdc-card__actions\',\n  ACTIONS_FULL_BLEED: \'mdc-card__actions--full-bleed\',\n  ACTION_BUTTONS: \'mdc-card__action-buttons\',\n  ACTION_ICONS: \'mdc-card__action-icons\',\n  ACTION: \'mdc-card__action\',\n  ACTION_BUTTON: \'mdc-card__action--button\',\n  ACTION_ICON: \'mdc-card__action--icon\',\n  CONTENT: \'mdc-card__content\',\n  HEADER: \'mdc-card__header\',\n  HEADER_GRAPHIC: \'mdc-card__header__graphic\',\n  HEADER_CONTENT: \'mdc-card__header__content\',\n  HEADER_ACTIONS: \'mdc-card__header__actions\',\n  MEDIA: \'mdc-card__media\',\n  MEDIA_SQUARE: \'mdc-card__media--square\',\n  MEDIA_WIDE: \'mdc-card__media--16-9\',\n  MEDIA_CONTENT: \'mdc-card__media-content\',\n  PRIMARY_ACTION: \'mdc-card__primary-action\',\n  SECTION: \'mdc-card__section\',\n  SECTION_PRIMARY: \'mdc-card__section--primary\',\n  SECTION_SECONDARY: \'mdc-card__section--secondary\',\n  RIPPLE: \'mdc-card__ripple\'\n};\n;// CONCATENATED MODULE: ./src/card/Card.jsx\nvar Card_excluded = ["outlined", "element", "component", "className"];\n\nfunction Card_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Card_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Card_ownKeys(Object(source), true).forEach(function (key) { Card_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Card_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Card_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Card_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Card_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Card_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar Card = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$outlined = _ref.outlined,\n      outlined = _ref$outlined === void 0 ? false : _ref$outlined,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = Card_objectWithoutProperties(_ref, Card_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.ROOT, Card_defineProperty({}, card_constants_cssClasses.OUTLINED, outlined), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Card_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nCard.displayName = \'MDCCard\';\nCard.propTypes = {\n  outlined: (prop_types_default()).bool\n};\n/* harmony default export */ const card_Card = (Card);\n;// CONCATENATED MODULE: ./src/card/CardAction.jsx\nvar CardAction_excluded = ["button", "icon", "component", "className", "children"];\n\nfunction CardAction_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardAction_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardAction_ownKeys(Object(source), true).forEach(function (key) { CardAction_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardAction_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardAction_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardAction_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardAction_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardAction_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nfunction CardAction(_ref) {\n  var _classnames;\n\n  var _ref$button = _ref.button,\n      button = _ref$button === void 0 ? false : _ref$button,\n      _ref$icon = _ref.icon,\n      icon = _ref$icon === void 0 ? false : _ref$icon,\n      component = _ref.component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? component : _ref$children,\n      props = CardAction_objectWithoutProperties(_ref, CardAction_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.ACTION, (_classnames = {}, CardAction_defineProperty(_classnames, card_constants_cssClasses.ACTION_BUTTON, button), CardAction_defineProperty(_classnames, card_constants_cssClasses.ACTION_ICON, icon), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, CardAction_objectSpread({\n    component: children,\n    className: classNames\n  }, props));\n}\nCardAction.displayName = \'MDCCardAction\';\nCardAction.propTypes = {\n  button: (prop_types_default()).bool,\n  icon: (prop_types_default()).bool\n};\n;// CONCATENATED MODULE: ./src/card/CardActions.jsx\nvar CardActions_excluded = ["fullBleed", "element", "className"];\n\nfunction CardActions_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardActions_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardActions_ownKeys(Object(source), true).forEach(function (key) { CardActions_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardActions_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardActions_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardActions_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardActions_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardActions_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar CardActions = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$fullBleed = _ref.fullBleed,\n      fullBleed = _ref$fullBleed === void 0 ? false : _ref$fullBleed,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      props = CardActions_objectWithoutProperties(_ref, CardActions_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.ACTIONS, CardActions_defineProperty({}, card_constants_cssClasses.ACTIONS_FULL_BLEED, fullBleed), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, CardActions_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nCardActions.displayName = \'MDCCardActions\';\nCardActions.propTypes = {\n  fullBleed: (prop_types_default()).bool\n};\n/* harmony default export */ const card_CardActions = (CardActions);\n;// CONCATENATED MODULE: ./src/card/CardActionButtons.jsx\nvar CardActionButtons_excluded = ["element", "component", "className", "children"];\n\nfunction CardActionButtons_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardActionButtons_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardActionButtons_ownKeys(Object(source), true).forEach(function (key) { CardActionButtons_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardActionButtons_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardActionButtons_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardActionButtons_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardActionButtons_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardActionButtons_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar CardActionButtons = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = CardActionButtons_objectWithoutProperties(_ref, CardActionButtons_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.ACTION_BUTTONS, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, CardActionButtons_objectSpread(CardActionButtons_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      className: "".concat(card_constants_cssClasses.ACTION, " ").concat(card_constants_cssClasses.ACTION_BUTTON)\n    })\n  }));\n});\nCardActionButtons.displayName = \'MDCCardActionButtons\';\n/* harmony default export */ const card_CardActionButtons = (CardActionButtons);\n;// CONCATENATED MODULE: ./src/card/CardActionIcons.jsx\nvar CardActionIcons_excluded = ["element", "component", "className", "children"];\n\nfunction CardActionIcons_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardActionIcons_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardActionIcons_ownKeys(Object(source), true).forEach(function (key) { CardActionIcons_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardActionIcons_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardActionIcons_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardActionIcons_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardActionIcons_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardActionIcons_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar CardActionIcons = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = CardActionIcons_objectWithoutProperties(_ref, CardActionIcons_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.ACTION_ICONS, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, CardActionIcons_objectSpread(CardActionIcons_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      className: "".concat(card_constants_cssClasses.ACTION, " ").concat(card_constants_cssClasses.ACTION_ICON)\n    })\n  }));\n});\nCardActionIcons.displayName = \'MDCCardActionIcons\';\n/* harmony default export */ const card_CardActionIcons = (CardActionIcons);\n;// CONCATENATED MODULE: ./src/card/CardHeader.jsx\nvar CardHeader_excluded = ["title", "subtitle", "overline", "graphic", "actions", "element", "component", "className", "children"];\n\nfunction CardHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardHeader_ownKeys(Object(source), true).forEach(function (key) { CardHeader_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardHeader_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardHeader_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardHeader_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar CardHeader = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var title = _ref.title,\n      subtitle = _ref.subtitle,\n      overline = _ref.overline,\n      graphic = _ref.graphic,\n      actions = _ref.actions,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = CardHeader_objectWithoutProperties(_ref, CardHeader_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.HEADER, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, CardHeader_objectSpread(CardHeader_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [graphic && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: graphic,\n      className: card_constants_cssClasses.HEADER_GRAPHIC\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: card_constants_cssClasses.HEADER_CONTENT,\n      children: [overline && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: overline,\n        fallback: "span",\n        className: card_constants_cssClasses.OVERLINE\n      }), title && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: title,\n        fallback: "h2",\n        className: card_constants_cssClasses.TITLE\n      }), subtitle && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: subtitle,\n        fallback: "h3",\n        className: card_constants_cssClasses.SUBTITLE\n      }), children]\n    }), actions && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: card_constants_cssClasses.HEADER_ACTIONS,\n      children: react.Children.map(actions, function (action) {\n        return /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n          component: action,\n          className: card_constants_cssClasses.ACTION\n        });\n      })\n    })]\n  }));\n});\nCardHeader.displayName = \'MDCCardHeader\';\nCardHeader.propTypes = {\n  title: (prop_types_default()).node,\n  subtitle: (prop_types_default()).node,\n  overline: (prop_types_default()).node,\n  graphic: (prop_types_default()).element,\n  actions: prop_types_default().oneOfType([(prop_types_default()).element, prop_types_default().arrayOf((prop_types_default()).element)])\n};\n/* harmony default export */ const card_CardHeader = (CardHeader);\n;// CONCATENATED MODULE: ./src/card/CardMedia.jsx\nvar CardMedia_excluded = ["imageUrl", "content", "square", "wide", "element", "component", "className", "children"];\n\nfunction CardMedia_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardMedia_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardMedia_ownKeys(Object(source), true).forEach(function (key) { CardMedia_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardMedia_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardMedia_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardMedia_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardMedia_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardMedia_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar CardMedia = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var imageUrl = _ref.imageUrl,\n      content = _ref.content,\n      _ref$square = _ref.square,\n      square = _ref$square === void 0 ? false : _ref$square,\n      _ref$wide = _ref.wide,\n      wide = _ref$wide === void 0 ? false : _ref$wide,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? content : _ref$children,\n      props = CardMedia_objectWithoutProperties(_ref, CardMedia_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.MEDIA, (_classnames = {}, CardMedia_defineProperty(_classnames, card_constants_cssClasses.MEDIA_SQUARE, square), CardMedia_defineProperty(_classnames, card_constants_cssClasses.MEDIA_WIDE, wide), _classnames), className);\n  var style = imageUrl ? {\n    backgroundImage: "url(".concat(imageUrl, ")")\n  } : undefined;\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, CardMedia_objectSpread(CardMedia_objectSpread({\n    ref: ref,\n    className: classNames,\n    style: style\n  }, props), {}, {\n    children: children && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: card_constants_cssClasses.MEDIA_CONTENT,\n      children: children\n    })\n  }));\n});\nCardMedia.displayName = \'MDCCardMedia\';\nCardMedia.propTypes = {\n  imageUrl: (prop_types_default()).string,\n  content: (prop_types_default()).node,\n  square: (prop_types_default()).bool,\n  wide: (prop_types_default()).bool\n};\n/* harmony default export */ const card_CardMedia = (CardMedia);\n;// CONCATENATED MODULE: ./src/card/CardPrimaryAction.jsx\nvar CardPrimaryAction_excluded = ["element", "component", "className", "children"];\n\nfunction CardPrimaryAction_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardPrimaryAction_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardPrimaryAction_ownKeys(Object(source), true).forEach(function (key) { CardPrimaryAction_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardPrimaryAction_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardPrimaryAction_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardPrimaryAction_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardPrimaryAction_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardPrimaryAction_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar CardPrimaryAction = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = CardPrimaryAction_objectWithoutProperties(_ref, CardPrimaryAction_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.PRIMARY_ACTION, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, CardPrimaryAction_objectSpread(CardPrimaryAction_objectSpread({\n    ref: ref,\n    className: classNames,\n    tabIndex: "0"\n  }, props), {}, {\n    children: [children, /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: card_constants_cssClasses.RIPPLE\n    })]\n  }));\n});\nCardPrimaryAction.displayName = \'MDCCardPrimaryAction\';\n/* harmony default export */ const card_CardPrimaryAction = (CardPrimaryAction);\n;// CONCATENATED MODULE: ./src/card/CardSection.jsx\nvar CardSection_excluded = ["primary", "secondary", "element", "component", "className"];\n\nfunction CardSection_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CardSection_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CardSection_ownKeys(Object(source), true).forEach(function (key) { CardSection_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CardSection_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CardSection_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CardSection_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CardSection_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CardSection_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar CardSection = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$primary = _ref.primary,\n      primary = _ref$primary === void 0 ? false : _ref$primary,\n      _ref$secondary = _ref.secondary,\n      secondary = _ref$secondary === void 0 ? false : _ref$secondary,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = CardSection_objectWithoutProperties(_ref, CardSection_excluded);\n\n  var classNames = classnames_default()(card_constants_cssClasses.SECTION, (_classnames = {}, CardSection_defineProperty(_classnames, card_constants_cssClasses.SECTION_PRIMARY, primary), CardSection_defineProperty(_classnames, card_constants_cssClasses.SECTION_SECONDARY, secondary), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, CardSection_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nCardSection.displayName = \'MDCCardSection\';\nCardSection.propTypes = {\n  primary: (prop_types_default()).bool,\n  secondary: (prop_types_default()).bool\n};\n/* harmony default export */ const card_CardSection = (CardSection);\n;// CONCATENATED MODULE: ./src/card/index.js\n\n\n\n\n\n\n\n\n\ncard_Card.Action = CardAction;\ncard_Card.Actions = card_CardActions;\ncard_Card.ActionButtons = card_CardActionButtons;\ncard_Card.ActionIcons = card_CardActionIcons;\ncard_Card.Header = card_CardHeader;\ncard_Card.Media = card_CardMedia;\ncard_Card.PrimaryAction = card_CardPrimaryAction;\ncard_Card.Section = card_CardSection;\n\n;// CONCATENATED MODULE: ./src/checkbox/constants.js\nvar checkbox_constants_cssClasses = {\n  ROOT: \'mdc-checkbox\',\n  SELECTED: \'mdc-checkbox--selected\',\n  TOUCH: \'mdc-checkbox--touch\',\n  DISABLED: \'mdc-checkbox--disabled\',\n  ANIM_CHECKED_INDETERMINATE: \'mdc-checkbox--anim-checked-indeterminate\',\n  ANIM_CHECKED_UNCHECKED: \'mdc-checkbox--anim-checked-unchecked\',\n  ANIM_INDETERMINATE_CHECKED: \'mdc-checkbox--anim-indeterminate-checked\',\n  ANIM_INDETERMINATE_UNCHECKED: \'mdc-checkbox--anim-indeterminate-unchecked\',\n  ANIM_UNCHECKED_CHECKED: \'mdc-checkbox--anim-unchecked-checked\',\n  ANIM_UNCHECKED_INDETERMINATE: \'mdc-checkbox--anim-unchecked-indeterminate\',\n  NATIVE_CONTROL: \'mdc-checkbox__native-control\',\n  BACKGROUND: \'mdc-checkbox__background\',\n  CHECKMARK: \'mdc-checkbox__checkmark\',\n  CHECKMARK_PATH: \'mdc-checkbox__checkmark-path\',\n  MIXEDMARK: \'mdc-checkbox__mixedmark\',\n  RIPPLE: \'mdc-checkbox__ripple\'\n};\n;// CONCATENATED MODULE: ./src/checkbox/Checkbox.jsx\nvar Checkbox_excluded = ["checked", "indeterminate", "disabled", "touch", "onChange", "className"];\n\nfunction Checkbox_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Checkbox_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Checkbox_ownKeys(Object(source), true).forEach(function (key) { Checkbox_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Checkbox_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Checkbox_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Checkbox_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Checkbox_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Checkbox_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar Checkbox = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var checked = _ref.checked,\n      indeterminate = _ref.indeterminate,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$touch = _ref.touch,\n      touch = _ref$touch === void 0 ? false : _ref$touch,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      className = _ref.className,\n      props = Checkbox_objectWithoutProperties(_ref, Checkbox_excluded);\n\n  var inputRef = (0,react.useRef)();\n  (0,react.useEffect)(function () {\n    inputRef.current.indeterminate = indeterminate;\n  }, [indeterminate]);\n  var handleChange = (0,react.useCallback)(function (event) {\n    onChange(event, event.target.checked, event.target);\n  }, [onChange]);\n  var classNames = classnames_default()(checkbox_constants_cssClasses.ROOT, (_classnames = {}, Checkbox_defineProperty(_classnames, checkbox_constants_cssClasses.SELECTED, checked), Checkbox_defineProperty(_classnames, checkbox_constants_cssClasses.DISABLED, disabled), Checkbox_defineProperty(_classnames, checkbox_constants_cssClasses.TOUCH, touch), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    ref: ref,\n    className: classNames,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", Checkbox_objectSpread({\n      ref: inputRef,\n      className: checkbox_constants_cssClasses.NATIVE_CONTROL,\n      type: "checkbox",\n      checked: checked,\n      disabled: disabled,\n      onChange: handleChange\n    }, props)), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: checkbox_constants_cssClasses.BACKGROUND,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n        className: checkbox_constants_cssClasses.CHECKMARK,\n        viewBox: "0 0 24 24",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n          className: checkbox_constants_cssClasses.CHECKMARK_PATH,\n          fill: "none",\n          d: "M1.73,12.91 8.1,19.28 22.79,4.59"\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: checkbox_constants_cssClasses.MIXEDMARK\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: checkbox_constants_cssClasses.RIPPLE\n    })]\n  });\n});\nCheckbox.displayName = \'MDCCheckbox\';\nCheckbox.propTypes = {\n  checked: (prop_types_default()).bool,\n  indeterminate: (prop_types_default()).bool,\n  disabled: (prop_types_default()).bool,\n  touch: (prop_types_default()).bool,\n  onChange: (prop_types_default()).func\n};\n/* harmony default export */ const checkbox_Checkbox = (Checkbox);\n;// CONCATENATED MODULE: ./src/checkbox/index.js\n\n;// CONCATENATED MODULE: ./src/chips/constants.js\nvar constants_numbers = {\n  SELECTING_ANIMATION_MS: 150,\n  DESELECTING_ANIMATION_MS: 100\n};\nvar chipSetCssClasses = {\n  ROOT: \'mdc-evolution-chip-set\',\n  OVERFLOW: \'mdc-evolution-chip-set--overflow\',\n  CHIPS: \'mdc-evolution-chip-set__chips\'\n};\nvar chipCssClasses = {\n  ROOT: \'mdc-evolution-chip\',\n  FILTER: \'mdc-evolution-chip--filter\',\n  SELECTABLE: \'mdc-evolution-chip--selectable\',\n  SELECTED: \'mdc-evolution-chip--selected\',\n  SELECTING: \'mdc-evolution-chip--selecting\',\n  SELECTING_WITH_PRIMARY_ICON: \'mdc-evolution-chip--selecting-with-primary-icon\',\n  DESELECTING: \'mdc-evolution-chip--deselecting\',\n  DESELECTING_WITH_PRIMARY_ICON: \'mdc-evolution-chip--deselecting-with-primary-icon\',\n  OUTLINED: \'mdc-evolution-chip--outlined\',\n  ENTER: \'mdc-evolution-chip--enter\',\n  EXIT: \'mdc-evolution-chip--exit\',\n  HIDDEN: \'mdc-evolution-chip--hidden\',\n  DISABLED: \'mdc-evolution-chip--disabled\',\n  TOUCH: \'mdc-evolution-chip--touch\',\n  WITH_PRIMARY_GRAPHIC: \'mdc-evolution-chip--with-primary-graphic\',\n  WITH_PRIMARY_ICON: \'mdc-evolution-chip--with-primary-icon\',\n  WITH_TRAILING_ACTION: \'mdc-evolution-chip--with-trailing-action\',\n  WITH_AVATAR: \'mdc-evolution-chip--with-avatar\',\n  CELL: \'mdc-evolution-chip__cell\',\n  PRIMARY_CELL: \'mdc-evolution-chip__cell--primary\',\n  TRAILING_CELL: \'mdc-evolution-chip__cell--trailing\',\n  ACTION: \'mdc-evolution-chip__action\',\n  PRIMARY_ACTION: \'mdc-evolution-chip__action--primary\',\n  TRAILING_ACTION: \'mdc-evolution-chip__action--trailing\',\n  PRESENTATIONAL_ACTION: \'mdc-evolution-chip__action--presentational\',\n  ACTION_TOUCH: \'mdc-evolution-chip__action-touch\',\n  RIPPLE: \'mdc-evolution-chip__ripple\',\n  PRIMARY_RIPPLE: \'mdc-evolution-chip__ripple--primary\',\n  TRAILING_RIPPLE: \'mdc-evolution-chip__ripple--trailing\',\n  GRAPHIC: \'mdc-evolution-chip__graphic\',\n  ICON: \'mdc-evolution-chip__icon\',\n  PRIMARY_ICON: \'mdc-evolution-chip__icon--primary\',\n  TRAILING_ICON: \'mdc-evolution-chip__icon--trailing\',\n  TEXT_LABEL: \'mdc-evolution-chip__text-label\',\n  CHECKMARK: \'mdc-evolution-chip__checkmark\',\n  CHECKMARK_SVG: \'mdc-evolution-chip__checkmark-svg\',\n  CHECKMARK_PATH: \'mdc-evolution-chip__checkmark-path\'\n};\n;// CONCATENATED MODULE: ./src/chips/ChipPrimaryAction.jsx\nvar ChipPrimaryAction_excluded = ["text", "graphic", "icon", "presentational", "selectable", "selected", "disabled", "element", "component", "children"];\n\nfunction ChipPrimaryAction_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ChipPrimaryAction_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ChipPrimaryAction_ownKeys(Object(source), true).forEach(function (key) { ChipPrimaryAction_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ChipPrimaryAction_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ChipPrimaryAction_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ChipPrimaryAction_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ChipPrimaryAction_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ChipPrimaryAction_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nfunction ChipPrimaryAction(_ref) {\n  var text = _ref.text,\n      graphic = _ref.graphic,\n      icon = _ref.icon,\n      _ref$presentational = _ref.presentational,\n      presentational = _ref$presentational === void 0 ? false : _ref$presentational,\n      _ref$selectable = _ref.selectable,\n      selectable = _ref$selectable === void 0 ? false : _ref$selectable,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'button\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? text : _ref$children,\n      props = ChipPrimaryAction_objectWithoutProperties(_ref, ChipPrimaryAction_excluded);\n\n  var isButton = Element === \'button\';\n  var classNames = classnames_default()(chipCssClasses.ACTION, chipCssClasses.PRIMARY_ACTION, ChipPrimaryAction_defineProperty({}, chipCssClasses.PRESENTATIONAL_ACTION, presentational));\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, ChipPrimaryAction_objectSpread(ChipPrimaryAction_objectSpread({\n    className: classNames,\n    type: isButton ? \'button\' : undefined,\n    disabled: isButton && disabled,\n    tabIndex: disabled ? \'-1\' : \'0\',\n    role: !isButton ? \'option\' : undefined,\n    "aria-selected": !isButton ? selected : undefined,\n    "aria-disabled": !isButton ? disabled : undefined\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: "".concat(chipCssClasses.RIPPLE, " ").concat(chipCssClasses.PRIMARY_RIPPLE)\n    }), (graphic || icon || selectable) && /*#__PURE__*/(0,jsx_runtime.jsxs)("span", {\n      className: chipCssClasses.GRAPHIC,\n      children: [graphic, icon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: icon,\n        fallback: icon_Icon,\n        className: "".concat(chipCssClasses.ICON, " ").concat(chipCssClasses.PRIMARY_ICON)\n      }), selectable && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: chipCssClasses.CHECKMARK,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n          className: chipCssClasses.CHECKMARK_SVG,\n          viewBox: "-2 -3 30 30",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n            className: chipCssClasses.CHECKMARK_PATH,\n            fill: "none",\n            stroke: "black",\n            d: "M1.73,12.91 8.1,19.28 22.79,4.59"\n          })\n        })\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: chipCssClasses.TEXT_LABEL,\n      children: children\n    })]\n  }));\n}\n;// CONCATENATED MODULE: ./src/chips/ChipTrailingAction.jsx\nvar ChipTrailingAction_excluded = ["icon", "presentational"];\n\nfunction ChipTrailingAction_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ChipTrailingAction_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ChipTrailingAction_ownKeys(Object(source), true).forEach(function (key) { ChipTrailingAction_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ChipTrailingAction_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ChipTrailingAction_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ChipTrailingAction_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ChipTrailingAction_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ChipTrailingAction_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nfunction ChipTrailingAction(_ref) {\n  var icon = _ref.icon,\n      _ref$presentational = _ref.presentational,\n      presentational = _ref$presentational === void 0 ? false : _ref$presentational,\n      props = ChipTrailingAction_objectWithoutProperties(_ref, ChipTrailingAction_excluded);\n\n  var classNames = classnames_default()(chipCssClasses.ACTION, chipCssClasses.TRAILING_ACTION, ChipTrailingAction_defineProperty({}, chipCssClasses.PRESENTATIONAL_ACTION, presentational));\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("button", ChipTrailingAction_objectSpread(ChipTrailingAction_objectSpread({\n    className: classNames,\n    type: "button",\n    tabIndex: "-1",\n    "aria-hidden": "true"\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: "".concat(chipCssClasses.RIPPLE, " ").concat(chipCssClasses.TRAILING_RIPPLE)\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: icon,\n      fallback: icon_Icon,\n      className: "".concat(chipCssClasses.ICON, " ").concat(chipCssClasses.TRAILING_ICON)\n    })]\n  }));\n}\n;// CONCATENATED MODULE: ./src/chips/Chip.jsx\nvar Chip_excluded = ["value", "text", "icon", "avatar", "graphic", "primaryIcon", "trailingIcon", "selectable", "filter", "selected", "outlined", "disabled", "touch", "withAvatar", "element", "component", "className"];\n\nfunction Chip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Chip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Chip_ownKeys(Object(source), true).forEach(function (key) { Chip_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Chip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Chip_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Chip_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Chip_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Chip_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar Chip = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var value = _ref.value,\n      text = _ref.text,\n      icon = _ref.icon,\n      avatar = _ref.avatar,\n      _ref$graphic = _ref.graphic,\n      graphic = _ref$graphic === void 0 ? avatar : _ref$graphic,\n      _ref$primaryIcon = _ref.primaryIcon,\n      primaryIcon = _ref$primaryIcon === void 0 ? icon : _ref$primaryIcon,\n      trailingIcon = _ref.trailingIcon,\n      _ref$selectable = _ref.selectable,\n      selectable = _ref$selectable === void 0 ? false : _ref$selectable,\n      _ref$filter = _ref.filter,\n      filter = _ref$filter === void 0 ? false : _ref$filter,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$outlined = _ref.outlined,\n      outlined = _ref$outlined === void 0 ? false : _ref$outlined,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$touch = _ref.touch,\n      touch = _ref$touch === void 0 ? false : _ref$touch,\n      _ref$withAvatar = _ref.withAvatar,\n      withAvatar = _ref$withAvatar === void 0 ? Boolean(avatar) : _ref$withAvatar,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'span\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = Chip_objectWithoutProperties(_ref, Chip_excluded);\n\n  var withPrimaryGraphic = selectable || Boolean(graphic) || Boolean(primaryIcon);\n  var withPrimaryIcon = Boolean(primaryIcon);\n  var withTrailingAction = Boolean(trailingIcon);\n  var classNames = classnames_default()(chipCssClasses.ROOT, (_classnames = {}, Chip_defineProperty(_classnames, chipCssClasses.SELECTABLE, selectable), Chip_defineProperty(_classnames, chipCssClasses.FILTER, filter), Chip_defineProperty(_classnames, chipCssClasses.OUTLINED, outlined), Chip_defineProperty(_classnames, chipCssClasses.DISABLED, disabled), Chip_defineProperty(_classnames, chipCssClasses.TOUCH, touch), Chip_defineProperty(_classnames, chipCssClasses.WITH_PRIMARY_GRAPHIC, withPrimaryGraphic), Chip_defineProperty(_classnames, chipCssClasses.WITH_PRIMARY_ICON, withPrimaryIcon), Chip_defineProperty(_classnames, chipCssClasses.WITH_TRAILING_ACTION, withTrailingAction), Chip_defineProperty(_classnames, chipCssClasses.WITH_AVATAR, withAvatar), _classnames), className);\n  var selectingClass = withPrimaryIcon ? chipCssClasses.SELECTING_WITH_PRIMARY_ICON : chipCssClasses.SELECTING;\n  var deselectingClass = withPrimaryIcon ? chipCssClasses.DESELECTING_WITH_PRIMARY_ICON : chipCssClasses.DESELECTING;\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(esm_CSSTransition, {\n    "in": selected,\n    appear: true,\n    timeout: {\n      enter: constants_numbers.SELECTING_ANIMATION_MS,\n      exit: constants_numbers.DESELECTING_ANIMATION_MS\n    },\n    classNames: {\n      enter: selectingClass,\n      enterActive: "".concat(chipCssClasses.SELECTED, " ").concat(selectingClass),\n      enterDone: chipCssClasses.SELECTED,\n      exit: deselectingClass,\n      exitActive: deselectingClass\n    },\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Chip_objectSpread(Chip_objectSpread({\n      ref: ref,\n      className: classNames,\n      "data-value": value,\n      role: selectable ? \'presentation\' : \'row\'\n    }, props), {}, {\n      children: selectable ? /*#__PURE__*/(0,jsx_runtime.jsx)(ChipPrimaryAction, {\n        element: "span",\n        text: text,\n        graphic: graphic,\n        icon: primaryIcon,\n        selectable: selectable,\n        selected: selected,\n        disabled: disabled\n      }) : /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "".concat(chipCssClasses.CELL, " ").concat(chipCssClasses.PRIMARY_CELL),\n          role: "gridcell",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(ChipPrimaryAction, {\n            text: text,\n            graphic: graphic,\n            icon: primaryIcon,\n            disabled: disabled\n          })\n        }), trailingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: "".concat(chipCssClasses.CELL, " ").concat(chipCssClasses.TRAILING_CELL),\n          role: "gridcell",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(ChipTrailingAction, {\n            icon: trailingIcon,\n            disabled: disabled\n          })\n        })]\n      })\n    }))\n  });\n});\nChip.displayName = \'MDCChip\';\nChip.propTypes = {\n  value: (prop_types_default()).any,\n  text: (prop_types_default()).node,\n  leadingIcon: (prop_types_default()).node,\n  trailingIcon: (prop_types_default()).node,\n  selected: (prop_types_default()).bool,\n  outlined: (prop_types_default()).bool,\n  onClick: (prop_types_default()).func\n};\n/* harmony default export */ const chips_Chip = (Chip);\n;// CONCATENATED MODULE: ./src/types.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction isUndefined(value) {\n  return value === undefined;\n}\nfunction isNull(value) {\n  return value === null;\n}\nfunction isBoolean(value) {\n  return typeof value === \'boolean\';\n}\nfunction isNumber(value) {\n  return typeof value === \'number\';\n}\nfunction isString(value) {\n  return typeof value === \'string\';\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isObject(value) {\n  return _typeof(value) === \'object\' && !isNull(value) && !isArray(value);\n}\n;// CONCATENATED MODULE: ./src/chips/ChipSet.jsx\nvar ChipSet_excluded = ["value", "chips", "input", "choice", "filter", "overflow", "onChange", "element", "component", "className", "children"];\n\nfunction ChipSet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ChipSet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ChipSet_ownKeys(Object(source), true).forEach(function (key) { ChipSet_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ChipSet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ChipSet_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ChipSet_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ChipSet_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ChipSet_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar ChipSet = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var value = _ref.value,\n      chips = _ref.chips,\n      _ref$input = _ref.input,\n      input = _ref$input === void 0 ? false : _ref$input,\n      _ref$choice = _ref.choice,\n      choice = _ref$choice === void 0 ? !input && !isUndefined(value) && !isArray(value) : _ref$choice,\n      _ref$filter = _ref.filter,\n      filter = _ref$filter === void 0 ? !input && !isUndefined(value) && isArray(value) : _ref$filter,\n      _ref$overflow = _ref.overflow,\n      overflow = _ref$overflow === void 0 ? false : _ref$overflow,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? chips === null || chips === void 0 ? void 0 : chips.map(function (chip) {\n    return (0,react.createElement)(chips_Chip, chip);\n  }) : _ref$children,\n      props = ChipSet_objectWithoutProperties(_ref, ChipSet_excluded);\n\n  var handleClick = (0,react.useCallback)(function (event) {\n    var chipValue = event.currentTarget.dataset.value;\n    var newValue = choice ? chipValue : value.includes(chipValue) ? value.filter(function (v) {\n      return v !== chipValue;\n    }) : value.concat(chipValue);\n    onChange(newValue);\n  }, [value, choice, onChange]);\n  var classNames = classnames_default()(chipSetCssClasses.ROOT, ChipSet_defineProperty({}, chipSetCssClasses.OVERFLOW, overflow), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, ChipSet_objectSpread(ChipSet_objectSpread({\n    ref: ref,\n    className: classNames,\n    role: filter ? \'listbox\' : \'grid\'\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: chipSetCssClasses.CHIPS,\n      role: "presentation",\n      children: isUndefined(value) ? children : react.Children.map(children, function (chip) {\n        var chipValue = chip.props.value;\n        return (0,react.cloneElement)(chip, {\n          selectable: true,\n          selected: choice ? value === chipValue : value.includes(chipValue),\n          onClickCapture: choice || filter ? handleClick : undefined\n        });\n      })\n    })\n  }));\n});\nChipSet.displayName = \'MDCChipSet\';\nChipSet.propTypes = {\n  value: (prop_types_default()).any,\n  input: (prop_types_default()).bool,\n  choice: (prop_types_default()).bool,\n  filter: (prop_types_default()).bool,\n  overflow: (prop_types_default()).bool,\n  onChange: (prop_types_default()).func\n};\n/* harmony default export */ const chips_ChipSet = (ChipSet);\n;// CONCATENATED MODULE: ./src/chips/index.js\n\n\nchips_Chip.Set = chips_ChipSet;\n\n;// CONCATENATED MODULE: ./src/circular-progress/constants.js\nvar strings = {\n  XMLNS: \'http://www.w3.org/2000/svg\'\n};\nvar sizeProps = {\n  large: {\n    viewBox: 48,\n    radius: 18,\n    strokeWidth: 4,\n    gapPatchStrokeWidth: 3.2,\n    strokeDasharray: 113.097,\n    indeterminateStrokeDashoffset: 56.549\n  },\n  medium: {\n    viewBox: 32,\n    radius: 12.5,\n    strokeWidth: 3,\n    gapPatchStrokeWidth: 2.4,\n    strokeDasharray: 78.54,\n    indeterminateStrokeDashoffset: 39.27\n  },\n  small: {\n    viewBox: 24,\n    radius: 8.75,\n    strokeWidth: 2.5,\n    gapPatchStrokeWidth: 2,\n    strokeDasharray: 54.978,\n    indeterminateStrokeDashoffset: 27.489\n  }\n};\nvar circular_progress_constants_cssClasses = {\n  ROOT: \'mdc-circular-progress\',\n  SMALL: \'mdc-circular-progress--small\',\n  MEDIUM: \'mdc-circular-progress--medium\',\n  LARGE: \'mdc-circular-progress--large\',\n  INDETERMINATE: \'mdc-circular-progress--indeterminate\',\n  CLOSED: \'mdc-circular-progress--closed\',\n  DETERMINATE_CONTAINER: \'mdc-circular-progress__determinate-container\',\n  DETERMINATE_CIRCLE_GRAPHIC: \'mdc-circular-progress__determinate-circle-graphic\',\n  DETERMINATE_TRACK: \'mdc-circular-progress__determinate-track\',\n  DETERMINATE_CIRCLE: \'mdc-circular-progress__determinate-circle\',\n  INDETERMINATE_CONTAINER: \'mdc-circular-progress__indeterminate-container\',\n  INDETERMINATE_CIRCLE_GRAPHIC: \'mdc-circular-progress__indeterminate-circle-graphic\',\n  SPINNER_LAYER: \'mdc-circular-progress__spinner-layer\',\n  COLOR: \'mdc-circular-progress__color\',\n  CIRCLE_CLIPPER: \'mdc-circular-progress__circle-clipper\',\n  CIRCLE_LEFT: \'mdc-circular-progress__circle-left\',\n  CIRCLE_RIGHT: \'mdc-circular-progress__circle-right\',\n  GAP_PATCH: \'mdc-circular-progress__gap-patch\'\n};\nvar Size = {\n  LARGE: \'large\',\n  MEDIUM: \'medium\',\n  SMALL: \'small\'\n};\n;// CONCATENATED MODULE: ./src/circular-progress/CircularProgress.jsx\nvar CircularProgress_excluded = ["value", "size", "indeterminate", "closed", "colorful", "className"];\n\nfunction CircularProgress_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CircularProgress_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CircularProgress_ownKeys(Object(source), true).forEach(function (key) { CircularProgress_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CircularProgress_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CircularProgress_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CircularProgress_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CircularProgress_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CircularProgress_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar CircularProgress = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? Size.MEDIUM : _ref$size,\n      _ref$indeterminate = _ref.indeterminate,\n      indeterminate = _ref$indeterminate === void 0 ? false : _ref$indeterminate,\n      _ref$closed = _ref.closed,\n      closed = _ref$closed === void 0 ? false : _ref$closed,\n      _ref$colorful = _ref.colorful,\n      colorful = _ref$colorful === void 0 ? false : _ref$colorful,\n      className = _ref.className,\n      props = CircularProgress_objectWithoutProperties(_ref, CircularProgress_excluded);\n\n  var classNames = classnames_default()(circular_progress_constants_cssClasses.ROOT, (_classnames = {}, CircularProgress_defineProperty(_classnames, "".concat(circular_progress_constants_cssClasses.ROOT, "--").concat(size), size), CircularProgress_defineProperty(_classnames, circular_progress_constants_cssClasses.INDETERMINATE, indeterminate), CircularProgress_defineProperty(_classnames, circular_progress_constants_cssClasses.CLOSED, closed), _classnames), className);\n  var _sizeProps$size = sizeProps[size],\n      viewBox = _sizeProps$size.viewBox,\n      radius = _sizeProps$size.radius,\n      strokeDasharray = _sizeProps$size.strokeDasharray,\n      strokeWidth = _sizeProps$size.strokeWidth,\n      gapPatchStrokeWidth = _sizeProps$size.gapPatchStrokeWidth,\n      indeterminateStrokeDashoffset = _sizeProps$size.indeterminateStrokeDashoffset;\n  var progress = value > 1 ? value / 100 : Number(value);\n  var cx = viewBox / 2,\n      cy = viewBox / 2;\n  var strokeDashoffset = 2 * Math.PI * radius * (1 - progress);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", CircularProgress_objectSpread(CircularProgress_objectSpread({\n    ref: ref,\n    className: classNames,\n    role: "progressbar",\n    "aria-valuemin": 0,\n    "aria-valuemax": 1,\n    "aria-valuenow": progress\n  }, props), {}, {\n    children: [!indeterminate && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: circular_progress_constants_cssClasses.DETERMINATE_CONTAINER,\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("svg", {\n        className: circular_progress_constants_cssClasses.DETERMINATE_CIRCLE_GRAPHIC,\n        viewBox: "0 0 ".concat(viewBox, " ").concat(viewBox),\n        xmlns: strings.XMLNS,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("circle", {\n          className: circular_progress_constants_cssClasses.DETERMINATE_TRACK,\n          cx: cx,\n          cy: cy,\n          r: radius,\n          strokeWidth: strokeWidth\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("circle", {\n          className: circular_progress_constants_cssClasses.DETERMINATE_CIRCLE,\n          cx: cx,\n          cy: cy,\n          r: radius,\n          strokeWidth: strokeWidth,\n          strokeDasharray: strokeDasharray,\n          strokeDashoffset: strokeDashoffset\n        })]\n      })\n    }), indeterminate && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: circular_progress_constants_cssClasses.INDETERMINATE_CONTAINER,\n      children: (colorful ? [1, 2, 3, 4] : [0]).map(function (n) {\n        return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: classnames_default()(circular_progress_constants_cssClasses.SPINNER_LAYER, CircularProgress_defineProperty({}, "".concat(circular_progress_constants_cssClasses.PROGRESS_COLOR, "-").concat(n), n)),\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "".concat(circular_progress_constants_cssClasses.CIRCLE_CLIPPER, " ").concat(circular_progress_constants_cssClasses.CIRCLE_LEFT),\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n              className: circular_progress_constants_cssClasses.INDETERMINATE_CIRCLE_GRAPHIC,\n              viewBox: "0 0 ".concat(viewBox, " ").concat(viewBox),\n              xmlns: strings.XMLNS,\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("circle", {\n                cx: cx,\n                cy: cy,\n                r: radius,\n                strokeWidth: strokeWidth,\n                strokeDasharray: strokeDasharray,\n                strokeDashoffset: indeterminateStrokeDashoffset\n              })\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: circular_progress_constants_cssClasses.GAP_PATCH,\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n              className: circular_progress_constants_cssClasses.INDETERMINATE_CIRCLE_GRAPHIC,\n              viewBox: "0 0 ".concat(viewBox, " ").concat(viewBox),\n              xmlns: strings.XMLNS,\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("circle", {\n                cx: cx,\n                cy: cy,\n                r: radius,\n                strokeWidth: gapPatchStrokeWidth,\n                strokeDasharray: strokeDasharray,\n                strokeDashoffset: indeterminateStrokeDashoffset\n              })\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: "".concat(circular_progress_constants_cssClasses.CIRCLE_CLIPPER, " ").concat(circular_progress_constants_cssClasses.CIRCLE_RIGHT),\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n              className: circular_progress_constants_cssClasses.INDETERMINATE_CIRCLE_GRAPHIC,\n              viewBox: "0 0 ".concat(viewBox, " ").concat(viewBox),\n              xmlns: strings.XMLNS,\n              children: /*#__PURE__*/(0,jsx_runtime.jsx)("circle", {\n                cx: cx,\n                cy: cy,\n                r: radius,\n                strokeWidth: strokeWidth,\n                strokeDasharray: strokeDasharray,\n                strokeDashoffset: indeterminateStrokeDashoffset\n              })\n            })\n          })]\n        }, n);\n      })\n    })]\n  }));\n});\nCircularProgress.displayName = \'MDCCircularProgress\';\nCircularProgress.propTypes = {\n  value: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  size: prop_types_default().oneOf([Size.SMALL, Size.MEDIUM, Size.LARGE]),\n  indeterminate: (prop_types_default()).bool,\n  closed: (prop_types_default()).bool,\n  colorful: (prop_types_default()).bool\n};\nCircularProgress.Size = Size;\n/* harmony default export */ const circular_progress_CircularProgress = (CircularProgress);\n;// CONCATENATED MODULE: ./src/circular-progress/index.js\n\n;// CONCATENATED MODULE: ./src/icon-button/constants.js\nvar icon_button_constants_cssClasses = {\n  ROOT: \'mdc-icon-button\',\n  TOUCH: \'mdc-icon-button--touch\',\n  ICON: \'mdc-icon-button__icon\',\n  RIPPLE: \'mdc-icon-button__ripple\',\n  TOUCH_ELEMENT: \'mdc-icon-button__touch\'\n};\n;// CONCATENATED MODULE: ./src/icon-button/IconButton.jsx\nvar IconButton_excluded = ["icon", "touch", "element", "component", "className", "children"];\n\nfunction IconButton_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction IconButton_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { IconButton_ownKeys(Object(source), true).forEach(function (key) { IconButton_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { IconButton_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction IconButton_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction IconButton_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = IconButton_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction IconButton_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar IconButton = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var icon = _ref.icon,\n      _ref$touch = _ref.touch,\n      touch = _ref$touch === void 0 ? false : _ref$touch,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'button\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? icon : _ref$children,\n      props = IconButton_objectWithoutProperties(_ref, IconButton_excluded);\n\n  var classNames = classnames_default()(icon_button_constants_cssClasses.ROOT, (_classnames = {}, IconButton_defineProperty(_classnames, cssClasses.ROOT, typeof children === \'string\'), IconButton_defineProperty(_classnames, icon_button_constants_cssClasses.TOUCH, touch), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, IconButton_objectSpread(IconButton_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: icon_button_constants_cssClasses.RIPPLE\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      className: icon_button_constants_cssClasses.ICON\n    }), touch && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: icon_button_constants_cssClasses.TOUCH_ELEMENT\n    })]\n  }));\n});\nIconButton.displayName = \'MDCIconButton\';\nIconButton.propTypes = {\n  icon: (prop_types_default()).node,\n  touch: (prop_types_default()).bool\n};\n/* harmony default export */ const icon_button_IconButton = (IconButton);\n;// CONCATENATED MODULE: ./src/icon-button/index.js\n\n;// CONCATENATED MODULE: ./src/linear-progress/constants.js\nvar linear_progress_constants_cssClasses = {\n  ROOT: \'mdc-linear-progress\',\n  INDETERMINATE: \'mdc-linear-progress--indeterminate\',\n  ANIMATION_READY: \'mdc-linear-progress--animation-ready\',\n  CLOSED: \'mdc-linear-progress--closed\',\n  CLOSED_ANIMATION_OFF: \'mdc-linear-progress--closed-animation-off\',\n  BUFFER: \'mdc-linear-progress__buffer\',\n  BUFFER_BAR: \'mdc-linear-progress__buffer-bar\',\n  BUFFER_DOTS: \'mdc-linear-progress__buffer-dots\',\n  BAR: \'mdc-linear-progress__bar\',\n  PRIMARY_BAR: \'mdc-linear-progress__primary-bar\',\n  SECONDARY_BAR: \'mdc-linear-progress__secondary-bar\',\n  BAR_INNER: \'mdc-linear-progress__bar-inner\'\n};\n;// CONCATENATED MODULE: ./src/linear-progress/LinearProgress.jsx\nvar LinearProgress_excluded = ["value", "buffer", "indeterminate", "closed", "className"];\n\nfunction LinearProgress_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction LinearProgress_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LinearProgress_ownKeys(Object(source), true).forEach(function (key) { LinearProgress_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LinearProgress_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction LinearProgress_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction LinearProgress_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = LinearProgress_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction LinearProgress_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar LinearProgress = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      _ref$buffer = _ref.buffer,\n      buffer = _ref$buffer === void 0 ? 0 : _ref$buffer,\n      _ref$indeterminate = _ref.indeterminate,\n      indeterminate = _ref$indeterminate === void 0 ? false : _ref$indeterminate,\n      _ref$closed = _ref.closed,\n      closed = _ref$closed === void 0 ? false : _ref$closed,\n      className = _ref.className,\n      props = LinearProgress_objectWithoutProperties(_ref, LinearProgress_excluded);\n\n  var classNames = classnames_default()(linear_progress_constants_cssClasses.ROOT, (_classnames = {}, LinearProgress_defineProperty(_classnames, linear_progress_constants_cssClasses.INDETERMINATE, indeterminate), LinearProgress_defineProperty(_classnames, linear_progress_constants_cssClasses.ANIMATION_READY, indeterminate), LinearProgress_defineProperty(_classnames, linear_progress_constants_cssClasses.CLOSED, closed), _classnames), className);\n  var primaryBarStyle = {\n    transform: "scaleX(".concat(indeterminate ? 1 : value > 1 ? value * 0.01 : value, ")")\n  };\n  var bufferStyle = {\n    flexBasis: buffer ? "".concat(indeterminate ? 1 : buffer < 1 ? buffer * 100 : buffer, "%") : undefined\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", LinearProgress_objectSpread(LinearProgress_objectSpread({\n    ref: ref,\n    className: classNames,\n    role: "progressbar",\n    "aria-valuemin": "0",\n    "aria-valuemax": "1",\n    "aria-valuenow": value > 1 ? value * 0.01 : value\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: linear_progress_constants_cssClasses.BUFFER,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: linear_progress_constants_cssClasses.BUFFER_BAR,\n        style: bufferStyle\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: linear_progress_constants_cssClasses.BUFFER_DOTS\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "".concat(linear_progress_constants_cssClasses.BAR, " ").concat(linear_progress_constants_cssClasses.PRIMARY_BAR),\n      style: primaryBarStyle,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: linear_progress_constants_cssClasses.BAR_INNER\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "".concat(linear_progress_constants_cssClasses.BAR, " ").concat(linear_progress_constants_cssClasses.SECONDARY_BAR),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: linear_progress_constants_cssClasses.BAR_INNER\n      })\n    })]\n  }));\n});\nLinearProgress.displayName = \'MDCLinearProgress\';\nLinearProgress.propTypes = {\n  value: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  buffer: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  indeterminate: (prop_types_default()).bool,\n  closed: (prop_types_default()).bool\n};\n/* harmony default export */ const linear_progress_LinearProgress = (LinearProgress);\n;// CONCATENATED MODULE: ./src/linear-progress/index.js\n\n;// CONCATENATED MODULE: ./src/data-table/constants.js\nvar data_table_constants_cssClasses = {\n  ROOT: \'mdc-data-table\',\n  STICKY_HEADER: \'mdc-data-table--sticky-header\',\n  IN_PROGRESS: \'mdc-data-table--in-progress\',\n  TABLE_CONTAINER: \'mdc-data-table__table-container\',\n  TABLE: \'mdc-data-table__table\',\n  HEADER: \'mdc-data-table__header\',\n  HEADER_ROW: \'mdc-data-table__header-row\',\n  HEADER_ROW_CHECKBOX: \'mdc-data-table__header-row-checkbox\',\n  HEADER_CELL: \'mdc-data-table__header-cell\',\n  HEADER_CELL_CHECKBOX: \'mdc-data-table__header-cell--checkbox\',\n  HEADER_CELL_NUMERIC: \'mdc-data-table__header-cell--numeric\',\n  HEADER_CELL_WITH_SORT: \'mdc-data-table__header-cell--with-sort\',\n  HEADER_CELL_SORTED: \'mdc-data-table__header-cell--sorted\',\n  HEADER_CELL_SORTED_DESC: \'mdc-data-table__header-cell--sorted-descending\',\n  HEADER_CELL_WRAPPER: \'mdc-data-table__header-cell-wrapper\',\n  HEADER_CELL_LABEL: \'mdc-data-table__header-cell-label\',\n  CONTENT: \'mdc-data-table__content\',\n  ROW: \'mdc-data-table__row\',\n  ROW_CHECKBOX: \'mdc-data-table__row-checkbox\',\n  ROW_SELECTED: \'mdc-data-table__row--selected\',\n  CELL: \'mdc-data-table__cell\',\n  CELL_CHECKBOX: \'mdc-data-table__cell--checkbox\',\n  CELL_NUMERIC: \'mdc-data-table__cell--numeric\',\n  PAGINATION: \'mdc-data-table__pagination\',\n  PAGINATION_TRAILING: \'mdc-data-table__pagination-trailing\',\n  PAGINATION_ROWS_PER_PAGE: \'mdc-data-table__pagination-rows-per-page\',\n  PAGINATION_ROWS_PER_PAGE_LABEL: \'mdc-data-table__pagination-rows-per-page-label\',\n  PAGINATION_ROWS_PER_PAGE_SELECT: \'mdc-data-table__pagination-rows-per-page-select\',\n  PAGINATION_NAVIGATION: \'mdc-data-table__pagination-navigation\',\n  PAGINATION_TOTAL: \'mdc-data-table__pagination-total\',\n  PAGINATION_BUTTON: \'mdc-data-table__pagination-button\',\n  SORT_ICON_BUTTON: \'mdc-data-table__sort-icon-button\',\n  SORT_STATUS_LABEL: \'mdc-data-table__sort-status-label\',\n  PROGRESS_INDICATOR: \'mdc-data-table__progress-indicator\',\n  SCRIM: \'mdc-data-table__scrim\',\n  FOOTER: \'mdc-data-table__footer\',\n  LINEAR_PROGRESS: \'mdc-data-table__linear-progress\'\n};\n;// CONCATENATED MODULE: ./src/data-table/DataTableProgressIndicator.jsx\nfunction DataTableProgressIndicator_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableProgressIndicator_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableProgressIndicator_ownKeys(Object(source), true).forEach(function (key) { DataTableProgressIndicator_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableProgressIndicator_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableProgressIndicator_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar DataTableProgressIndicator = /*#__PURE__*/(0,react.forwardRef)(function (props, ref) {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", DataTableProgressIndicator_objectSpread(DataTableProgressIndicator_objectSpread({\n    ref: ref,\n    className: data_table_constants_cssClasses.PROGRESS_INDICATOR\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: data_table_constants_cssClasses.SCRIM\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(linear_progress_LinearProgress, {\n      className: data_table_constants_cssClasses.LINEAR_PROGRESS,\n      indeterminate: true\n    })]\n  }));\n});\nDataTableProgressIndicator.displayName = \'MDCDataTableProgressIndicator\';\n/* harmony default export */ const data_table_DataTableProgressIndicator = (DataTableProgressIndicator);\n;// CONCATENATED MODULE: ./src/floating-label/constants.js\nvar floating_label_constants_cssClasses = {\n  ROOT: \'mdc-floating-label\',\n  FLOAT: \'mdc-floating-label--float-above\',\n  REQUIRED: \'mdc-floating-label--required\'\n};\n;// CONCATENATED MODULE: ./src/floating-label/FloatingLabel.jsx\nvar FloatingLabel_excluded = ["label", "float", "required", "className", "children"];\n\nfunction FloatingLabel_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction FloatingLabel_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FloatingLabel_ownKeys(Object(source), true).forEach(function (key) { FloatingLabel_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FloatingLabel_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction FloatingLabel_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction FloatingLabel_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = FloatingLabel_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction FloatingLabel_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar FloatingLabel = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var label = _ref.label,\n      _ref$float = _ref["float"],\n      _float = _ref$float === void 0 ? false : _ref$float,\n      _ref$required = _ref.required,\n      required = _ref$required === void 0 ? false : _ref$required,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? label : _ref$children,\n      props = FloatingLabel_objectWithoutProperties(_ref, FloatingLabel_excluded);\n\n  var classNames = classnames_default()(floating_label_constants_cssClasses.ROOT, (_classnames = {}, FloatingLabel_defineProperty(_classnames, floating_label_constants_cssClasses.FLOAT, _float), FloatingLabel_defineProperty(_classnames, floating_label_constants_cssClasses.REQUIRED, required), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("span", FloatingLabel_objectSpread(FloatingLabel_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: children\n  }));\n});\nFloatingLabel.displayName = \'MDCFloatingLabel\';\nFloatingLabel.propTypes = {\n  label: (prop_types_default()).string,\n  "float": (prop_types_default()).bool,\n  required: (prop_types_default()).bool\n};\n/* harmony default export */ const floating_label_FloatingLabel = (FloatingLabel);\n;// CONCATENATED MODULE: ./src/floating-label/index.js\n\n;// CONCATENATED MODULE: ./src/line-ripple/constants.js\nvar line_ripple_constants_cssClasses = {\n  ROOT: \'mdc-line-ripple\',\n  ACTIVE: \'mdc-line-ripple--active\',\n  DEACTIVATING: \'mdc-line-ripple--deactivating\'\n};\n;// CONCATENATED MODULE: ./src/line-ripple/LineRipple.jsx\nvar LineRipple_excluded = ["active", "transformOrigin"];\n\nfunction LineRipple_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction LineRipple_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LineRipple_ownKeys(Object(source), true).forEach(function (key) { LineRipple_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LineRipple_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction LineRipple_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction LineRipple_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = LineRipple_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction LineRipple_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar LineRipple = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$active = _ref.active,\n      active = _ref$active === void 0 ? false : _ref$active,\n      transformOrigin = _ref.transformOrigin,\n      props = LineRipple_objectWithoutProperties(_ref, LineRipple_excluded);\n\n  var style = transformOrigin && {\n    transformOrigin: "".concat(transformOrigin, "px")\n  };\n  var classNames = classnames_default()(line_ripple_constants_cssClasses.ROOT, LineRipple_defineProperty({}, line_ripple_constants_cssClasses.ACTIVE, active));\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("span", LineRipple_objectSpread({\n    ref: ref,\n    style: style,\n    className: classNames\n  }, props));\n});\nLineRipple.displayName = \'MDCLineRipple\';\nLineRipple.propTypes = {\n  active: (prop_types_default()).bool\n};\n/* harmony default export */ const line_ripple_LineRipple = (LineRipple);\n;// CONCATENATED MODULE: ./src/line-ripple/index.js\n\n;// CONCATENATED MODULE: ./src/constants.js\nvar Key = {\n  ARROW_LEFT: \'ArrowLeft\',\n  ARROW_UP: \'ArrowUp\',\n  ARROW_RIGHT: \'ArrowRight\',\n  ARROW_DOWN: \'ArrowDown\',\n  HOME: \'Home\',\n  END: \'End\',\n  PAGE_UP: \'PageUp\',\n  PAGE_DOWN: \'PageDown\'\n};\nvar KeyCode = {\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  ARROW_LEFT: 37,\n  ARROW_UP: 38,\n  ARROW_RIGHT: 39,\n  ARROW_DOWN: 40\n};\n;// CONCATENATED MODULE: ./src/utils.js\n\nfunction getClientWidth(element) {\n  if (element.offsetParent !== null) {\n    return element.clientWidth;\n  }\n\n  var clone = element.cloneNode(true);\n  clone.style.setProperty(\'position\', \'absolute\');\n  clone.style.setProperty(\'transform\', \'translate(-9999px, -9999px)\');\n  document.documentElement.appendChild(clone);\n  var clientWidth = clone.clientWidth;\n  document.documentElement.removeChild(clone);\n  return clientWidth;\n}\nfunction getClientHeight(element) {\n  if (element.offsetParent !== null) {\n    return element.clientHeight;\n  }\n\n  var clone = element.cloneNode(true);\n  clone.style.setProperty(\'position\', \'absolute\');\n  clone.style.setProperty(\'transform\', \'translate(-9999px, -9999px)\');\n  document.documentElement.appendChild(clone);\n  var clientHeight = clone.clientHeight;\n  document.documentElement.removeChild(clone);\n  return clientHeight;\n}\nfunction getEventKey(event) {\n  switch (event.key || event.keyCode) {\n    case Key.ARROW_LEFT:\n    case KeyCode.ARROW_LEFT:\n      return Key.ARROW_LEFT;\n\n    case Key.ARROW_UP:\n    case KeyCode.ARROW_UP:\n      return Key.ARROW_UP;\n\n    case Key.ARROW_RIGHT:\n    case KeyCode.ARROW_RIGHT:\n      return Key.ARROW_RIGHT;\n\n    case Key.ARROW_DOWN:\n    case KeyCode.ARROW_DOWN:\n      return Key.ARROW_DOWN;\n\n    case Key.HOME:\n    case KeyCode.HOME:\n      return Key.HOME;\n\n    case Key.END:\n    case KeyCode.END:\n      return Key.END;\n\n    case Key.PAGE_UP:\n    case KeyCode.PAGE_UP:\n      return Key.PAGE_UP;\n\n    case Key.PAGE_DOWN:\n    case KeyCode.PAGE_DOWN:\n      return Key.PAGE_DOWN;\n\n    default:\n      return undefined;\n  }\n}\nfunction getPageX(event) {\n  var _event$targetTouches;\n\n  if (((_event$targetTouches = event.targetTouches) === null || _event$targetTouches === void 0 ? void 0 : _event$targetTouches.length) > 0) {\n    return event.targetTouches[0].pageX;\n  }\n\n  return event.pageX;\n}\nfunction getPageY(event) {\n  var _event$targetTouches2;\n\n  if (((_event$targetTouches2 = event.targetTouches) === null || _event$targetTouches2 === void 0 ? void 0 : _event$targetTouches2.length) > 0) {\n    return event.targetTouches[0].pageY;\n  }\n\n  return event.pageY;\n}\n;// CONCATENATED MODULE: ./src/notched-outline/constants.js\nvar notched_outline_constants_numbers = {\n  NOTCH_SIZE_FACTOR: 0.75,\n  NOTCH_PADDING_RIGHT: 8\n};\nvar notched_outline_constants_cssClasses = {\n  ROOT: \'mdc-notched-outline\',\n  NOTCHED: \'mdc-notched-outline--notched\',\n  UPGRADED: \'mdc-notched-outline--upgraded\',\n  NO_LABEL: \'mdc-notched-outline--no-label\',\n  LEADING: \'mdc-notched-outline__leading\',\n  NOTCH: \'mdc-notched-outline__notch\',\n  TRAILING: \'mdc-notched-outline__trailing\'\n};\n;// CONCATENATED MODULE: ./src/notched-outline/NotchedOutline.jsx\nvar NotchedOutline_excluded = ["notched", "className", "children"];\n\nfunction NotchedOutline_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction NotchedOutline_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { NotchedOutline_ownKeys(Object(source), true).forEach(function (key) { NotchedOutline_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { NotchedOutline_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction NotchedOutline_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction NotchedOutline_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = NotchedOutline_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction NotchedOutline_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar NotchedOutline = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$notched = _ref.notched,\n      notched = _ref$notched === void 0 ? false : _ref$notched,\n      className = _ref.className,\n      children = _ref.children,\n      props = NotchedOutline_objectWithoutProperties(_ref, NotchedOutline_excluded);\n\n  var notchRef = (0,react.useRef)();\n  (0,react.useLayoutEffect)(function () {\n    var notch = notchRef.current;\n    var floatingLabel = notch === null || notch === void 0 ? void 0 : notch.firstChild;\n    if (!notch || !floatingLabel) return;\n    var width = getClientWidth(floatingLabel);\n\n    if (notched) {\n      notchRef.current.style.width = "".concat(width * notched_outline_constants_numbers.NOTCH_SIZE_FACTOR + notched_outline_constants_numbers.NOTCH_PADDING_RIGHT, "px");\n    } else {\n      notchRef.current.style.width = \'auto\';\n    }\n  }, [notched]);\n  var classNames = classnames_default()(notched_outline_constants_cssClasses.ROOT, notched_outline_constants_cssClasses.UPGRADED, (_classnames = {}, NotchedOutline_defineProperty(_classnames, notched_outline_constants_cssClasses.NOTCHED, notched), NotchedOutline_defineProperty(_classnames, notched_outline_constants_cssClasses.NO_LABEL, !children), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("span", NotchedOutline_objectSpread(NotchedOutline_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: notched_outline_constants_cssClasses.LEADING\n    }), children && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      ref: notchRef,\n      className: notched_outline_constants_cssClasses.NOTCH,\n      children: children\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: notched_outline_constants_cssClasses.TRAILING\n    })]\n  }));\n});\nNotchedOutline.displayName = \'MDCNotchedOutline\';\nNotchedOutline.propTypes = {\n  notched: (prop_types_default()).bool\n};\n/* harmony default export */ const notched_outline_NotchedOutline = (NotchedOutline);\n;// CONCATENATED MODULE: ./src/notched-outline/index.js\n\n;// CONCATENATED MODULE: ./src/menu/constants.js\nvar menu_constants_numbers = {\n  TRANSITION_OPEN_DURATION: 120,\n  TRANSITION_CLOSE_DURATION: 75,\n  MARGIN_TO_EDGE: 32,\n  ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,\n  TOUCH_EVENT_WAIT_MS: 30\n};\nvar menu_constants_cssClasses = {\n  ROOT: \'mdc-menu\',\n  SURFACE: \'mdc-menu-surface\',\n  SURFACE_ANCHOR: \'mdc-menu-surface--anchor\',\n  SURFACE_FIXED: \'mdc-menu-surface--fixed\',\n  SURFACE_OPEN: \'mdc-menu-surface--open\',\n  SURFACE_ANIMATING_OPEN: \'mdc-menu-surface--animating-open\',\n  SURFACE_ANIMATING_CLOSED: \'mdc-menu-surface--animating-closed\',\n  SURFACE_BELOW_ANCHOR: \'mdc-menu-surface--is-open-below\',\n  ITEM: \'mdc-menu-item\',\n  ITEM_SELECTED: \'mdc-menu-item--selected\',\n  SELECTION_GROUP: \'mdc-menu__selection-group\',\n  SELECTION_GROUP_ICON: \'mdc-menu__selection-group-icon\'\n};\nvar Origin = {\n  TOP_LEFT: \'top left\',\n  TOP_CENTER: \'top center\',\n  TOP_RIGHT: \'top right\',\n  CENTER_LEFT: \'center left\',\n  CENTER: \'center center\',\n  CENTER_RIGHT: \'center right\',\n  BOTTOM_LEFT: \'bottom left\',\n  BOTTOM_CENTER: \'bottom center\',\n  BOTTOM_RIGHT: \'bottom right\'\n};\n;// CONCATENATED MODULE: ./src/hooks.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\nfunction useCreated(fn) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      created = _useState2[0],\n      setCreated = _useState2[1];\n\n  if (created) return;\n  fn();\n  setCreated(true);\n}\nfunction useMounted(fn) {\n  (0,react.useEffect)(function () {\n    return fn();\n  }, []);\n}\nfunction useUpdated(fn, deps) {\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mounted = _useState4[0],\n      setMounted = _useState4[1];\n\n  (0,react.useEffect)(function () {\n    if (!mounted) return setMounted(true);\n    return fn();\n  }, deps);\n}\nfunction useUpdatedSync(fn, deps) {\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mounted = _useState6[0],\n      setMounted = _useState6[1];\n\n  (0,react.useLayoutEffect)(function () {\n    if (!mounted) return setMounted(true);\n    return fn();\n  }, deps);\n}\nfunction useUnmounted(fn) {\n  (0,react.useEffect)(function () {\n    return function () {\n      return fn();\n    };\n  }, []);\n}\n;// CONCATENATED MODULE: ./src/list/constants.js\nvar listCssClasses = {\n  ROOT: \'mdc-list\'\n};\nvar listItemCssClasses = {\n  ROOT: \'mdc-list-item\',\n  ACTIVATED: \'mdc-list-item--activated\',\n  SELECTED: \'mdc-list-item--selected\',\n  DISABLED: \'mdc-list-item--disabled\',\n  NON_INTERACTIVE: \'mdc-list-item--non-interactive\',\n  ONE_LINE: \'mdc-list-item--with-one-line\',\n  TWO_LINES: \'mdc-list-item--with-two-lines\',\n  THREE_LINES: \'mdc-list-item--with-three-lines\',\n  OVERLINE: \'mdc-list-item--with-overline\',\n  LEADING_ICON: \'mdc-list-item--with-leading-icon\',\n  LEADING_IMAGE: \'mdc-list-item--with-leading-image\',\n  LEADING_AVATAR: \'mdc-list-item--with-leading-avatar\',\n  LEADING_THUMBNAIL: \'mdc-list-item--with-leading-thumbnail\',\n  LEADING_VIDEO: \'mdc-list-item--with-leading-video\',\n  LEADING_CHECKBOX: \'mdc-list-item--with-leading-checkbox\',\n  LEADING_RADIO: \'mdc-list-item--with-leading-radio\',\n  LEADING_SWITCH: \'mdc-list-item--with-leading-switch\',\n  TRAILING_ICON: \'mdc-list-item--with-trailing-icon\',\n  TRAILING_META: \'mdc-list-item--with-trailing-meta\',\n  TRAILING_CHECKBOX: \'mdc-list-item--with-trailing-checkbox\',\n  TRAILING_RADIO: \'mdc-list-item--with-trailing-radio\',\n  TRAILING_SWITCH: \'mdc-list-item--with-trailing-switch\',\n  START: \'mdc-list-item__start\',\n  CONTENT: \'mdc-list-item__content\',\n  END: \'mdc-list-item__end\',\n  OVERLINE_TEXT: \'mdc-list-item__overline-text\',\n  PRIMARY_TEXT: \'mdc-list-item__primary-text\',\n  SECONDARY_TEXT: \'mdc-list-item__secondary-text\',\n  RIPPLE: \'mdc-list-item__ripple\'\n};\nvar listGroupCssClasses = {\n  ROOT: \'mdc-list-group\',\n  SUBHEADER: \'mdc-list-group__subheader\'\n};\nvar listDividerCssClasses = {\n  ROOT: \'mdc-list-divider\',\n  LEADING_TEXT: \'mdc-list-divider--with-leading-text\',\n  LEADING_ICON: \'mdc-list-divider--with-leading-icon\',\n  LEADING_IMAGE: \'mdc-list-divider--with-leading-image\',\n  LEADING_VIDEO: \'mdc-list-divider--with-leading-video\',\n  LEADING_THUMBNAIL: \'mdc-list-divider--with-leading-thumbnail\',\n  LEADING_AVATAR: \'mdc-list-divider--with-leading-avatar\',\n  LEADING_CHECKBOX: \'mdc-list-divider--with-leading-checkbox\',\n  LEADING_SWITCH: \'mdc-list-divider--with-leading-switch\',\n  LEADING_RADIO: \'mdc-list-divider--with-leading-radio\'\n};\n;// CONCATENATED MODULE: ./src/list/ListItemContent.jsx\nvar ListItemContent_excluded = ["overline", "primary", "secondary", "overlineText", "primaryText", "secondaryText", "element", "component", "className", "children"];\n\nfunction ListItemContent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ListItemContent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ListItemContent_ownKeys(Object(source), true).forEach(function (key) { ListItemContent_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ListItemContent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ListItemContent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ListItemContent_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ListItemContent_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ListItemContent_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar ListItemContent = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var overline = _ref.overline,\n      primary = _ref.primary,\n      secondary = _ref.secondary,\n      _ref$overlineText = _ref.overlineText,\n      overlineText = _ref$overlineText === void 0 ? overline : _ref$overlineText,\n      _ref$primaryText = _ref.primaryText,\n      primaryText = _ref$primaryText === void 0 ? primary : _ref$primaryText,\n      _ref$secondaryText = _ref.secondaryText,\n      secondaryText = _ref$secondaryText === void 0 ? secondary : _ref$secondaryText,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'span\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = ListItemContent_objectWithoutProperties(_ref, ListItemContent_excluded);\n\n  var classNames = classnames_default()(listItemCssClasses.CONTENT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, ListItemContent_objectSpread(ListItemContent_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [overlineText && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: overlineText,\n      fallback: "span",\n      className: listItemCssClasses.OVERLINE_TEXT\n    }), primaryText && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: primaryText,\n      fallback: "span",\n      className: listItemCssClasses.PRIMARY_TEXT\n    }), secondaryText && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: secondaryText,\n      fallback: "span",\n      className: listItemCssClasses.SECONDARY_TEXT\n    }), children]\n  }));\n});\nListItemContent.displayName = \'MDCListItemContent\';\nListItemContent.propTypes = {\n  overlineText: (prop_types_default()).node,\n  primaryText: (prop_types_default()).node,\n  secondaryText: (prop_types_default()).node\n};\n/* harmony default export */ const list_ListItemContent = (ListItemContent);\n;// CONCATENATED MODULE: ./src/list/ListItemEnd.jsx\nvar ListItemEnd_excluded = ["element", "component", "className"];\n\nfunction ListItemEnd_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ListItemEnd_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ListItemEnd_ownKeys(Object(source), true).forEach(function (key) { ListItemEnd_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ListItemEnd_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ListItemEnd_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ListItemEnd_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ListItemEnd_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ListItemEnd_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar ListItemEnd = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'span\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = ListItemEnd_objectWithoutProperties(_ref, ListItemEnd_excluded);\n\n  var classNames = classnames_default()(listItemCssClasses.END, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, ListItemEnd_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nListItemEnd.displayName = \'MDCListItemEnd\';\n/* harmony default export */ const list_ListItemEnd = (ListItemEnd);\n;// CONCATENATED MODULE: ./src/list/ListItemStart.jsx\nvar ListItemStart_excluded = ["element", "component", "className"];\n\nfunction ListItemStart_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ListItemStart_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ListItemStart_ownKeys(Object(source), true).forEach(function (key) { ListItemStart_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ListItemStart_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ListItemStart_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ListItemStart_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ListItemStart_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ListItemStart_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar ListItemStart = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'span\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = ListItemStart_objectWithoutProperties(_ref, ListItemStart_excluded);\n\n  var classNames = classnames_default()(listItemCssClasses.START, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, ListItemStart_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nListItemStart.displayName = \'MDCListItemStart\';\n/* harmony default export */ const list_ListItemStart = (ListItemStart);\n;// CONCATENATED MODULE: ./src/list/ListItem.jsx\nvar ListItem_excluded = ["start", "content", "end", "text", "overlineText", "primaryText", "secondaryText", "icon", "image", "avatar", "thumbnail", "video", "leadingIcon", "leadingImage", "leadingAvatar", "leadingThumbnail", "leadingVideo", "leadingCheckbox", "leadingRadio", "leadingSwitch", "meta", "trailingMeta", "trailingIcon", "trailingCheckbox", "trailingRadio", "trailingSwitch", "activated", "selected", "disabled", "nonInteractive", "oneLine", "twoLines", "threeLines", "withLeadingIcon", "withLeadingImage", "withLeadingAvatar", "withLeadingThumbnail", "withLeadingVideo", "withLeadingCheckbox", "withLeadingRadio", "withLeadingSwitch", "withTrailingMeta", "withTrailingIcon", "withTrailingCheckbox", "withTrailingRadio", "withTrailingSwitch", "element", "component", "className", "children"];\n\nfunction ListItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ListItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ListItem_ownKeys(Object(source), true).forEach(function (key) { ListItem_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ListItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ListItem_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ListItem_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ListItem_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ListItem_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar ListItem = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var start = _ref.start,\n      content = _ref.content,\n      end = _ref.end,\n      text = _ref.text,\n      overlineText = _ref.overlineText,\n      _ref$primaryText = _ref.primaryText,\n      primaryText = _ref$primaryText === void 0 ? text : _ref$primaryText,\n      secondaryText = _ref.secondaryText,\n      icon = _ref.icon,\n      image = _ref.image,\n      avatar = _ref.avatar,\n      thumbnail = _ref.thumbnail,\n      video = _ref.video,\n      _ref$leadingIcon = _ref.leadingIcon,\n      leadingIcon = _ref$leadingIcon === void 0 ? icon : _ref$leadingIcon,\n      _ref$leadingImage = _ref.leadingImage,\n      leadingImage = _ref$leadingImage === void 0 ? image : _ref$leadingImage,\n      _ref$leadingAvatar = _ref.leadingAvatar,\n      leadingAvatar = _ref$leadingAvatar === void 0 ? avatar : _ref$leadingAvatar,\n      _ref$leadingThumbnail = _ref.leadingThumbnail,\n      leadingThumbnail = _ref$leadingThumbnail === void 0 ? thumbnail : _ref$leadingThumbnail,\n      _ref$leadingVideo = _ref.leadingVideo,\n      leadingVideo = _ref$leadingVideo === void 0 ? video : _ref$leadingVideo,\n      leadingCheckbox = _ref.leadingCheckbox,\n      leadingRadio = _ref.leadingRadio,\n      leadingSwitch = _ref.leadingSwitch,\n      meta = _ref.meta,\n      _ref$trailingMeta = _ref.trailingMeta,\n      trailingMeta = _ref$trailingMeta === void 0 ? meta : _ref$trailingMeta,\n      trailingIcon = _ref.trailingIcon,\n      trailingCheckbox = _ref.trailingCheckbox,\n      trailingRadio = _ref.trailingRadio,\n      trailingSwitch = _ref.trailingSwitch,\n      _ref$activated = _ref.activated,\n      activated = _ref$activated === void 0 ? false : _ref$activated,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$nonInteractive = _ref.nonInteractive,\n      nonInteractive = _ref$nonInteractive === void 0 ? false : _ref$nonInteractive,\n      _ref$oneLine = _ref.oneLine,\n      oneLine = _ref$oneLine === void 0 ? false : _ref$oneLine,\n      _ref$twoLines = _ref.twoLines,\n      twoLines = _ref$twoLines === void 0 ? false : _ref$twoLines,\n      _ref$threeLines = _ref.threeLines,\n      threeLines = _ref$threeLines === void 0 ? false : _ref$threeLines,\n      _ref$withLeadingIcon = _ref.withLeadingIcon,\n      withLeadingIcon = _ref$withLeadingIcon === void 0 ? Boolean(leadingIcon) : _ref$withLeadingIcon,\n      _ref$withLeadingImage = _ref.withLeadingImage,\n      withLeadingImage = _ref$withLeadingImage === void 0 ? Boolean(leadingImage) : _ref$withLeadingImage,\n      _ref$withLeadingAvata = _ref.withLeadingAvatar,\n      withLeadingAvatar = _ref$withLeadingAvata === void 0 ? Boolean(leadingAvatar) : _ref$withLeadingAvata,\n      _ref$withLeadingThumb = _ref.withLeadingThumbnail,\n      withLeadingThumbnail = _ref$withLeadingThumb === void 0 ? Boolean(leadingThumbnail) : _ref$withLeadingThumb,\n      _ref$withLeadingVideo = _ref.withLeadingVideo,\n      withLeadingVideo = _ref$withLeadingVideo === void 0 ? Boolean(leadingVideo) : _ref$withLeadingVideo,\n      _ref$withLeadingCheck = _ref.withLeadingCheckbox,\n      withLeadingCheckbox = _ref$withLeadingCheck === void 0 ? Boolean(leadingCheckbox) : _ref$withLeadingCheck,\n      _ref$withLeadingRadio = _ref.withLeadingRadio,\n      withLeadingRadio = _ref$withLeadingRadio === void 0 ? Boolean(leadingRadio) : _ref$withLeadingRadio,\n      _ref$withLeadingSwitc = _ref.withLeadingSwitch,\n      withLeadingSwitch = _ref$withLeadingSwitc === void 0 ? Boolean(leadingSwitch) : _ref$withLeadingSwitc,\n      _ref$withTrailingMeta = _ref.withTrailingMeta,\n      withTrailingMeta = _ref$withTrailingMeta === void 0 ? Boolean(trailingMeta) : _ref$withTrailingMeta,\n      _ref$withTrailingIcon = _ref.withTrailingIcon,\n      withTrailingIcon = _ref$withTrailingIcon === void 0 ? Boolean(trailingIcon) : _ref$withTrailingIcon,\n      _ref$withTrailingChec = _ref.withTrailingCheckbox,\n      withTrailingCheckbox = _ref$withTrailingChec === void 0 ? Boolean(trailingCheckbox) : _ref$withTrailingChec,\n      _ref$withTrailingRadi = _ref.withTrailingRadio,\n      withTrailingRadio = _ref$withTrailingRadi === void 0 ? Boolean(trailingRadio) : _ref$withTrailingRadi,\n      _ref$withTrailingSwit = _ref.withTrailingSwitch,\n      withTrailingSwitch = _ref$withTrailingSwit === void 0 ? Boolean(trailingSwitch) : _ref$withTrailingSwit,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'li\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = ListItem_objectWithoutProperties(_ref, ListItem_excluded);\n\n  var lines = Boolean(overlineText) + Boolean(primaryText) + Boolean(secondaryText);\n  var hasStart = Boolean(start || leadingIcon || leadingImage || leadingAvatar || leadingThumbnail || leadingVideo || leadingCheckbox || leadingRadio || leadingSwitch);\n  var hasContent = Boolean(content || overlineText || primaryText || secondaryText);\n  var hasEnd = Boolean(end || trailingMeta || trailingIcon || trailingCheckbox || trailingRadio || trailingSwitch);\n  var classNames = classnames_default()(listItemCssClasses.ROOT, (_classnames = {}, ListItem_defineProperty(_classnames, listItemCssClasses.ACTIVATED, activated), ListItem_defineProperty(_classnames, listItemCssClasses.SELECTED, selected), ListItem_defineProperty(_classnames, listItemCssClasses.DISABLED, disabled), ListItem_defineProperty(_classnames, listItemCssClasses.ONE_LINE, oneLine || lines === 1), ListItem_defineProperty(_classnames, listItemCssClasses.TWO_LINES, twoLines || lines === 2), ListItem_defineProperty(_classnames, listItemCssClasses.THREE_LINES, threeLines || lines === 3), ListItem_defineProperty(_classnames, listItemCssClasses.NON_INTERACTIVE, nonInteractive), ListItem_defineProperty(_classnames, listItemCssClasses.OVERLINE, overlineText), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_ICON, withLeadingIcon), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_IMAGE, withLeadingImage), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_AVATAR, withLeadingAvatar), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_THUMBNAIL, withLeadingThumbnail), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_VIDEO, withLeadingVideo), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_CHECKBOX, withLeadingCheckbox), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_RADIO, withLeadingRadio), ListItem_defineProperty(_classnames, listItemCssClasses.LEADING_SWITCH, withLeadingSwitch), ListItem_defineProperty(_classnames, listItemCssClasses.TRAILING_ICON, withTrailingIcon), ListItem_defineProperty(_classnames, listItemCssClasses.TRAILING_META, withTrailingMeta), ListItem_defineProperty(_classnames, listItemCssClasses.TRAILING_CHECKBOX, withTrailingCheckbox), ListItem_defineProperty(_classnames, listItemCssClasses.TRAILING_RADIO, withTrailingRadio), ListItem_defineProperty(_classnames, listItemCssClasses.TRAILING_SWITCH, withTrailingSwitch), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, ListItem_objectSpread(ListItem_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: listItemCssClasses.RIPPLE\n    }), hasStart && /*#__PURE__*/(0,jsx_runtime.jsxs)(list_ListItemStart, {\n      children: [start, leadingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: leadingIcon,\n        fallback: icon_Icon\n      }), leadingImage, leadingAvatar, leadingThumbnail, leadingVideo, leadingCheckbox, leadingRadio, leadingSwitch]\n    }), hasContent && /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItemContent, {\n      overlineText: overlineText,\n      primaryText: primaryText,\n      secondaryText: secondaryText,\n      children: content\n    }), hasEnd && /*#__PURE__*/(0,jsx_runtime.jsxs)(list_ListItemEnd, {\n      children: [end, trailingMeta, trailingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: trailingIcon,\n        fallback: icon_Icon\n      }), trailingCheckbox, trailingRadio, trailingSwitch]\n    }), children]\n  }));\n});\nListItem.displayName = \'MDCListItem\';\nListItem.propTypes = {\n  start: (prop_types_default()).node,\n  content: (prop_types_default()).node,\n  end: (prop_types_default()).node,\n  text: (prop_types_default()).node,\n  overlineText: (prop_types_default()).node,\n  primaryText: (prop_types_default()).node,\n  secondaryText: (prop_types_default()).node,\n  icon: (prop_types_default()).node,\n  image: (prop_types_default()).element,\n  avatar: (prop_types_default()).element,\n  thumbnail: (prop_types_default()).element,\n  video: (prop_types_default()).element,\n  leadingIcon: (prop_types_default()).node,\n  leadingImage: (prop_types_default()).element,\n  leadingAvatar: (prop_types_default()).element,\n  leadingThumbnail: (prop_types_default()).element,\n  leadingVideo: (prop_types_default()).element,\n  leadingCheckbox: (prop_types_default()).element,\n  leadingRadio: (prop_types_default()).element,\n  leadingSwitch: (prop_types_default()).element,\n  meta: (prop_types_default()).node,\n  trailingMeta: (prop_types_default()).node,\n  trailingIcon: (prop_types_default()).node,\n  trailingCheckbox: (prop_types_default()).element,\n  trailingRadio: (prop_types_default()).element,\n  trailingSwitch: (prop_types_default()).element,\n  activated: (prop_types_default()).bool,\n  selected: (prop_types_default()).bool,\n  disabled: (prop_types_default()).bool,\n  nonInteractive: (prop_types_default()).bool,\n  withLeadingIcon: (prop_types_default()).bool,\n  withLeadingImage: (prop_types_default()).bool,\n  withLeadingAvatar: (prop_types_default()).bool,\n  withLeadingThumbnail: (prop_types_default()).bool,\n  withLeadingVideo: (prop_types_default()).bool,\n  withLeadingCheckbox: (prop_types_default()).bool,\n  withLeadingRadio: (prop_types_default()).bool,\n  withLeadingSwitch: (prop_types_default()).bool,\n  withTrailingMeta: (prop_types_default()).bool,\n  withTrailingIcon: (prop_types_default()).bool,\n  withTrailingCheckbox: (prop_types_default()).bool,\n  withTrailingRadio: (prop_types_default()).bool,\n  withTrailingSwitch: (prop_types_default()).bool\n};\n/* harmony default export */ const list_ListItem = (ListItem);\n;// CONCATENATED MODULE: ./src/list/List.jsx\nvar List_excluded = ["items", "element", "className", "children"];\n\nfunction List_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction List_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { List_ownKeys(Object(source), true).forEach(function (key) { List_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { List_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction List_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction List_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = List_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction List_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar List = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var items = _ref.items,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'ul\' : _ref$element,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? items === null || items === void 0 ? void 0 : items.map(function (item) {\n    return (0,react.createElement)(list_ListItem, item);\n  }) : _ref$children,\n      props = List_objectWithoutProperties(_ref, List_excluded);\n\n  var classNames = classnames_default()(listCssClasses.ROOT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, List_objectSpread(List_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: children\n  }));\n});\nList.displayName = \'MDCList\';\nlist_ListItem.propTypes = {\n  items: (prop_types_default()).array\n};\n/* harmony default export */ const list_List = (List);\n;// CONCATENATED MODULE: ./src/list/ListDivider.jsx\nvar ListDivider_excluded = ["withLeadingText", "withLeadingIcon", "withLeadingImage", "withLeadingThumbnail", "withLeadingVideo", "withLeadingCheckbox", "withLeadingRadio", "withLeadingSwitch", "element", "className"];\n\nfunction ListDivider_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ListDivider_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ListDivider_ownKeys(Object(source), true).forEach(function (key) { ListDivider_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ListDivider_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ListDivider_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ListDivider_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ListDivider_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ListDivider_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar ListDivider = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$withLeadingText = _ref.withLeadingText,\n      withLeadingText = _ref$withLeadingText === void 0 ? false : _ref$withLeadingText,\n      _ref$withLeadingIcon = _ref.withLeadingIcon,\n      withLeadingIcon = _ref$withLeadingIcon === void 0 ? false : _ref$withLeadingIcon,\n      _ref$withLeadingImage = _ref.withLeadingImage,\n      withLeadingImage = _ref$withLeadingImage === void 0 ? false : _ref$withLeadingImage,\n      _ref$withLeadingThumb = _ref.withLeadingThumbnail,\n      withLeadingThumbnail = _ref$withLeadingThumb === void 0 ? false : _ref$withLeadingThumb,\n      _ref$withLeadingVideo = _ref.withLeadingVideo,\n      withLeadingVideo = _ref$withLeadingVideo === void 0 ? false : _ref$withLeadingVideo,\n      _ref$withLeadingCheck = _ref.withLeadingCheckbox,\n      withLeadingCheckbox = _ref$withLeadingCheck === void 0 ? false : _ref$withLeadingCheck,\n      _ref$withLeadingRadio = _ref.withLeadingRadio,\n      withLeadingRadio = _ref$withLeadingRadio === void 0 ? false : _ref$withLeadingRadio,\n      _ref$withLeadingSwitc = _ref.withLeadingSwitch,\n      withLeadingSwitch = _ref$withLeadingSwitc === void 0 ? false : _ref$withLeadingSwitc,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'li\' : _ref$element,\n      className = _ref.className,\n      props = ListDivider_objectWithoutProperties(_ref, ListDivider_excluded);\n\n  var classNames = classnames_default()(listDividerCssClasses.ROOT, (_classnames = {}, ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_TEXT, withLeadingText), ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_ICON, withLeadingIcon), ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_IMAGE, withLeadingImage), ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_THUMBNAIL, withLeadingThumbnail), ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_VIDEO, withLeadingVideo), ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_CHECKBOX, withLeadingCheckbox), ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_RADIO, withLeadingRadio), ListDivider_defineProperty(_classnames, listDividerCssClasses.LEADING_SWITCH, withLeadingSwitch), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, ListDivider_objectSpread({\n    ref: ref,\n    className: classNames,\n    role: Element === \'li\' ? \'separator\' : undefined\n  }, props));\n});\nListDivider.displayName = \'MDCListDivider\';\nListDivider.propTypes = {\n  withLeadingText: (prop_types_default()).bool,\n  withLeadingIcon: (prop_types_default()).bool,\n  withLeadingImage: (prop_types_default()).bool,\n  withLeadingThumbnail: (prop_types_default()).bool,\n  withLeadingVideo: (prop_types_default()).bool,\n  withLeadingAvatar: (prop_types_default()).bool,\n  withLeadingCheckbox: (prop_types_default()).bool,\n  withLeadingSwitch: (prop_types_default()).bool,\n  withLeadingRadio: (prop_types_default()).bool\n};\n/* harmony default export */ const list_ListDivider = (ListDivider);\n;// CONCATENATED MODULE: ./src/list/ListGroup.jsx\nvar ListGroup_excluded = ["element", "className"];\n\nfunction ListGroup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ListGroup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ListGroup_ownKeys(Object(source), true).forEach(function (key) { ListGroup_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ListGroup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ListGroup_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ListGroup_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ListGroup_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ListGroup_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar ListGroup = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      props = ListGroup_objectWithoutProperties(_ref, ListGroup_excluded);\n\n  var classNames = classnames_default()(listGroupCssClasses.ROOT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, ListGroup_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nListGroup.displayName = \'MDCListGroup\';\n/* harmony default export */ const list_ListGroup = (ListGroup);\n;// CONCATENATED MODULE: ./src/list/ListGroupSubheader.jsx\nvar ListGroupSubheader_excluded = ["title", "element", "className", "children"];\n\nfunction ListGroupSubheader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ListGroupSubheader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ListGroupSubheader_ownKeys(Object(source), true).forEach(function (key) { ListGroupSubheader_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ListGroupSubheader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ListGroupSubheader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ListGroupSubheader_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ListGroupSubheader_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ListGroupSubheader_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar ListGroupSubheader = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var title = _ref.title,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'h3\' : _ref$element,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? title : _ref$children,\n      props = ListGroupSubheader_objectWithoutProperties(_ref, ListGroupSubheader_excluded);\n\n  var classNames = classnames_default()(listGroupCssClasses.SUBHEADER, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, ListGroupSubheader_objectSpread(ListGroupSubheader_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: children\n  }));\n});\nListGroupSubheader.displayName = \'MDCListGroupSubheader\';\nListGroupSubheader.propTypes = {\n  title: (prop_types_default()).string\n};\n/* harmony default export */ const list_ListGroupSubheader = (ListGroupSubheader);\n;// CONCATENATED MODULE: ./src/list/index.js\n\n\n\n\n\n\n\n\nlist_List.Item = list_ListItem;\nlist_List.Divider = list_ListDivider;\nlist_List.Group = list_ListGroup;\nlist_ListGroup.Subheader = list_ListGroupSubheader;\nlist_ListItem.Content = list_ListItemContent;\nlist_ListItem.End = list_ListItemEnd;\nlist_ListItem.Start = list_ListItemStart;\n\n;// CONCATENATED MODULE: ./src/menu/MenuItem.jsx\nvar MenuItem_excluded = ["selected", "disabled", "className"];\n\nfunction MenuItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction MenuItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { MenuItem_ownKeys(Object(source), true).forEach(function (key) { MenuItem_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { MenuItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction MenuItem_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction MenuItem_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = MenuItem_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction MenuItem_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar MenuItem = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      className = _ref.className,\n      props = MenuItem_objectWithoutProperties(_ref, MenuItem_excluded);\n\n  var classNames = classnames_default()(menu_constants_cssClasses.ITEM, MenuItem_defineProperty({}, menu_constants_cssClasses.ITEM_SELECTED, selected), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, MenuItem_objectSpread({\n    ref: ref,\n    role: "menuitem",\n    className: classNames,\n    selected: selected,\n    disabled: disabled,\n    "data-disabled": disabled || undefined,\n    tabIndex: disabled ? \'-1\' : undefined\n  }, props));\n});\nMenuItem.displayName = \'MDCMenuItem\';\nMenuItem.propTypes = MenuItem_objectSpread({}, list_ListItem.propTypes);\n/* harmony default export */ const menu_MenuItem = (MenuItem);\n;// CONCATENATED MODULE: ./src/modal/constants.js\nvar modal_constants_cssClasses = {\n  ROOT: \'mdc-modal\',\n  FIXED: \'mdc-modal--fixed\'\n};\n;// CONCATENATED MODULE: ./src/modal/Modal.jsx\n\n\n\n\nfunction Modal(_ref) {\n  var _ref$fixed = _ref.fixed,\n      fixed = _ref$fixed === void 0 ? false : _ref$fixed,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      children = _ref.children;\n  var rootRef = (0,react.useRef)(document.createElement(element));\n  (0,react.useEffect)(function () {\n    var root = rootRef.current;\n    var activeElement = document.activeElement;\n    root.className = modal_constants_cssClasses.ROOT;\n\n    if (fixed) {\n      root.classList.add(modal_constants_cssClasses.FIXED);\n    }\n\n    document.body.appendChild(root);\n    root.firstChild.focus();\n    return function () {\n      activeElement.focus();\n      document.body.removeChild(root);\n    };\n  }, [fixed]);\n  return /*#__PURE__*/(0,react_dom.createPortal)(children, rootRef.current);\n}\nModal.displayName = \'MDCModal\';\nModal.propTypes = {\n  fixed: (prop_types_default()).bool,\n  element: (prop_types_default()).string,\n  children: (prop_types_default()).node.isRequired\n};\n;// CONCATENATED MODULE: ./src/modal/index.js\n\n;// CONCATENATED MODULE: ./src/layer/Layer.jsx\nvar Layer_excluded = ["modal", "fixed", "children"];\n\nfunction Layer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Layer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Layer_ownKeys(Object(source), true).forEach(function (key) { Layer_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Layer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Layer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Layer_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Layer_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Layer_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nfunction Layer(_ref) {\n  var _ref$modal = _ref.modal,\n      modal = _ref$modal === void 0 ? false : _ref$modal,\n      _ref$fixed = _ref.fixed,\n      fixed = _ref$fixed === void 0 ? false : _ref$fixed,\n      children = _ref.children,\n      props = Layer_objectWithoutProperties(_ref, Layer_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(esm_CSSTransition, Layer_objectSpread(Layer_objectSpread({}, props), {}, {\n    children: modal ? /*#__PURE__*/(0,jsx_runtime.jsx)(Modal, {\n      fixed: fixed,\n      children: children\n    }) : children\n  }));\n}\nLayer.displayName = \'MDCLayer\';\nLayer.propTypes = {\n  modal: (prop_types_default()).bool,\n  fixed: (prop_types_default()).bool\n};\n;// CONCATENATED MODULE: ./src/layer/index.js\n\n;// CONCATENATED MODULE: ./src/menu/utils.js\nfunction utils_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { utils_typeof = function _typeof(obj) { return typeof obj; }; } else { utils_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return utils_typeof(obj); }\n\nvar defaultValues = {\n  top: false,\n  bottom: false,\n  center: false,\n  left: false,\n  right: false\n};\nfunction getAnchorOrigin() {\n  var anchorOrigin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'\';\n\n  if (utils_typeof(anchorOrigin) === \'object\') {\n    return Object.assign({}, defaultValues, anchorOrigin);\n  }\n\n  var keys = anchorOrigin.split(\' \');\n  var values = keys.reduce(function (result, key) {\n    result[key] = true;\n    return result;\n  }, {});\n  return Object.assign({}, defaultValues, values);\n}\n;// CONCATENATED MODULE: ./src/menu/MenuSurface.jsx\nvar MenuSurface_excluded = ["anchor", "anchorRef", "anchorOrigin", "transformOrigin", "open", "modal", "quick", "fixed", "persistent", "fullWidth", "onClose", "onKeyDown", "className"];\n\nfunction MenuSurface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction MenuSurface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { MenuSurface_ownKeys(Object(source), true).forEach(function (key) { MenuSurface_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { MenuSurface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction MenuSurface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction MenuSurface_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = MenuSurface_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction MenuSurface_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar MenuSurface = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var anchor = _ref.anchor,\n      _anchorRef = _ref.anchorRef,\n      _ref$anchorOrigin = _ref.anchorOrigin,\n      _anchorOrigin = _ref$anchorOrigin === void 0 ? Origin.TOP_LEFT : _ref$anchorOrigin,\n      _ref$transformOrigin = _ref.transformOrigin,\n      _transformOrigin = _ref$transformOrigin === void 0 ? _anchorOrigin : _ref$transformOrigin,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      _ref$modal = _ref.modal,\n      modal = _ref$modal === void 0 ? false : _ref$modal,\n      _ref$quick = _ref.quick,\n      quick = _ref$quick === void 0 ? false : _ref$quick,\n      _ref$fixed = _ref.fixed,\n      fixed = _ref$fixed === void 0 ? false : _ref$fixed,\n      _ref$persistent = _ref.persistent,\n      persistent = _ref$persistent === void 0 ? false : _ref$persistent,\n      _ref$fullWidth = _ref.fullWidth,\n      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? Function.prototype : _ref$onClose,\n      _ref$onKeyDown = _ref.onKeyDown,\n      onKeyDown = _ref$onKeyDown === void 0 ? Function.prototype : _ref$onKeyDown,\n      className = _ref.className,\n      props = MenuSurface_objectWithoutProperties(_ref, MenuSurface_excluded);\n\n  var rootRef = (0,react.useRef)();\n  var anchorRef = (0,react.useRef)(_anchorRef === null || _anchorRef === void 0 ? void 0 : _anchorRef.current);\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  (0,react.useEffect)(function () {\n    if (!_anchorRef) return;\n    anchorRef.current = _anchorRef.current;\n  }, [_anchorRef]);\n  useUpdated(function () {\n    if (!open || persistent) return;\n\n    function handleBodyClick(event) {\n      onClose(event);\n    }\n\n    document.body.addEventListener(\'click\', handleBodyClick, true);\n    return function () {\n      document.body.removeEventListener(\'click\', handleBodyClick, true);\n    };\n  }, [open, persistent, onClose]);\n  useUpdated(function () {\n    if (!open || !rootRef.current || !anchorRef.current) return;\n    var anchor = anchorRef.current;\n    var _rootRef$current = rootRef.current,\n        width = _rootRef$current.clientWidth,\n        height = _rootRef$current.clientHeight;\n    var anchorClientRect = anchor.getBoundingClientRect();\n    var anchorDimensions = modal ? anchorClientRect : {\n      top: anchor.offsetTop,\n      left: anchor.offsetLeft,\n      bottom: anchor.offsetTop + anchor.offsetHeight,\n      right: anchor.offsetLeft + anchor.offsetWidth,\n      width: anchor.offsetWidth,\n      height: anchor.offsetHeight\n    };\n    var style = {\n      top: anchorDimensions.top,\n      left: anchorDimensions.left,\n      width: fullWidth ? \'100%\' : undefined,\n      maxWidth: fullWidth ? "".concat(anchorDimensions.width, "px") : undefined,\n      position: fixed ? \'fixed\' : \'absolute\',\n      transformOrigin: _transformOrigin\n    };\n    var scrollY = modal && !fixed ? window.scrollY : 0;\n    var scrollX = modal && !fixed ? window.scrollX : 0;\n    var anchorOrigin = getAnchorOrigin(_anchorOrigin);\n    var transformOrigin = getAnchorOrigin(_transformOrigin);\n\n    if (anchorOrigin.top) {\n      style.top = anchorDimensions.top;\n    } else if (anchorOrigin.bottom) {\n      style.top = anchorDimensions.bottom;\n    }\n\n    if (anchorOrigin.left) {\n      style.left = anchorDimensions.left;\n    } else if (anchorOrigin.right) {\n      style.left = anchorDimensions.right;\n    }\n\n    if (transformOrigin.top) {\n      var top = scrollY + style.top;\n      var bottomOverflow = scrollY + (anchorOrigin.bottom ? anchorClientRect.bottom : anchorClientRect.top) + height - window.innerHeight;\n      style.top = bottomOverflow > 0 ? top - bottomOverflow : top;\n    } else if (transformOrigin.bottom) {\n      var _top = scrollY + style.top - height;\n\n      var topOverflow = scrollY + (anchorOrigin.bottom ? anchorClientRect.bottom : anchorClientRect.top) - height;\n      style.top = topOverflow > 0 ? _top : 0;\n    }\n\n    if (transformOrigin.left) {\n      var left = style.left;\n      var rightOverflow = scrollX + window.innerWidth - (anchorOrigin.left ? anchorClientRect.left : anchorClientRect.right) + width;\n      style.left = rightOverflow > 0 ? left : left - Math.abs(rightOverflow);\n    } else if (transformOrigin.right) {\n      var _left = style.left - width;\n\n      var leftOverflow = scrollX + (anchorOrigin.right ? anchorClientRect.right : anchorClientRect.left) - width;\n      style.left = leftOverflow > 0 ? _left : 0;\n    }\n\n    rootRef.current.style.top = "".concat(style.top, "px");\n    rootRef.current.style.left = "".concat(style.left, "px");\n    rootRef.current.style.position = style.position;\n    rootRef.current.style.width = style.width;\n    rootRef.current.style.maxWidth = style.maxWidth;\n    rootRef.current.style.transformOrigin = style.transformOrigin;\n  }, [open, modal, fixed, _anchorOrigin, _transformOrigin]);\n  var handleKeyDown = (0,react.useCallback)(function (event) {\n    if (event.key === \'Escape\' && !persistent) {\n      event.stopPropagation();\n      onClose(event);\n    }\n\n    onKeyDown(event);\n  }, [persistent, onKeyDown, onClose]);\n\n  var isBelowAnchor = _anchorOrigin.includes(\'bottom\') && _transformOrigin.includes(\'top\');\n\n  var classNames = classnames_default()(menu_constants_cssClasses.SURFACE, (_classnames = {}, MenuSurface_defineProperty(_classnames, menu_constants_cssClasses.SURFACE_FIXED, fixed), MenuSurface_defineProperty(_classnames, menu_constants_cssClasses.SURFACE_BELOW_ANCHOR, isBelowAnchor), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [anchor && (0,react.cloneElement)(anchor, {\n      ref: anchorRef\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Layer, {\n      "in": open,\n      modal: modal,\n      timeout: quick ? 0 : {\n        enter: menu_constants_numbers.TRANSITION_OPEN_DURATION,\n        exit: menu_constants_numbers.TRANSITION_CLOSE_DURATION\n      },\n      classNames: quick ? {\n        enterDone: menu_constants_cssClasses.SURFACE_OPEN\n      } : {\n        enter: menu_constants_cssClasses.SURFACE_ANIMATING_OPEN,\n        enterActive: menu_constants_cssClasses.SURFACE_ANIMATING_OPEN,\n        enterDone: menu_constants_cssClasses.SURFACE_OPEN,\n        exit: menu_constants_cssClasses.SURFACE_OPEN,\n        exitActive: menu_constants_cssClasses.SURFACE_ANIMATING_CLOSED\n      },\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", MenuSurface_objectSpread({\n        ref: rootRef,\n        className: classNames,\n        onKeyDown: handleKeyDown\n      }, props))\n    })]\n  });\n});\nMenuSurface.displayName = \'MDCMenuSurface\';\nMenuSurface.propTypes = {\n  anchor: (prop_types_default()).element,\n  anchorRef: (prop_types_default()).object,\n  anchorOrigin: prop_types_default().oneOf(Object.values(Origin)),\n  open: (prop_types_default()).bool,\n  modal: (prop_types_default()).bool,\n  quick: (prop_types_default()).bool,\n  fixed: (prop_types_default()).bool,\n  persistent: (prop_types_default()).bool,\n  fullWidth: (prop_types_default()).bool,\n  onClose: (prop_types_default()).func\n};\n/* harmony default export */ const menu_MenuSurface = (MenuSurface);\n;// CONCATENATED MODULE: ./src/menu/Menu.jsx\nvar Menu_excluded = ["open", "items", "listProps", "children", "className"];\n\nfunction Menu_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Menu_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Menu_ownKeys(Object(source), true).forEach(function (key) { Menu_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Menu_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Menu_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Menu_slicedToArray(arr, i) { return Menu_arrayWithHoles(arr) || Menu_iterableToArrayLimit(arr, i) || Menu_unsupportedIterableToArray(arr, i) || Menu_nonIterableRest(); }\n\nfunction Menu_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Menu_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Menu_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Menu_arrayLikeToArray(o, minLen); }\n\nfunction Menu_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Menu_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Menu_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction Menu_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Menu_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Menu_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar Menu = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var open = _ref.open,\n      items = _ref.items,\n      _ref$listProps = _ref.listProps,\n      listProps = _ref$listProps === void 0 ? {} : _ref$listProps,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? items === null || items === void 0 ? void 0 : items.map(function (item) {\n    return (0,react.createElement)(menu_MenuItem, item);\n  }) : _ref$children,\n      className = _ref.className,\n      props = Menu_objectWithoutProperties(_ref, Menu_excluded);\n\n  var listRef = (0,react.useRef)();\n\n  var _useState = (0,react.useState)(0),\n      _useState2 = Menu_slicedToArray(_useState, 2),\n      focusedChildIndex = _useState2[0],\n      setFocusedChildIndex = _useState2[1];\n\n  (0,react.useEffect)(function () {\n    if (open) {\n      setFocusedChildIndex(react.Children.toArray(children).findIndex(function (i) {\n        return i.props.selected;\n      }));\n    }\n  }, [open, children]);\n  useUpdated(function () {\n    if (open) {\n      var _listRef$current$chil;\n\n      (_listRef$current$chil = listRef.current.children[focusedChildIndex]) === null || _listRef$current$chil === void 0 ? void 0 : _listRef$current$chil.focus();\n    }\n  }, [focusedChildIndex, open]);\n  var handleKeyDown = (0,react.useCallback)(function (event) {\n    event.preventDefault();\n\n    if (event.key === \'ArrowDown\') {\n      setFocusedChildIndex(function (index) {\n        var nextIndex = index + 1;\n        return nextIndex < listRef.current.children.length ? nextIndex : index;\n      });\n    } else if (event.key === \'ArrowUp\') {\n      setFocusedChildIndex(function (index) {\n        var nextIndex = index - 1;\n        return nextIndex >= 0 ? nextIndex : index;\n      });\n    }\n  }, []);\n  var classNames = classnames_default()(menu_constants_cssClasses.ROOT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(menu_MenuSurface, Menu_objectSpread(Menu_objectSpread({\n    ref: ref,\n    open: open,\n    className: classNames,\n    onKeyDown: handleKeyDown\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(list_List, Menu_objectSpread(Menu_objectSpread({\n      ref: listRef,\n      role: "menu",\n      "aria-hidden": "true",\n      "aria-orientation": "vertical",\n      tabIndex: open ? 0 : -1\n    }, listProps), {}, {\n      children: react.Children.map(children, function (item, index) {\n        return /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n          component: item,\n          tabIndex: index === focusedChildIndex ? 0 : -1\n        });\n      })\n    }))\n  }));\n});\nMenu.displayName = \'MDCMenu\';\nMenu.propTypes = Menu_objectSpread(Menu_objectSpread({}, menu_MenuSurface.propTypes), {}, {\n  listProps: (prop_types_default()).object\n});\n/* harmony default export */ const menu_Menu = (Menu);\n;// CONCATENATED MODULE: ./src/menu/MenuAnchor.jsx\nvar MenuAnchor_excluded = ["wrap", "element", "className", "children"];\n\nfunction MenuAnchor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction MenuAnchor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { MenuAnchor_ownKeys(Object(source), true).forEach(function (key) { MenuAnchor_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { MenuAnchor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction MenuAnchor_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction MenuAnchor_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = MenuAnchor_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction MenuAnchor_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar MenuAnchor = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$wrap = _ref.wrap,\n      wrap = _ref$wrap === void 0 ? true : _ref$wrap,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      children = _ref.children,\n      props = MenuAnchor_objectWithoutProperties(_ref, MenuAnchor_excluded);\n\n  return wrap ? (0,react.createElement)(element, MenuAnchor_objectSpread({\n    ref: ref,\n    className: classnames_default()(menu_constants_cssClasses.SURFACE_ANCHOR, className)\n  }, props), children) : (0,react.cloneElement)(children, MenuAnchor_objectSpread({\n    ref: ref,\n    className: classnames_default()(children.props.className, menu_constants_cssClasses.SURFACE_ANCHOR)\n  }, props));\n});\nMenuAnchor.displayName = \'MDCMenuAnchor\';\n/* harmony default export */ const menu_MenuAnchor = (MenuAnchor);\n;// CONCATENATED MODULE: ./src/menu/MenuSelectionGroup.jsx\nvar MenuSelectionGroup_excluded = ["element"];\n\nfunction MenuSelectionGroup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction MenuSelectionGroup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { MenuSelectionGroup_ownKeys(Object(source), true).forEach(function (key) { MenuSelectionGroup_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { MenuSelectionGroup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction MenuSelectionGroup_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction MenuSelectionGroup_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = MenuSelectionGroup_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction MenuSelectionGroup_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nvar MenuSelectionGroup = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'ul\' : _ref$element,\n      props = MenuSelectionGroup_objectWithoutProperties(_ref, MenuSelectionGroup_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n    ref: ref,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Element, MenuSelectionGroup_objectSpread({\n      className: "mdc-menu__selection-group"\n    }, props))\n  });\n});\nMenuSelectionGroup.displayName = \'MDCMenuSelectionGroup\';\n/* harmony default export */ const menu_MenuSelectionGroup = (MenuSelectionGroup);\n;// CONCATENATED MODULE: ./src/menu/MenuSelectionGroupIcon.jsx\nfunction MenuSelectionGroupIcon_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction MenuSelectionGroupIcon_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { MenuSelectionGroupIcon_ownKeys(Object(source), true).forEach(function (key) { MenuSelectionGroupIcon_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { MenuSelectionGroupIcon_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction MenuSelectionGroupIcon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nfunction MenuSelectionGroupIcon(props) {\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(icon_Icon, MenuSelectionGroupIcon_objectSpread({\n    className: "mdc-menu__selection-group-icon"\n  }, props));\n}\nMenuSelectionGroupIcon.displayName = \'MDCMenuSelectionGroupIcon\';\n;// CONCATENATED MODULE: ./src/menu/index.js\n\n\n\n\n\n\n\nmenu_Menu.Anchor = menu_MenuAnchor;\nmenu_Menu.Item = menu_MenuItem;\nmenu_Menu.Origin = Origin;\nmenu_Menu.Surface = menu_MenuSurface;\nmenu_Menu.SelectionGroup = menu_MenuSelectionGroup;\nmenu_Menu.SelectionGroupIcon = MenuSelectionGroupIcon;\n\n;// CONCATENATED MODULE: ./src/select/constants.js\nvar select_constants_cssClasses = {\n  ROOT: \'mdc-select\',\n  FILLED: \'mdc-select--filled\',\n  OUTLINED: \'mdc-select--outlined\',\n  ACTIVATED: \'mdc-select--activated\',\n  DISABLED: \'mdc-select--disabled\',\n  FOCUSED: \'mdc-select--focused\',\n  REQUIRED: \'mdc-select--required\',\n  INVALID: \'mdc-select--invalid\',\n  NO_LABEL: \'mdc-select--no-label\',\n  WITH_LEADING_ICON: \'mdc-select--with-leading-icon\',\n  ANCHOR: \'mdc-select__anchor\',\n  DROPDOWN_ICON: \'mdc-select__dropdown-icon\',\n  DROPDOWN_ICON_GRAPHIC: \'mdc-select__dropdown-icon-graphic\',\n  DROPDOWN_ICON_INACTIVE: \'mdc-select__dropdown-icon-inactive\',\n  DROPDOWN_ICON_ACTIVE: \'mdc-select__dropdown-icon-active\',\n  ICON: \'mdc-select__icon\',\n  MENU: \'mdc-select__menu\',\n  MENU_INVALID: \'mdc-select__menu--invalid\',\n  RIPPLE: \'mdc-select__ripple\',\n  SELECTED_TEXT: \'mdc-select__selected-text\',\n  SELECTED_TEXT_CONTAINER: \'mdc-select__selected-text-container\',\n  HELPER_TEXT: \'mdc-select-helper-text\',\n  VALIDATION_MESSAGE: \'mdc-select-helper-text--validation-msg\',\n  VALIDATION_MESSAGE_PERSISTENT: \'mdc-select-helper-text--validation-msg-persistent\'\n};\nvar optionCssClasses = {\n  ROOT: \'mdc-select__option\',\n  ONE_LINE: \'mdc-select__one-line-option\',\n  TWO_LINE: \'mdc-select__two-line-option\',\n  WITH_LEADING_CONTENT: \'mdc-select__option-with-leading-content\',\n  WITH_META: \'mdc-select__option-with-meta\'\n};\n;// CONCATENATED MODULE: ./src/select/DropdownIcon.jsx\n\n\n\n\nvar DropdownIcon = function DropdownIcon() {\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n    className: select_constants_cssClasses.DROPDOWN_ICON,\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("svg", {\n      className: select_constants_cssClasses.DROPDOWN_ICON_GRAPHIC,\n      viewBox: "7 10 10 5",\n      focusable: "false",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("polygon", {\n        className: select_constants_cssClasses.DROPDOWN_ICON_INACTIVE,\n        stroke: "none",\n        fillRule: "evenodd",\n        points: "7 10 12 15 17 10"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("polygon", {\n        className: select_constants_cssClasses.DROPDOWN_ICON_ACTIVE,\n        stroke: "none",\n        fillRule: "evenodd",\n        points: "7 15 12 10 17 15"\n      })]\n    })\n  });\n};\n\n/* harmony default export */ const select_DropdownIcon = (DropdownIcon);\n;// CONCATENATED MODULE: ./src/select/SelectOption.jsx\nvar SelectOption_excluded = ["icon", "image", "avatar", "primaryText", "secondaryText", "meta", "selected", "checkbox", "oneLine", "twoLines", "className", "onClick"];\n\nfunction SelectOption_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction SelectOption_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SelectOption_ownKeys(Object(source), true).forEach(function (key) { SelectOption_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SelectOption_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction SelectOption_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SelectOption_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = SelectOption_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction SelectOption_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar SelectOption = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var icon = _ref.icon,\n      image = _ref.image,\n      avatar = _ref.avatar,\n      primaryText = _ref.primaryText,\n      secondaryText = _ref.secondaryText,\n      meta = _ref.meta,\n      selected = _ref.selected,\n      _ref$checkbox = _ref.checkbox,\n      checkbox = _ref$checkbox === void 0 ? false : _ref$checkbox,\n      _ref$oneLine = _ref.oneLine,\n      oneLine = _ref$oneLine === void 0 ? false : _ref$oneLine,\n      _ref$twoLines = _ref.twoLines,\n      twoLines = _ref$twoLines === void 0 ? false : _ref$twoLines,\n      className = _ref.className,\n      onClick = _ref.onClick,\n      props = SelectOption_objectWithoutProperties(_ref, SelectOption_excluded);\n\n  var lines = Boolean(primaryText) + Boolean(secondaryText);\n  var hasLeadingContent = Boolean(checkbox || icon || image || avatar);\n  var classNames = classnames_default()(optionCssClasses.ROOT, (_classnames = {}, SelectOption_defineProperty(_classnames, optionCssClasses.ONE_LINE, oneLine || lines === 1), SelectOption_defineProperty(_classnames, optionCssClasses.TWO_LINE, twoLines || lines === 2), SelectOption_defineProperty(_classnames, optionCssClasses.WITH_LEADING_CONTENT, hasLeadingContent), SelectOption_defineProperty(_classnames, optionCssClasses.WITH_META, meta), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(menu_MenuItem, SelectOption_objectSpread({\n    ref: ref,\n    className: classNames,\n    leadingCheckbox: checkbox ? /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {\n      checked: selected\n    }) : undefined,\n    icon: icon,\n    image: image,\n    avatar: avatar,\n    primaryText: primaryText,\n    secondaryText: secondaryText,\n    meta: meta,\n    selected: selected,\n    oneLine: oneLine,\n    twoLines: twoLines,\n    withLeadingCheckbox: checkbox,\n    onClick: onClick\n  }, props));\n});\nSelectOption.displayName = \'MDCSelectOption\';\n/* harmony default export */ const select_SelectOption = (SelectOption);\n;// CONCATENATED MODULE: ./src/select/HelperText.jsx\nvar HelperText_excluded = ["validation", "persistent", "element"];\n\nfunction HelperText_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction HelperText_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { HelperText_ownKeys(Object(source), true).forEach(function (key) { HelperText_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { HelperText_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction HelperText_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction HelperText_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = HelperText_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction HelperText_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar HelperText = function HelperText(_ref) {\n  var _classnames;\n\n  var _ref$validation = _ref.validation,\n      validation = _ref$validation === void 0 ? false : _ref$validation,\n      _ref$persistent = _ref.persistent,\n      persistent = _ref$persistent === void 0 ? false : _ref$persistent,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'p\' : _ref$element,\n      props = HelperText_objectWithoutProperties(_ref, HelperText_excluded);\n\n  var classNames = classnames_default()(select_constants_cssClasses.HELPER_TEXT, (_classnames = {}, HelperText_defineProperty(_classnames, select_constants_cssClasses.VALIDATION_MESSAGE, validation), HelperText_defineProperty(_classnames, select_constants_cssClasses.VALIDATION_MESSAGE_PERSISTENT, persistent), _classnames));\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, HelperText_objectSpread({\n    className: classNames\n  }, props));\n};\n\nHelperText.displayName = \'MDCSelectHelperText\';\nHelperText.propTypes = {\n  persistent: (prop_types_default()).bool,\n  validation: (prop_types_default()).bool\n};\n/* harmony default export */ const select_HelperText = (HelperText);\n;// CONCATENATED MODULE: ./src/select/Select.jsx\nvar Select_excluded = ["name", "value", "options", "label", "icon", "leadingIcon", "helperText", "filled", "outlined", "multiple", "disabled", "required", "onChange", "menuProps", "listProps", "helperTextProps", "className", "children"];\n\nfunction Select_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Select_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Select_ownKeys(Object(source), true).forEach(function (key) { Select_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Select_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Select_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || Select_unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Select_arrayLikeToArray(arr); }\n\nfunction Select_slicedToArray(arr, i) { return Select_arrayWithHoles(arr) || Select_iterableToArrayLimit(arr, i) || Select_unsupportedIterableToArray(arr, i) || Select_nonIterableRest(); }\n\nfunction Select_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Select_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Select_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Select_arrayLikeToArray(o, minLen); }\n\nfunction Select_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Select_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Select_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction Select_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Select_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Select_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Select = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var name = _ref.name,\n      value = _ref.value,\n      options = _ref.options,\n      label = _ref.label,\n      icon = _ref.icon,\n      _ref$leadingIcon = _ref.leadingIcon,\n      leadingIcon = _ref$leadingIcon === void 0 ? icon : _ref$leadingIcon,\n      helperText = _ref.helperText,\n      _ref$filled = _ref.filled,\n      filled = _ref$filled === void 0 ? false : _ref$filled,\n      _ref$outlined = _ref.outlined,\n      outlined = _ref$outlined === void 0 ? false : _ref$outlined,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? isArray(value) : _ref$multiple,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$required = _ref.required,\n      required = _ref$required === void 0 ? false : _ref$required,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      _ref$menuProps = _ref.menuProps,\n      menuProps = _ref$menuProps === void 0 ? {} : _ref$menuProps,\n      _ref$listProps = _ref.listProps,\n      listProps = _ref$listProps === void 0 ? {} : _ref$listProps,\n      _ref$helperTextProps = _ref.helperTextProps,\n      helperTextProps = _ref$helperTextProps === void 0 ? {} : _ref$helperTextProps,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? options === null || options === void 0 ? void 0 : options.map(function (option) {\n    return (0,react.createElement)(select_SelectOption, option);\n  }) : _ref$children,\n      props = Select_objectWithoutProperties(_ref, Select_excluded);\n\n  var anchorRef = (0,react.useRef)();\n  var inputRef = (0,react.useRef)();\n  var menuRef = (0,react.useRef)();\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = Select_slicedToArray(_useState, 2),\n      activated = _useState2[0],\n      setActivated = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = Select_slicedToArray(_useState3, 2),\n      focused = _useState4[0],\n      setFocused = _useState4[1];\n\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = Select_slicedToArray(_useState5, 2),\n      touched = _useState6[0],\n      setTouched = _useState6[1];\n\n  var _useState7 = (0,react.useState)(),\n      _useState8 = Select_slicedToArray(_useState7, 2),\n      selectedText = _useState8[0],\n      setSelectedText = _useState8[1];\n\n  var _useState9 = (0,react.useState)(),\n      _useState10 = Select_slicedToArray(_useState9, 2),\n      interactionCoords = _useState10[0],\n      setInteractionCoords = _useState10[1];\n\n  (0,react.useEffect)(function () {\n    if (multiple) {\n      var selectedOptions = react.Children.toArray(children).map(function (option) {\n        return option.props;\n      }).filter(function (option) {\n        return value.includes(option.value);\n      });\n\n      var _selectedText = selectedOptions.map(function (option) {\n        return option.text || option.children;\n      }).join(\', \');\n\n      setSelectedText(_selectedText);\n    } else {\n      var selectedOption = react.Children.toArray(children).map(function (option) {\n        return option.props;\n      }).find(function (option) {\n        return option.value === value;\n      });\n\n      if (selectedOption) {\n        setSelectedText(selectedOption.text || selectedOption.children);\n      }\n    }\n  }, [value, multiple, children]);\n  var handleAnchorClick = (0,react.useCallback)(function (event) {\n    if (activated) {\n      setActivated(false);\n      setFocused(false);\n    } else {\n      var targetClientRect = event.target.getBoundingClientRect();\n      setInteractionCoords({\n        x: event.clientX - targetClientRect.left,\n        y: event.clientY - targetClientRect.top\n      });\n      setActivated(true);\n      setFocused(true);\n    }\n  }, [activated]);\n  var handleOptionInteraction = (0,react.useCallback)(function (event) {\n    if (event.type === \'keydown\' && event.key !== \' \' && event.key !== \'Enter\') return;\n    var option = event.currentTarget.dataset;\n    if (option.disabled) return;\n\n    if (multiple) {\n      var values = new Set(value);\n      values.has(option.value) ? values["delete"](option.value) : values.add(option.value);\n      event.target = {\n        name: name,\n        value: _toConsumableArray(values)\n      };\n      onChange(event, _toConsumableArray(values));\n    } else {\n      event.target = {\n        name: name,\n        value: option.value\n      };\n      onChange(event, option.value);\n      setActivated(false);\n      setFocused(false);\n    }\n  }, [value, name, multiple, onChange]);\n  var handleMenuClose = (0,react.useCallback)(function (event) {\n    if (event.type === \'click\' && event.target === anchorRef.current) return;\n    if (multiple && event.type === \'click\' && event.path.includes(menuRef.current)) return;\n    setActivated(false);\n    setFocused(false);\n    setTouched(true);\n  }, [multiple]);\n  var handleKeyDown = (0,react.useCallback)(function (event) {\n    if (event.key === \' \' || event.key === \'Enter\' || event.key === \'ArrowDown\' || event.key === \'ArrowUp\') {\n      event.preventDefault();\n      event.stopPropagation();\n      setActivated(true);\n    }\n  }, []);\n  var hasValue = isArray(value) ? value.length > 0 : Boolean(value);\n  var focusedOrHasValue = focused || hasValue;\n  var isInvalid = touched && required && !hasValue;\n  var classNames = classnames_default()(select_constants_cssClasses.ROOT, (_classnames = {}, Select_defineProperty(_classnames, select_constants_cssClasses.FILLED, filled), Select_defineProperty(_classnames, select_constants_cssClasses.OUTLINED, outlined), Select_defineProperty(_classnames, select_constants_cssClasses.ACTIVATED, activated), Select_defineProperty(_classnames, select_constants_cssClasses.DISABLED, disabled), Select_defineProperty(_classnames, select_constants_cssClasses.FOCUSED, focused), Select_defineProperty(_classnames, select_constants_cssClasses.REQUIRED, required), Select_defineProperty(_classnames, select_constants_cssClasses.INVALID, isInvalid), Select_defineProperty(_classnames, select_constants_cssClasses.NO_LABEL, !label), Select_defineProperty(_classnames, select_constants_cssClasses.WITH_LEADING_ICON, leadingIcon), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      ref: ref,\n      className: classNames,\n      children: [name && /*#__PURE__*/(0,jsx_runtime.jsx)("input", Select_objectSpread({\n        ref: inputRef,\n        type: "hidden",\n        name: name,\n        value: value,\n        required: required,\n        disabled: disabled\n      }, props)), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        ref: anchorRef,\n        className: select_constants_cssClasses.ANCHOR,\n        "aria-required": required || undefined,\n        tabIndex: !disabled ? 0 : undefined,\n        onKeyDown: handleKeyDown,\n        onClick: handleAnchorClick,\n        children: [filled && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: select_constants_cssClasses.RIPPLE\n        }), filled && label && /*#__PURE__*/(0,jsx_runtime.jsx)(floating_label_FloatingLabel, {\n          label: label,\n          "float": focusedOrHasValue\n        }), outlined && /*#__PURE__*/(0,jsx_runtime.jsx)(notched_outline_NotchedOutline, {\n          notched: focusedOrHasValue,\n          children: label && /*#__PURE__*/(0,jsx_runtime.jsx)(floating_label_FloatingLabel, {\n            label: label,\n            "float": focusedOrHasValue\n          })\n        }), leadingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n          component: leadingIcon,\n          fallback: icon_Icon,\n          className: select_constants_cssClasses.ICON,\n          tabIndex: "0",\n          role: "button"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: select_constants_cssClasses.SELECTED_TEXT_CONTAINER,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: select_constants_cssClasses.SELECTED_TEXT,\n            children: selectedText\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_DropdownIcon, {}), filled && /*#__PURE__*/(0,jsx_runtime.jsx)(line_ripple_LineRipple, {\n          active: focused,\n          transformOrigin: interactionCoords === null || interactionCoords === void 0 ? void 0 : interactionCoords.x\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu, Select_objectSpread(Select_objectSpread({\n        ref: menuRef,\n        anchorRef: anchorRef,\n        className: select_constants_cssClasses.MENU,\n        open: activated,\n        anchorOrigin: Origin.BOTTOM_CENTER,\n        transformOrigin: Origin.TOP_CENTER,\n        fullWidth: true,\n        listProps: listProps,\n        onClose: handleMenuClose\n      }, menuProps), {}, {\n        children: react.Children.map(children, function (option) {\n          var optionValue = option.props.value;\n          return (0,react.cloneElement)(option, {\n            value: undefined,\n            \'data-value\': optionValue,\n            selected: !isUndefined(value) && (multiple ? value.includes(optionValue) : optionValue === value),\n            checkbox: multiple,\n            onClick: handleOptionInteraction,\n            onKeyDown: handleOptionInteraction\n          });\n        })\n      }))]\n    }), helperText && /*#__PURE__*/(0,jsx_runtime.jsx)(select_HelperText, Select_objectSpread(Select_objectSpread({}, helperTextProps), {}, {\n      children: helperText\n    }))]\n  });\n});\nSelect.displayName = \'MDCSelect\';\nSelect.propTypes = {\n  value: (prop_types_default()).any,\n  options: prop_types_default().arrayOf((prop_types_default()).object),\n  label: (prop_types_default()).string,\n  leadingIcon: (prop_types_default()).element,\n  helperText: (prop_types_default()).string,\n  filled: (prop_types_default()).bool,\n  outlined: (prop_types_default()).bool,\n  multiple: (prop_types_default()).bool,\n  disabled: (prop_types_default()).bool,\n  required: (prop_types_default()).bool,\n  children: prop_types_default().oneOfType([(prop_types_default()).element, prop_types_default().arrayOf((prop_types_default()).element)]),\n  menuProps: (prop_types_default()).object,\n  helperTextProps: (prop_types_default()).object,\n  onChange: (prop_types_default()).func\n};\n/* harmony default export */ const select_Select = (Select);\n;// CONCATENATED MODULE: ./src/select/index.js\n\n\nselect_Select.Option = select_SelectOption;\n\n;// CONCATENATED MODULE: ./src/data-table/DataTablePagination.jsx\nvar DataTablePagination_excluded = ["totalCount", "currentPage", "rowsPerPage", "onFirstPage", "onPrevPage", "onNextPage", "onLastPage", "className"];\n\nfunction DataTablePagination_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTablePagination_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTablePagination_ownKeys(Object(source), true).forEach(function (key) { DataTablePagination_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTablePagination_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTablePagination_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTablePagination_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTablePagination_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTablePagination_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar DataTablePagination = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var totalCount = _ref.totalCount,\n      _ref$currentPage = _ref.currentPage,\n      currentPage = _ref$currentPage === void 0 ? 1 : _ref$currentPage,\n      _ref$rowsPerPage = _ref.rowsPerPage,\n      rowsPerPage = _ref$rowsPerPage === void 0 ? 10 : _ref$rowsPerPage,\n      _ref$onFirstPage = _ref.onFirstPage,\n      onFirstPage = _ref$onFirstPage === void 0 ? Function.prototype : _ref$onFirstPage,\n      _ref$onPrevPage = _ref.onPrevPage,\n      onPrevPage = _ref$onPrevPage === void 0 ? Function.prototype : _ref$onPrevPage,\n      _ref$onNextPage = _ref.onNextPage,\n      onNextPage = _ref$onNextPage === void 0 ? Function.prototype : _ref$onNextPage,\n      _ref$onLastPage = _ref.onLastPage,\n      onLastPage = _ref$onLastPage === void 0 ? Function.prototype : _ref$onLastPage,\n      className = _ref.className,\n      props = DataTablePagination_objectWithoutProperties(_ref, DataTablePagination_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.PAGINATION, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", DataTablePagination_objectSpread(DataTablePagination_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: data_table_constants_cssClasses.PAGINATION_TRAILING,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: data_table_constants_cssClasses.PAGINATION_ROWS_PER_PAGE,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: data_table_constants_cssClasses.PAGINATION_ROWS_PER_PAGE_LABEL,\n          children: "\\u0420\\u044F\\u0434\\u043E\\u0432 \\u043D\\u0430 \\u0441\\u0442\\u0440."\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select, {\n          className: data_table_constants_cssClasses.PAGINATION_ROWS_PER_PAGE_SELECT,\n          options: [10, 25, 50, 100].map(function (value) {\n            return {\n              key: value,\n              text: value //selected: value === rowsPerPage\n\n            };\n          })\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: data_table_constants_cssClasses.PAGINATION_NAVIGATION,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: data_table_constants_cssClasses.PAGINATION_TOTAL,\n          children: [currentPage, "\\u2011", rowsPerPage, " \\u0438\\u0437 ", totalCount]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n          className: data_table_constants_cssClasses.PAGINATION_BUTTON,\n          icon: "first_page",\n          onClick: onFirstPage\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n          className: data_table_constants_cssClasses.PAGINATION_BUTTON,\n          icon: "chevron_left",\n          onClick: onPrevPage\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n          className: data_table_constants_cssClasses.PAGINATION_BUTTON,\n          icon: "chevron_right",\n          onClick: onNextPage\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n          className: data_table_constants_cssClasses.PAGINATION_BUTTON,\n          icon: "last_page",\n          onClick: onLastPage\n        })]\n      })]\n    })\n  }));\n});\nDataTablePagination.displayName = \'MDCDataTablePagination\';\n/* harmony default export */ const data_table_DataTablePagination = (DataTablePagination);\n;// CONCATENATED MODULE: ./src/data-table/DataTable.jsx\nvar DataTable_excluded = ["stickyHeader", "inProgress", "pagination", "className", "children"];\n\nfunction DataTable_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTable_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTable_ownKeys(Object(source), true).forEach(function (key) { DataTable_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTable_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTable_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTable_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTable_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTable_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar DataTable = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$stickyHeader = _ref.stickyHeader,\n      stickyHeader = _ref$stickyHeader === void 0 ? false : _ref$stickyHeader,\n      _ref$inProgress = _ref.inProgress,\n      inProgress = _ref$inProgress === void 0 ? false : _ref$inProgress,\n      pagination = _ref.pagination,\n      className = _ref.className,\n      children = _ref.children,\n      props = DataTable_objectWithoutProperties(_ref, DataTable_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.ROOT, (_classnames = {}, DataTable_defineProperty(_classnames, data_table_constants_cssClasses.STICKY_HEADER, stickyHeader), DataTable_defineProperty(_classnames, data_table_constants_cssClasses.IN_PROGRESS, inProgress), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", DataTable_objectSpread(DataTable_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: data_table_constants_cssClasses.TABLE_CONTAINER,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("table", {\n        className: data_table_constants_cssClasses.TABLE,\n        children: children\n      })\n    }), inProgress && /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTableProgressIndicator, {}), pagination && /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTablePagination, DataTable_objectSpread({}, pagination))]\n  }));\n});\nDataTable.displayName = \'MDCDataTable\';\nDataTable.propTypes = {\n  stickyHeader: (prop_types_default()).bool,\n  inProgress: (prop_types_default()).bool\n};\n/* harmony default export */ const data_table_DataTable = (DataTable);\n;// CONCATENATED MODULE: ./src/data-table/DataTableCell.jsx\nvar DataTableCell_excluded = ["checkbox", "numeric", "element", "scope", "className", "children"];\n\nfunction DataTableCell_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableCell_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableCell_ownKeys(Object(source), true).forEach(function (key) { DataTableCell_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableCell_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableCell_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTableCell_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTableCell_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTableCell_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar DataTableCell = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$checkbox = _ref.checkbox,\n      checkbox = _ref$checkbox === void 0 ? false : _ref$checkbox,\n      _ref$numeric = _ref.numeric,\n      numeric = _ref$numeric === void 0 ? false : _ref$numeric,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'td\' : _ref$element,\n      scope = _ref.scope,\n      className = _ref.className,\n      children = _ref.children,\n      props = DataTableCell_objectWithoutProperties(_ref, DataTableCell_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.CELL, (_classnames = {}, DataTableCell_defineProperty(_classnames, data_table_constants_cssClasses.CELL_CHECKBOX, checkbox), DataTableCell_defineProperty(_classnames, data_table_constants_cssClasses.CELL_NUMERIC, numeric), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, DataTableCell_objectSpread(DataTableCell_objectSpread({\n    ref: ref,\n    className: classNames,\n    scope: scope\n  }, props), {}, {\n    children: checkbox ? /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      className: data_table_constants_cssClasses.ROW_CHECKBOX\n    }) : children\n  }));\n});\nDataTableCell.displayName = \'MDCDataTableCell\';\nDataTableCell.propTypes = {\n  checkbox: (prop_types_default()).bool,\n  numeric: (prop_types_default()).bool\n};\n/* harmony default export */ const data_table_DataTableCell = (DataTableCell);\n;// CONCATENATED MODULE: ./src/data-table/DataTableContent.jsx\nvar DataTableContent_excluded = ["className"];\n\nfunction DataTableContent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableContent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableContent_ownKeys(Object(source), true).forEach(function (key) { DataTableContent_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableContent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableContent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTableContent_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTableContent_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTableContent_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar DataTableContent = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var className = _ref.className,\n      props = DataTableContent_objectWithoutProperties(_ref, DataTableContent_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.CONTENT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("tbody", DataTableContent_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nDataTableContent.displayName = \'MDCDataTableContent\';\n/* harmony default export */ const data_table_DataTableContent = (DataTableContent);\n;// CONCATENATED MODULE: ./src/data-table/DataTableFooter.jsx\nvar DataTableFooter_excluded = ["className"];\n\nfunction DataTableFooter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableFooter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableFooter_ownKeys(Object(source), true).forEach(function (key) { DataTableFooter_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableFooter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableFooter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTableFooter_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTableFooter_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTableFooter_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar DataTableFooter = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var className = _ref.className,\n      props = DataTableFooter_objectWithoutProperties(_ref, DataTableFooter_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.FOOTER, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("tfoot", DataTableFooter_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nDataTableFooter.displayName = \'MDCDataTableFooter\';\n/* harmony default export */ const data_table_DataTableFooter = (DataTableFooter);\n;// CONCATENATED MODULE: ./src/data-table/DataTableHeader.jsx\nvar DataTableHeader_excluded = ["className"];\n\nfunction DataTableHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableHeader_ownKeys(Object(source), true).forEach(function (key) { DataTableHeader_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTableHeader_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTableHeader_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTableHeader_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar DataTableHeader = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var className = _ref.className,\n      props = DataTableHeader_objectWithoutProperties(_ref, DataTableHeader_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.HEADER, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("thead", DataTableHeader_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nDataTableHeader.displayName = \'MDCDataTableHeader\';\n/* harmony default export */ const data_table_DataTableHeader = (DataTableHeader);\n;// CONCATENATED MODULE: ./src/data-table/DataTableHeaderCell.jsx\nvar DataTableHeaderCell_excluded = ["value", "label", "checkbox", "numeric", "sort", "sortIconButton", "onSort", "element", "role", "scope", "className", "children"];\n\nfunction DataTableHeaderCell_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableHeaderCell_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableHeaderCell_ownKeys(Object(source), true).forEach(function (key) { DataTableHeaderCell_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableHeaderCell_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableHeaderCell_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTableHeaderCell_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTableHeaderCell_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTableHeaderCell_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar DataTableHeaderCell = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var value = _ref.value,\n      label = _ref.label,\n      _ref$checkbox = _ref.checkbox,\n      checkbox = _ref$checkbox === void 0 ? false : _ref$checkbox,\n      _ref$numeric = _ref.numeric,\n      numeric = _ref$numeric === void 0 ? false : _ref$numeric,\n      sort = _ref.sort,\n      _ref$sortIconButton = _ref.sortIconButton,\n      sortIconButton = _ref$sortIconButton === void 0 ? \'arrow_upward\' : _ref$sortIconButton,\n      _ref$onSort = _ref.onSort,\n      onSort = _ref$onSort === void 0 ? Function.prototype : _ref$onSort,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'th\' : _ref$element,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? \'columnheader\' : _ref$role,\n      _ref$scope = _ref.scope,\n      scope = _ref$scope === void 0 ? \'col\' : _ref$scope,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? label : _ref$children,\n      props = DataTableHeaderCell_objectWithoutProperties(_ref, DataTableHeaderCell_excluded);\n\n  var handleSortIconClick = (0,react.useCallback)(function () {\n    onSort({\n      label: label,\n      value: value\n    });\n  }, [label, value, onSort]);\n  var withSort = typeof sort === \'number\';\n  var classNames = classnames_default()(data_table_constants_cssClasses.HEADER_CELL, (_classnames = {}, DataTableHeaderCell_defineProperty(_classnames, data_table_constants_cssClasses.HEADER_CELL_CHECKBOX, checkbox), DataTableHeaderCell_defineProperty(_classnames, data_table_constants_cssClasses.HEADER_CELL_NUMERIC, numeric), DataTableHeaderCell_defineProperty(_classnames, data_table_constants_cssClasses.HEADER_CELL_WITH_SORT, withSort), DataTableHeaderCell_defineProperty(_classnames, data_table_constants_cssClasses.HEADER_CELL_SORTED, sort === 1 || sort === -1), DataTableHeaderCell_defineProperty(_classnames, data_table_constants_cssClasses.HEADER_CELL_SORTED_DESC, sort === -1), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, DataTableHeaderCell_objectSpread(DataTableHeaderCell_objectSpread({\n    ref: ref,\n    className: classNames,\n    role: role,\n    scope: scope\n  }, props), {}, {\n    children: withSort ? /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: data_table_constants_cssClasses.HEADER_CELL_WRAPPER,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: data_table_constants_cssClasses.HEADER_CELL_LABEL,\n        children: children\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: sortIconButton,\n        fallback: icon_button_IconButton,\n        className: data_table_constants_cssClasses.SORT_ICON_BUTTON,\n        onClick: handleSortIconClick\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: data_table_constants_cssClasses.SORT_STATUS_LABEL,\n        "aria-hidden": "true"\n      })]\n    }) : checkbox ? /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      className: data_table_constants_cssClasses.HEADER_ROW_CHECKBOX\n    }) : children\n  }));\n});\nDataTableHeaderCell.displayName = \'MDCDataTableHeaderCell\';\nDataTableHeaderCell.propTypes = {\n  value: (prop_types_default()).any,\n  label: (prop_types_default()).string,\n  numeric: (prop_types_default()).bool,\n  checkbox: (prop_types_default()).bool,\n  sort: prop_types_default().oneOf([-1, 0, 1]),\n  sortIconButton: (prop_types_default()).node,\n  onSort: (prop_types_default()).func\n};\n/* harmony default export */ const data_table_DataTableHeaderCell = (DataTableHeaderCell);\n;// CONCATENATED MODULE: ./src/data-table/DataTableHeaderRow.jsx\nvar DataTableHeaderRow_excluded = ["className"];\n\nfunction DataTableHeaderRow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableHeaderRow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableHeaderRow_ownKeys(Object(source), true).forEach(function (key) { DataTableHeaderRow_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableHeaderRow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableHeaderRow_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTableHeaderRow_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTableHeaderRow_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTableHeaderRow_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar DataTableHeaderRow = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var className = _ref.className,\n      props = DataTableHeaderRow_objectWithoutProperties(_ref, DataTableHeaderRow_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.HEADER_ROW, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("tr", DataTableHeaderRow_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nDataTableHeaderRow.displayName = \'MDCDataTableHeaderRow\';\n/* harmony default export */ const data_table_DataTableHeaderRow = (DataTableHeaderRow);\n;// CONCATENATED MODULE: ./src/data-table/DataTableRow.jsx\nvar DataTableRow_excluded = ["selected", "className"];\n\nfunction DataTableRow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DataTableRow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DataTableRow_ownKeys(Object(source), true).forEach(function (key) { DataTableRow_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DataTableRow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DataTableRow_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DataTableRow_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DataTableRow_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DataTableRow_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar DataTableRow = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      className = _ref.className,\n      props = DataTableRow_objectWithoutProperties(_ref, DataTableRow_excluded);\n\n  var classNames = classnames_default()(data_table_constants_cssClasses.ROW, DataTableRow_defineProperty({}, data_table_constants_cssClasses.ROW_SELECTED, selected), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("tr", DataTableRow_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nDataTableRow.displayName = \'MDCDataTableRow\';\nDataTableRow.propTypes = {\n  selected: (prop_types_default()).bool\n};\n/* harmony default export */ const data_table_DataTableRow = (DataTableRow);\n;// CONCATENATED MODULE: ./src/data-table/index.js\n\n\n\n\n\n\n\n\n\ndata_table_DataTable.Cell = data_table_DataTableCell;\ndata_table_DataTable.Content = data_table_DataTableContent;\ndata_table_DataTable.Footer = data_table_DataTableFooter;\ndata_table_DataTable.Header = data_table_DataTableHeader;\ndata_table_DataTable.HeaderCell = data_table_DataTableHeaderCell;\ndata_table_DataTable.HeaderRow = data_table_DataTableHeaderRow;\ndata_table_DataTable.Pagination = data_table_DataTablePagination;\ndata_table_DataTable.Row = data_table_DataTableRow;\n\n;// CONCATENATED MODULE: ./src/dialog/constants.js\nvar dialog_constants_numbers = {\n  DIALOG_ANIMATION_OPEN_TIME_MS: 150,\n  DIALOG_ANIMATION_CLOSE_TIME_MS: 75,\n  DEFAULT_ACTIONS_HEIGHT: 52\n};\nvar dialog_constants_cssClasses = {\n  ROOT: \'mdc-dialog\',\n  HEADER: \'mdc-dialog__header\',\n  TITLE: \'mdc-dialog__title\',\n  CLOSE: \'mdc-dialog__close\',\n  CONTENT: \'mdc-dialog__content\',\n  CONTAINER: \'mdc-dialog__container\',\n  ACTIONS: \'mdc-dialog__actions\',\n  BUTTON: \'mdc-dialog__button\',\n  SURFACE: \'mdc-dialog__surface\',\n  SCRIM: \'mdc-dialog__scrim\',\n  OPEN: \'mdc-dialog--open\',\n  OPENING: \'mdc-dialog--opening\',\n  CLOSING: \'mdc-dialog--closing\',\n  FULLSCREEN: \'mdc-dialog--fullscreen\',\n  SHEET: \'mdc-dialog--sheet\',\n  SCROLLABLE: \'mdc-dialog--scrollable\',\n  STACKED: \'mdc-dialog--stacked\',\n  NO_CONTENT_PADDING: \'mdc-dialog--no-content-padding\',\n  SCROLL_DIVIDER_HEADER: \'mdc-dialog-scroll-divider-header\',\n  SCROLL_DIVIDER_FOOTER: \'mdc-dialog-scroll-divider-footer\',\n  SCROLL_LOCK: \'mdc-dialog-scroll-lock\'\n};\n;// CONCATENATED MODULE: ./src/dialog/DialogHeader.jsx\nvar DialogHeader_excluded = ["title", "closeIcon", "fullscreen", "onClose", "children"];\n\nfunction DialogHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DialogHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DialogHeader_ownKeys(Object(source), true).forEach(function (key) { DialogHeader_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DialogHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DialogHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DialogHeader_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DialogHeader_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DialogHeader_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar DialogHeader = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var title = _ref.title,\n      closeIcon = _ref.closeIcon,\n      fullscreen = _ref.fullscreen,\n      onClose = _ref.onClose,\n      children = _ref.children,\n      props = DialogHeader_objectWithoutProperties(_ref, DialogHeader_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", DialogHeader_objectSpread(DialogHeader_objectSpread({\n    ref: ref,\n    className: dialog_constants_cssClasses.HEADER\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: title,\n      fallback: "h2",\n      className: dialog_constants_cssClasses.TITLE\n    }), (fullscreen || closeIcon) && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: closeIcon,\n      fallback: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        icon: "close"\n      }),\n      className: dialog_constants_cssClasses.CLOSE,\n      onClick: onClose\n    }), children]\n  }));\n});\nDialogHeader.displayName = \'MDCDialogHeader\';\n/* harmony default export */ const dialog_DialogHeader = (DialogHeader);\n;// CONCATENATED MODULE: ./src/dialog/DialogContent.jsx\nfunction DialogContent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DialogContent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DialogContent_ownKeys(Object(source), true).forEach(function (key) { DialogContent_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DialogContent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DialogContent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar DialogContent = /*#__PURE__*/(0,react.forwardRef)(function (props, ref) {\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", DialogContent_objectSpread({\n    ref: ref,\n    className: dialog_constants_cssClasses.CONTENT\n  }, props));\n});\nDialogContent.displayName = \'MDCDialogContent\';\n/* harmony default export */ const dialog_DialogContent = (DialogContent);\n;// CONCATENATED MODULE: ./src/dialog/DialogActions.jsx\n\n\n\n\nvar DialogActions = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    ref: ref,\n    className: dialog_constants_cssClasses.ACTIONS,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      className: dialog_constants_cssClasses.BUTTON\n    })\n  });\n});\nDialogActions.displayName = \'MDCDialogActions\';\n/* harmony default export */ const dialog_DialogActions = (DialogActions);\n;// CONCATENATED MODULE: ./src/dialog/Dialog.jsx\nvar Dialog_excluded = ["title", "header", "content", "actions", "closeIcon", "open", "appear", "fullscreen", "persistent", "sheet", "stacked", "autoStackButtons", "noContentPadding", "onClose", "element", "className", "children"];\n\nfunction Dialog_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Dialog_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Dialog_ownKeys(Object(source), true).forEach(function (key) { Dialog_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Dialog_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Dialog_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Dialog_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Dialog_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Dialog_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Dialog = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var title = _ref.title,\n      header = _ref.header,\n      content = _ref.content,\n      actions = _ref.actions,\n      closeIcon = _ref.closeIcon,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      _ref$appear = _ref.appear,\n      appear = _ref$appear === void 0 ? false : _ref$appear,\n      _ref$fullscreen = _ref.fullscreen,\n      fullscreen = _ref$fullscreen === void 0 ? false : _ref$fullscreen,\n      _ref$persistent = _ref.persistent,\n      persistent = _ref$persistent === void 0 ? false : _ref$persistent,\n      _ref$sheet = _ref.sheet,\n      sheet = _ref$sheet === void 0 ? false : _ref$sheet,\n      _ref$stacked = _ref.stacked,\n      stacked = _ref$stacked === void 0 ? false : _ref$stacked,\n      _ref$autoStackButtons = _ref.autoStackButtons,\n      autoStackButtons = _ref$autoStackButtons === void 0 ? false : _ref$autoStackButtons,\n      noContentPadding = _ref.noContentPadding,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? Function.prototype : _ref$onClose,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? content : _ref$children,\n      props = Dialog_objectWithoutProperties(_ref, Dialog_excluded);\n\n  var rootRef = (0,react.useRef)();\n  var contentRef = (0,react.useRef)();\n  var actionsRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  useUpdated(function () {\n    if (persistent) return;\n\n    function handleDocumentKeyDown(event) {\n      if (event.key === \'Escape\' || event.keyCode === 27) {\n        event.stopPropagation();\n        onClose();\n      }\n    }\n\n    if (open) {\n      document.addEventListener(\'keydown\', handleDocumentKeyDown);\n    } else {\n      document.removeEventListener(\'keydown\', handleDocumentKeyDown);\n    }\n\n    return function () {\n      return document.removeEventListener(\'keydown\', handleDocumentKeyDown);\n    };\n  }, [open, persistent, onClose]);\n  useUpdated(function () {\n    if (!contentRef.current || !open) return;\n    var contentElement = contentRef.current;\n    var shouldScroll = contentElement.scrollHeight > contentElement.offsetHeight;\n\n    if (shouldScroll) {\n      rootRef.current.classList.add(dialog_constants_cssClasses.SCROLLABLE);\n    }\n  }, [open]);\n  useUpdated(function () {\n    if (!actionsRef.current || !open || !autoStackButtons) return;\n    var actionsElement = actionsRef.current;\n\n    if (actionsElement.clientHeight > dialog_constants_numbers.DEFAULT_ACTIONS_HEIGHT) {\n      rootRef.current.classList.add(dialog_constants_cssClasses.STACKED);\n    }\n  }, [open, autoStackButtons]);\n  useUpdated(function () {\n    if (!contentRef.current || !fullscreen) return;\n    var contentElement = contentRef.current;\n\n    function handleScroll() {\n      var isScrollAtTop = contentElement.scrollTop === 0;\n      var isScrollAtBottom = Math.ceil(contentElement.scrollHeight - contentElement.scrollTop) === contentElement.clientHeight;\n      rootRef.current.classList.toggle(dialog_constants_cssClasses.SCROLL_DIVIDER_HEADER, !isScrollAtTop);\n      rootRef.current.classList.toggle(dialog_constants_cssClasses.SCROLL_DIVIDER_FOOTER, !isScrollAtBottom);\n    }\n\n    contentElement.addEventListener(\'scroll\', handleScroll);\n\n    if (open) {\n      handleScroll();\n    }\n\n    return function () {\n      return contentElement.removeEventListener(\'scroll\', handleScroll);\n    };\n  }, [open, fullscreen]);\n  useUnmounted(function () {\n    document.body.classList.remove(dialog_constants_cssClasses.SCROLL_LOCK);\n  });\n  var handleEnter = (0,react.useCallback)(function () {\n    document.body.classList.add(dialog_constants_cssClasses.SCROLL_LOCK);\n  }, []);\n  var handleExited = (0,react.useCallback)(function () {\n    document.body.classList.remove(dialog_constants_cssClasses.SCROLL_LOCK);\n  }, []);\n  var handleScrimClick = (0,react.useCallback)(function () {\n    if (persistent) return;\n    onClose();\n  }, [persistent, onClose]);\n  var classNames = classnames_default()(dialog_constants_cssClasses.ROOT, (_classnames = {}, Dialog_defineProperty(_classnames, dialog_constants_cssClasses.FULLSCREEN, fullscreen), Dialog_defineProperty(_classnames, dialog_constants_cssClasses.SHEET, sheet), Dialog_defineProperty(_classnames, dialog_constants_cssClasses.STACKED, stacked), Dialog_defineProperty(_classnames, dialog_constants_cssClasses.NO_CONTENT_PADDING, noContentPadding), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Layer, {\n    modal: true,\n    "in": open,\n    appear: appear,\n    timeout: {\n      enter: dialog_constants_numbers.DIALOG_ANIMATION_OPEN_TIME_MS,\n      exit: dialog_constants_numbers.DIALOG_ANIMATION_CLOSE_TIME_MS\n    },\n    classNames: {\n      appear: dialog_constants_cssClasses.OPENING,\n      appearActive: dialog_constants_cssClasses.OPEN,\n      enter: dialog_constants_cssClasses.OPENING,\n      enterActive: dialog_constants_cssClasses.OPEN,\n      enterDone: dialog_constants_cssClasses.OPEN,\n      exit: dialog_constants_cssClasses.CLOSING\n    },\n    mountOnEnter: true,\n    unmountOnExit: true,\n    onEnter: handleEnter,\n    onExited: handleExited,\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, Dialog_objectSpread(Dialog_objectSpread({\n      ref: rootRef,\n      className: classNames\n    }, props), {}, {\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: dialog_constants_cssClasses.CONTAINER,\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: dialog_constants_cssClasses.SURFACE,\n          role: "alertdialog",\n          "aria-modal": "true",\n          children: [sheet && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n            component: closeIcon,\n            fallback: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n              icon: "close"\n            }),\n            className: dialog_constants_cssClasses.CLOSE,\n            onClick: onClose\n          }), title && /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_DialogHeader, {\n            title: title,\n            closeIcon: closeIcon,\n            fullscreen: fullscreen,\n            onClose: onClose\n          }), (header === null || header === void 0 ? void 0 : header.type) === dialog_DialogHeader && (0,react.cloneElement)(header, {\n            fullscreen: fullscreen,\n            onClose: onClose\n          }), children && ((children === null || children === void 0 ? void 0 : children.type) === dialog_DialogContent ? (0,react.cloneElement)(children, {\n            ref: contentRef\n          }) : /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_DialogContent, {\n            ref: contentRef,\n            children: children\n          })), actions && (actions.type === dialog_DialogActions ? (0,react.cloneElement)(actions, {\n            ref: actionsRef\n          }) : /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_DialogActions, {\n            ref: actionsRef,\n            children: actions\n          }))]\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: dialog_constants_cssClasses.SCRIM,\n        onClick: handleScrimClick\n      })]\n    }))\n  });\n});\nDialog.displayName = \'MDCDialog\';\nDialog.propTypes = {\n  title: (prop_types_default()).node,\n  header: (prop_types_default()).node,\n  content: (prop_types_default()).node,\n  actions: prop_types_default().oneOfType([(prop_types_default()).node, prop_types_default().arrayOf((prop_types_default()).node)]),\n  closeIcon: (prop_types_default()).node,\n  open: (prop_types_default()).bool,\n  appear: (prop_types_default()).bool,\n  fullscreen: (prop_types_default()).bool,\n  persistent: (prop_types_default()).bool,\n  sheet: (prop_types_default()).bool,\n  stacked: (prop_types_default()).bool,\n  autoStackButtons: (prop_types_default()).bool,\n  noContentPadding: (prop_types_default()).bool,\n  onClose: (prop_types_default()).func\n};\n/* harmony default export */ const dialog_Dialog = (Dialog);\n;// CONCATENATED MODULE: ./src/dialog/index.js\n\n\n\n\ndialog_Dialog.Header = dialog_DialogHeader;\ndialog_Dialog.Content = dialog_DialogContent;\ndialog_Dialog.Actions = dialog_DialogActions;\n\n;// CONCATENATED MODULE: ./src/drawer/constants.js\nvar drawer_constants_numbers = {\n  ANIMATION_ENTER_TIME_MS: 250,\n  ANIMATION_EXIT_TIME_MS: 200\n};\nvar drawer_constants_cssClasses = {\n  ROOT: \'mdc-drawer\',\n  DISMISSIBLE: \'mdc-drawer--dismissible\',\n  MODAL: \'mdc-drawer--modal\',\n  OPEN: \'mdc-drawer--open\',\n  ANIMATE: \'mdc-drawer--animate\',\n  OPENING: \'mdc-drawer--opening\',\n  CLOSING: \'mdc-drawer--closing\',\n  CONTENT: \'mdc-drawer__content\',\n  HEADER: \'mdc-drawer__header\',\n  TITLE: \'mdc-drawer__title\',\n  SUBTITLE: \'mdc-drawer__subtitle\',\n  GRAPHIC: \'mdc-drawer__graphic\',\n  APP_CONTENT: \'mdc-drawer-app-content\',\n  SCRIM: \'mdc-drawer-scrim\'\n};\n;// CONCATENATED MODULE: ./src/drawer/Drawer.jsx\nvar Drawer_excluded = ["open", "appear", "dismissible", "modal", "appContentSelector", "onClose", "element", "component", "className", "children"];\n\nfunction Drawer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Drawer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Drawer_ownKeys(Object(source), true).forEach(function (key) { Drawer_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Drawer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Drawer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Drawer_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Drawer_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Drawer_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar Drawer = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      _ref$appear = _ref.appear,\n      appear = _ref$appear === void 0 ? true : _ref$appear,\n      _ref$dismissible = _ref.dismissible,\n      dismissible = _ref$dismissible === void 0 ? false : _ref$dismissible,\n      _ref$modal = _ref.modal,\n      modal = _ref$modal === void 0 ? false : _ref$modal,\n      appContentSelector = _ref.appContentSelector,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? Function.prototype : _ref$onClose,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'aside\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = Drawer_objectWithoutProperties(_ref, Drawer_excluded);\n\n  var rootRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  (0,react.useEffect)(function () {\n    var _rootRef$current;\n\n    if (!dismissible) return;\n    var appContentElement = appContentSelector ? document.querySelector(appContentSelector) : (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.nextElementSibling;\n    appContentElement === null || appContentElement === void 0 ? void 0 : appContentElement.classList.add(drawer_constants_cssClasses.APP_CONTENT);\n    return function () {\n      appContentElement === null || appContentElement === void 0 ? void 0 : appContentElement.classList.remove(drawer_constants_cssClasses.APP_CONTENT);\n    };\n  }, [dismissible, appContentSelector]);\n  (0,react.useEffect)(function () {\n    if (!modal) return;\n\n    function handleDocumentKeyDown(event) {\n      if (event.key && event.key === \'Escape\' || event.keyCode === 27) {\n        onClose();\n      }\n    }\n\n    document.addEventListener(\'keydown\', handleDocumentKeyDown);\n    return function () {\n      return document.removeEventListener(\'keydown\', handleDocumentKeyDown);\n    };\n  }, [modal, onClose]);\n  var classNames = classnames_default()(drawer_constants_cssClasses.ROOT, (_classnames = {}, Drawer_defineProperty(_classnames, drawer_constants_cssClasses.DISMISSIBLE, dismissible), Drawer_defineProperty(_classnames, drawer_constants_cssClasses.MODAL, modal), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Layer, {\n    modal: modal,\n    fixed: modal,\n    "in": open,\n    appear: appear,\n    timeout: {\n      enter: drawer_constants_numbers.ANIMATION_ENTER_TIME_MS,\n      exit: drawer_constants_numbers.ANIMATION_EXIT_TIME_MS\n    },\n    classNames: {\n      appear: drawer_constants_cssClasses.OPEN,\n      enter: "".concat(drawer_constants_cssClasses.OPEN, " ").concat(drawer_constants_cssClasses.ANIMATE),\n      enterActive: "".concat(drawer_constants_cssClasses.OPEN, " ").concat(drawer_constants_cssClasses.OPENING),\n      enterDone: drawer_constants_cssClasses.OPEN,\n      exit: "".concat(drawer_constants_cssClasses.OPEN, " ").concat(drawer_constants_cssClasses.CLOSING),\n      exitActive: drawer_constants_cssClasses.CLOSING\n    },\n    mountOnEnter: modal,\n    unmountOnExit: modal,\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Element, Drawer_objectSpread(Drawer_objectSpread({\n        ref: rootRef,\n        className: classNames\n      }, props), {}, {\n        children: children\n      })), modal && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: drawer_constants_cssClasses.SCRIM,\n        onClick: onClose\n      })]\n    })\n  });\n});\nDrawer.displayName = \'MDCDrawer\';\nDrawer.propTypes = {\n  open: (prop_types_default()).bool,\n  appear: (prop_types_default()).bool,\n  dismissible: (prop_types_default()).bool,\n  modal: (prop_types_default()).bool,\n  appContentSelector: (prop_types_default()).string,\n  onClose: (prop_types_default()).func\n};\n/* harmony default export */ const drawer_Drawer = (Drawer);\n;// CONCATENATED MODULE: ./src/drawer/DrawerHeader.jsx\nvar DrawerHeader_excluded = ["title", "subtitle", "graphic", "element", "children"];\n\nfunction DrawerHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DrawerHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DrawerHeader_ownKeys(Object(source), true).forEach(function (key) { DrawerHeader_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DrawerHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DrawerHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DrawerHeader_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DrawerHeader_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DrawerHeader_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar DrawerHeader = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var title = _ref.title,\n      subtitle = _ref.subtitle,\n      graphic = _ref.graphic,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'header\' : _ref$element,\n      children = _ref.children,\n      props = DrawerHeader_objectWithoutProperties(_ref, DrawerHeader_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, DrawerHeader_objectSpread(DrawerHeader_objectSpread({\n    ref: ref,\n    className: drawer_constants_cssClasses.HEADER\n  }, props), {}, {\n    children: [graphic && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: graphic,\n      className: drawer_constants_cssClasses.GRAPHIC\n    }), title && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: title,\n      fallback: "h3",\n      className: drawer_constants_cssClasses.TITLE\n    }), subtitle && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: subtitle,\n      fallback: "h6",\n      className: drawer_constants_cssClasses.SUBTITLE\n    }), children]\n  }));\n});\nDrawerHeader.displayName = \'MDCDrawerHeader\';\nDrawerHeader.propTypes = {\n  title: (prop_types_default()).node,\n  subtitle: (prop_types_default()).node,\n  graphic: (prop_types_default()).element\n};\n/* harmony default export */ const drawer_DrawerHeader = (DrawerHeader);\n;// CONCATENATED MODULE: ./src/drawer/DrawerContent.jsx\nvar DrawerContent_excluded = ["element"];\n\nfunction DrawerContent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction DrawerContent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DrawerContent_ownKeys(Object(source), true).forEach(function (key) { DrawerContent_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DrawerContent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction DrawerContent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction DrawerContent_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = DrawerContent_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction DrawerContent_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\nvar DrawerContent = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      props = DrawerContent_objectWithoutProperties(_ref, DrawerContent_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, DrawerContent_objectSpread({\n    ref: ref,\n    className: drawer_constants_cssClasses.CONTENT\n  }, props));\n});\nDrawerContent.displayName = \'MDCDrawerContent\';\n/* harmony default export */ const drawer_DrawerContent = (DrawerContent);\n;// CONCATENATED MODULE: ./src/drawer/index.js\n\n\n\ndrawer_Drawer.Header = drawer_DrawerHeader;\ndrawer_Drawer.Content = drawer_DrawerContent;\n\n;// CONCATENATED MODULE: ./src/elevation/constants.js\nvar elevation_constants_cssClasses = {\n  ROOT: \'mdc-elevation\',\n  Z: \'mdc-elevation--z\',\n  TRANSITION: \'mdc-elevation-transition\'\n};\n;// CONCATENATED MODULE: ./src/elevation/Elevation.jsx\nvar Elevation_excluded = ["z", "transition", "element", "component", "className"];\n\nfunction Elevation_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Elevation_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Elevation_ownKeys(Object(source), true).forEach(function (key) { Elevation_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Elevation_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Elevation_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Elevation_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Elevation_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Elevation_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar Elevation = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$z = _ref.z,\n      z = _ref$z === void 0 ? 0 : _ref$z,\n      _ref$transition = _ref.transition,\n      transition = _ref$transition === void 0 ? false : _ref$transition,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = Elevation_objectWithoutProperties(_ref, Elevation_excluded);\n\n  var classNames = classnames_default()(elevation_constants_cssClasses.ROOT, (_classnames = {}, Elevation_defineProperty(_classnames, "".concat(elevation_constants_cssClasses.Z).concat(z), z), Elevation_defineProperty(_classnames, elevation_constants_cssClasses.TRANSITION, transition), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Elevation_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nElevation.displayName = \'MDCElevation\';\n/* harmony default export */ const elevation_Elevation = (Elevation);\n;// CONCATENATED MODULE: ./src/elevation/index.js\n\n;// CONCATENATED MODULE: ./src/fab/constants.js\nvar fab_constants_cssClasses = {\n  ROOT: \'mdc-fab\',\n  MINI: \'mdc-fab--mini\',\n  EXTENDED: \'mdc-fab--extended\',\n  EXITED: \'mdc-fab--exited\',\n  ICON: \'mdc-fab__icon\',\n  LABEL: \'mdc-fab__label\',\n  RIPPLE: \'mdc-fab__ripple\'\n};\n;// CONCATENATED MODULE: ./src/fab/FAB.jsx\nvar FAB_excluded = ["icon", "label", "leadingIcon", "trailingIcon", "mini", "exited", "element", "component", "className", "children"];\n\nfunction FAB_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction FAB_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FAB_ownKeys(Object(source), true).forEach(function (key) { FAB_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FAB_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction FAB_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction FAB_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = FAB_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction FAB_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar FAB = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var icon = _ref.icon,\n      label = _ref.label,\n      _ref$leadingIcon = _ref.leadingIcon,\n      leadingIcon = _ref$leadingIcon === void 0 ? icon : _ref$leadingIcon,\n      trailingIcon = _ref.trailingIcon,\n      _ref$mini = _ref.mini,\n      mini = _ref$mini === void 0 ? false : _ref$mini,\n      _ref$exited = _ref.exited,\n      exited = _ref$exited === void 0 ? false : _ref$exited,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'button\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? label : _ref$children,\n      props = FAB_objectWithoutProperties(_ref, FAB_excluded);\n\n  var classNames = classnames_default()(fab_constants_cssClasses.ROOT, (_classnames = {}, FAB_defineProperty(_classnames, fab_constants_cssClasses.MINI, mini), FAB_defineProperty(_classnames, fab_constants_cssClasses.EXTENDED, label), FAB_defineProperty(_classnames, fab_constants_cssClasses.EXITED, exited), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, FAB_objectSpread(FAB_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: fab_constants_cssClasses.RIPPLE\n    }), leadingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: leadingIcon,\n      fallback: icon_Icon,\n      className: fab_constants_cssClasses.ICON\n    }), children && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: fab_constants_cssClasses.LABEL,\n      children: children\n    }), trailingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: trailingIcon,\n      fallback: icon_Icon,\n      className: fab_constants_cssClasses.ICON\n    })]\n  }));\n});\nFAB.displayName = \'MDCFAB\';\nFAB.propTypes = {\n  icon: (prop_types_default()).node,\n  label: (prop_types_default()).node,\n  leadingIcon: (prop_types_default()).node,\n  trailingIcon: (prop_types_default()).node,\n  mini: (prop_types_default()).bool,\n  exited: (prop_types_default()).bool\n};\n/* harmony default export */ const fab_FAB = (FAB);\n;// CONCATENATED MODULE: ./src/fab/index.js\n\n;// CONCATENATED MODULE: ./src/form-field/constants.js\nvar form_field_constants_cssClasses = {\n  ROOT: \'mdc-form-field\',\n  ALIGN_END: \'mdc-form-field--align-end\',\n  NOWRAP: \'mdc-form-field--nowrap\',\n  SPACE_BETWEEN: \'mdc-form-field--space-between\'\n};\n;// CONCATENATED MODULE: ./src/form-field/FormField.jsx\nvar FormField_excluded = ["label", "alignEnd", "nowrap", "spaceBetween", "element", "className", "children"];\n\nfunction FormField_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction FormField_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FormField_ownKeys(Object(source), true).forEach(function (key) { FormField_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FormField_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction FormField_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction FormField_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = FormField_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction FormField_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar FormField = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var label = _ref.label,\n      _ref$alignEnd = _ref.alignEnd,\n      alignEnd = _ref$alignEnd === void 0 ? false : _ref$alignEnd,\n      _ref$nowrap = _ref.nowrap,\n      nowrap = _ref$nowrap === void 0 ? false : _ref$nowrap,\n      _ref$spaceBetween = _ref.spaceBetween,\n      spaceBetween = _ref$spaceBetween === void 0 ? false : _ref$spaceBetween,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      children = _ref.children,\n      props = FormField_objectWithoutProperties(_ref, FormField_excluded);\n\n  var classNames = classnames_default()(form_field_constants_cssClasses.ROOT, (_classnames = {}, FormField_defineProperty(_classnames, form_field_constants_cssClasses.ALIGN_END, alignEnd), FormField_defineProperty(_classnames, form_field_constants_cssClasses.NOWRAP, nowrap), FormField_defineProperty(_classnames, form_field_constants_cssClasses.SPACE_BETWEEN, spaceBetween), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, FormField_objectSpread(FormField_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [children, label && /*#__PURE__*/(0,jsx_runtime.jsx)("label", {\n      htmlFor: children.props.id,\n      children: label\n    })]\n  }));\n});\nFormField.displayName = \'MDCFormField\';\nFormField.propTypes = {\n  label: (prop_types_default()).node,\n  alignEnd: (prop_types_default()).bool,\n  nowrap: (prop_types_default()).bool,\n  spaceBetween: (prop_types_default()).bool,\n  children: (prop_types_default()).any.isRequired\n};\n/* harmony default export */ const form_field_FormField = (FormField);\n;// CONCATENATED MODULE: ./src/form-field/index.js\n\n;// CONCATENATED MODULE: ./src/image-list/constants.js\nvar image_list_constants_cssClasses = {\n  IMAGE_LIST: \'mdc-image-list\',\n  IMAGE_LIST_MASONRY: \'mdc-image-list--masonry\',\n  IMAGE_LIST_WITH_TEXT_PROTECTION: \'mdc-image-list--with-text-protection\',\n  IMAGE_LIST_ITEM: \'mdc-image-list__item\',\n  IMAGE_LIST_IMAGE_ASPECT_CONTAINER: \'mdc-image-list__image-aspect-container\',\n  IMAGE_LIST_IMAGE: \'mdc-image-list__image\',\n  IMAGE_LIST_SUPPORTING: \'mdc-image-list__supporting\',\n  IMAGE_LIST_LABEL: \'mdc-image-list__label\'\n};\n;// CONCATENATED MODULE: ./src/image-list/ImageListItem.jsx\nvar ImageListItem_excluded = ["imageSrc", "label", "fixedAspect", "element", "className"];\n\nfunction ImageListItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ImageListItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ImageListItem_ownKeys(Object(source), true).forEach(function (key) { ImageListItem_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ImageListItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ImageListItem_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ImageListItem_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ImageListItem_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ImageListItem_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar ImageListItem = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var imageSrc = _ref.imageSrc,\n      label = _ref.label,\n      _ref$fixedAspect = _ref.fixedAspect,\n      fixedAspect = _ref$fixedAspect === void 0 ? true : _ref$fixedAspect,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'li\' : _ref$element,\n      className = _ref.className,\n      props = ImageListItem_objectWithoutProperties(_ref, ImageListItem_excluded);\n\n  var classNames = classnames_default()(image_list_constants_cssClasses.IMAGE_LIST_ITEM, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, ImageListItem_objectSpread(ImageListItem_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [fixedAspect ? /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: image_list_constants_cssClasses.IMAGE_LIST_IMAGE_ASPECT_CONTAINER,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n        className: image_list_constants_cssClasses.IMAGE_LIST_IMAGE,\n        src: imageSrc,\n        alt: label\n      })\n    }) : /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n      className: image_list_constants_cssClasses.IMAGE_LIST_IMAGE,\n      src: imageSrc,\n      alt: label\n    }), label && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: image_list_constants_cssClasses.IMAGE_LIST_SUPPORTING,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: image_list_constants_cssClasses.IMAGE_LIST_LABEL,\n        children: label\n      })\n    })]\n  }));\n});\nImageListItem.displayName = \'MDCImageListItem\';\nImageListItem.propTypes = {\n  imageSrc: (prop_types_default()).string,\n  label: (prop_types_default()).node,\n  fixedAspect: (prop_types_default()).bool\n};\n/* harmony default export */ const image_list_ImageListItem = (ImageListItem);\n;// CONCATENATED MODULE: ./src/image-list/ImageList.jsx\nvar ImageList_excluded = ["items", "masonry", "withTextProtection", "element", "className", "children"];\n\nfunction ImageList_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction ImageList_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ImageList_ownKeys(Object(source), true).forEach(function (key) { ImageList_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ImageList_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction ImageList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ImageList_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ImageList_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ImageList_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar ImageList = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var items = _ref.items,\n      _ref$masonry = _ref.masonry,\n      masonry = _ref$masonry === void 0 ? false : _ref$masonry,\n      _ref$withTextProtecti = _ref.withTextProtection,\n      withTextProtection = _ref$withTextProtecti === void 0 ? false : _ref$withTextProtecti,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'ul\' : _ref$element,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? items === null || items === void 0 ? void 0 : items.map(function (item) {\n    return (0,react.createElement)(image_list_ImageListItem, item);\n  }) : _ref$children,\n      props = ImageList_objectWithoutProperties(_ref, ImageList_excluded);\n\n  var classNames = classnames_default()(image_list_constants_cssClasses.IMAGE_LIST, (_classnames = {}, ImageList_defineProperty(_classnames, image_list_constants_cssClasses.IMAGE_LIST_MASONRY, masonry), ImageList_defineProperty(_classnames, image_list_constants_cssClasses.IMAGE_LIST_WITH_TEXT_PROTECTION, withTextProtection), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, ImageList_objectSpread(ImageList_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: react.Children.map(children, function (child) {\n      return (0,react.cloneElement)(child, {\n        fixedAspect: masonry ? false : undefined\n      });\n    })\n  }));\n});\nImageList.displayName = \'MDCImageList\';\nImageList.propTypes = {\n  items: (prop_types_default()).array,\n  masonry: (prop_types_default()).bool,\n  withTextProtection: (prop_types_default()).bool\n};\n/* harmony default export */ const image_list_ImageList = (ImageList);\n;// CONCATENATED MODULE: ./src/image-list/index.js\n\n\nimage_list_ImageList.Item = image_list_ImageListItem;\n\n;// CONCATENATED MODULE: ./src/layout/constants.js\nvar layout_constants_cssClasses = {\n  ROOT: \'mdc-layout\',\n  ROW: \'mdc-layout--row\',\n  COLUMN: \'mdc-layout--column\',\n  DIRECTION: \'mdc-layout--direction\',\n  WRAP: \'mdc-layout--wrap\',\n  WRAP_REVERSE: \'mdc-layout--wrap-reverse\',\n  ALIGN_ITEMS: \'mdc-layout--align-items\',\n  ALIGN_SELF: \'mdc-layout--align-self\',\n  JUSTIFY_CONTENT: \'mdc-layout--justify-content\'\n};\n;// CONCATENATED MODULE: ./src/layout/Layout.jsx\nvar Layout_excluded = ["row", "column", "direction", "wrap", "alignItems", "alignSelf", "justifyContent", "element", "component", "className"];\n\nfunction Layout_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Layout_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Layout_ownKeys(Object(source), true).forEach(function (key) { Layout_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Layout_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Layout_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Layout_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Layout_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Layout_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar Layout = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var row = _ref.row,\n      column = _ref.column,\n      direction = _ref.direction,\n      wrap = _ref.wrap,\n      alignItems = _ref.alignItems,\n      alignSelf = _ref.alignSelf,\n      justifyContent = _ref.justifyContent,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = Layout_objectWithoutProperties(_ref, Layout_excluded);\n\n  var classNames = classnames_default()(layout_constants_cssClasses.ROOT, (_classnames = {}, Layout_defineProperty(_classnames, layout_constants_cssClasses.ROW, row), Layout_defineProperty(_classnames, layout_constants_cssClasses.COLUMN, column), Layout_defineProperty(_classnames, "".concat(layout_constants_cssClasses.DIRECTION, "--").concat(direction), direction), Layout_defineProperty(_classnames, "".concat(layout_constants_cssClasses.ALIGN_ITEMS, "--").concat(alignItems), alignItems), Layout_defineProperty(_classnames, "".concat(layout_constants_cssClasses.ALIGN_SELF, "--").concat(alignSelf), alignSelf), Layout_defineProperty(_classnames, "".concat(layout_constants_cssClasses.JUSTIFY_CONTENT, "--").concat(justifyContent), justifyContent), Layout_defineProperty(_classnames, layout_constants_cssClasses.WRAP, wrap === true), Layout_defineProperty(_classnames, layout_constants_cssClasses.WRAP_REVERSE, wrap === \'reverse\'), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Layout_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nLayout.displayName = \'MDCLayout\';\nLayout.propTypes = {\n  row: (prop_types_default()).bool,\n  column: (prop_types_default()).bool,\n  direction: prop_types_default().oneOf([\'row\', \'column\']),\n  wrap: prop_types_default().oneOfType([(prop_types_default()).bool, (prop_types_default()).string]),\n  alignItems: prop_types_default().oneOf([\'start\', \'center\', \'end\']),\n  alignSelf: prop_types_default().oneOf([\'start\', \'center\', \'end\']),\n  justifyContent: prop_types_default().oneOf([\'start\', \'center\', \'end\', \'around\', \'between\'])\n};\n/* harmony default export */ const layout_Layout = ((/* unused pure expression or super */ null && (Layout)));\n;// CONCATENATED MODULE: ./src/layout/index.js\n\n;// CONCATENATED MODULE: ./src/layout-grid/constants.js\nvar layout_grid_constants_cssClasses = {\n  ROOT: \'mdc-layout-grid\',\n  ALIGN: \'mdc-layout-grid--align\',\n  FIXED_COLUMN_WIDTH: \'mdc-layout-grid--fixed-column-width\',\n  INNER: \'mdc-layout-grid__inner\',\n  CELL: \'mdc-layout-grid__cell\',\n  CELL_SPAN: \'mdc-layout-grid__cell--span\',\n  CELL_ORDER: \'mdc-layout-grid__cell--order\',\n  CELL_ALIGN: \'mdc-layout-grid__cell--align\'\n};\n;// CONCATENATED MODULE: ./src/layout-grid/LayoutGrid.jsx\nvar LayoutGrid_excluded = ["align", "fixedColumnWidth", "element", "component", "className", "children"];\n\nfunction LayoutGrid_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction LayoutGrid_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LayoutGrid_ownKeys(Object(source), true).forEach(function (key) { LayoutGrid_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LayoutGrid_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction LayoutGrid_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction LayoutGrid_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = LayoutGrid_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction LayoutGrid_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar LayoutGrid = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var align = _ref.align,\n      _ref$fixedColumnWidth = _ref.fixedColumnWidth,\n      fixedColumnWidth = _ref$fixedColumnWidth === void 0 ? false : _ref$fixedColumnWidth,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      component = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = LayoutGrid_objectWithoutProperties(_ref, LayoutGrid_excluded);\n\n  var Element = component;\n  var classNames = classnames_default()(layout_grid_constants_cssClasses.ROOT, (_classnames = {}, LayoutGrid_defineProperty(_classnames, "".concat(layout_grid_constants_cssClasses.ALIGN, "-").concat(align), align), LayoutGrid_defineProperty(_classnames, layout_grid_constants_cssClasses.FIXED_COLUMN_WIDTH, fixedColumnWidth), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, LayoutGrid_objectSpread(LayoutGrid_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: layout_grid_constants_cssClasses.INNER,\n      children: children\n    })\n  }));\n});\nLayoutGrid.displayName = \'MDCLayoutGrid\';\nLayoutGrid.propTypes = {\n  align: prop_types_default().oneOf([\'left\', \'right\']),\n  fixedColumnWidth: (prop_types_default()).bool\n};\n/* harmony default export */ const layout_grid_LayoutGrid = (LayoutGrid);\n;// CONCATENATED MODULE: ./src/layout-grid/LayoutGridCell.jsx\nvar LayoutGridCell_excluded = ["span", "desktop", "tablet", "mobile", "order", "align", "grid", "element", "component", "className", "children"];\n\nfunction LayoutGridCell_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction LayoutGridCell_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LayoutGridCell_ownKeys(Object(source), true).forEach(function (key) { LayoutGridCell_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LayoutGridCell_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction LayoutGridCell_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction LayoutGridCell_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = LayoutGridCell_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction LayoutGridCell_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar LayoutGridCell = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var span = _ref.span,\n      desktop = _ref.desktop,\n      tablet = _ref.tablet,\n      mobile = _ref.mobile,\n      order = _ref.order,\n      align = _ref.align,\n      _ref$grid = _ref.grid,\n      grid = _ref$grid === void 0 ? false : _ref$grid,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      component = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = LayoutGridCell_objectWithoutProperties(_ref, LayoutGridCell_excluded);\n\n  var Element = component;\n  var classNames = classnames_default()(layout_grid_constants_cssClasses.CELL, (_classnames = {}, LayoutGridCell_defineProperty(_classnames, "".concat(layout_grid_constants_cssClasses.CELL_SPAN, "-").concat(span), span), LayoutGridCell_defineProperty(_classnames, "".concat(layout_grid_constants_cssClasses.CELL_SPAN, "-").concat(desktop, "-desktop"), desktop), LayoutGridCell_defineProperty(_classnames, "".concat(layout_grid_constants_cssClasses.CELL_SPAN, "-").concat(tablet, "-tablet"), tablet), LayoutGridCell_defineProperty(_classnames, "".concat(layout_grid_constants_cssClasses.CELL_SPAN, "-").concat(mobile, "-mobile"), mobile), LayoutGridCell_defineProperty(_classnames, "".concat(layout_grid_constants_cssClasses.CELL_ORDER, "-").concat(order), order), LayoutGridCell_defineProperty(_classnames, "".concat(layout_grid_constants_cssClasses.CELL_ALIGN, "-").concat(align), align), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, LayoutGridCell_objectSpread(LayoutGridCell_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: grid ? /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: layout_grid_constants_cssClasses.INNER,\n      children: children\n    }) : children\n  }));\n});\nLayoutGridCell.displayName = \'MDCLayoutGridCell\';\nLayoutGridCell.propTypes = {\n  span: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  desktop: (prop_types_default()).number,\n  tablet: (prop_types_default()).number,\n  mobile: (prop_types_default()).number,\n  order: (prop_types_default()).number,\n  align: prop_types_default().oneOf([\'top\', \'middle\', \'bottom\']),\n  grid: (prop_types_default()).bool\n};\n/* harmony default export */ const layout_grid_LayoutGridCell = (LayoutGridCell);\n;// CONCATENATED MODULE: ./src/layout-grid/index.js\n\n\nlayout_grid_LayoutGrid.Cell = layout_grid_LayoutGridCell;\n\n;// CONCATENATED MODULE: ./src/radio/constants.js\nvar radio_constants_cssClasses = {\n  ROOT: \'mdc-radio\',\n  DISABLED: \'mdc-radio--disabled\',\n  TOUCH: \'mdc-radio--touch\',\n  NATIVE_CONTROL: \'mdc-radio__native-control\',\n  BACKGROUND: \'mdc-radio__background\',\n  OUTER_CIRCLE: \'mdc-radio__outer-circle\',\n  INNER_CIRCLE: \'mdc-radio__inner-circle\',\n  RIPPLE: \'mdc-radio__ripple\'\n};\n;// CONCATENATED MODULE: ./src/radio/Radio.jsx\nvar Radio_excluded = ["value", "checked", "disabled", "touch", "onChange", "className"];\n\nfunction Radio_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Radio_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Radio_ownKeys(Object(source), true).forEach(function (key) { Radio_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Radio_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Radio_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Radio_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Radio_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Radio_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar Radio = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var value = _ref.value,\n      checked = _ref.checked,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$touch = _ref.touch,\n      touch = _ref$touch === void 0 ? false : _ref$touch,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      className = _ref.className,\n      props = Radio_objectWithoutProperties(_ref, Radio_excluded);\n\n  var inputRef = (0,react.useRef)();\n  var handleChange = (0,react.useCallback)(function (event) {\n    onChange(event, event.target.value, event.target);\n  }, [onChange]);\n  var classNames = classnames_default()(radio_constants_cssClasses.ROOT, (_classnames = {}, Radio_defineProperty(_classnames, radio_constants_cssClasses.DISABLED, disabled), Radio_defineProperty(_classnames, radio_constants_cssClasses.TOUCH, touch), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    ref: ref,\n    className: classNames,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("input", Radio_objectSpread({\n      ref: inputRef,\n      className: radio_constants_cssClasses.NATIVE_CONTROL,\n      type: "radio",\n      value: value,\n      checked: checked,\n      disabled: disabled,\n      onChange: handleChange\n    }, props)), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: radio_constants_cssClasses.BACKGROUND,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: radio_constants_cssClasses.OUTER_CIRCLE\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: radio_constants_cssClasses.INNER_CIRCLE\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: radio_constants_cssClasses.RIPPLE\n    })]\n  });\n});\nRadio.displayName = \'MDCRadio\';\nRadio.propTypes = {\n  value: (prop_types_default()).any,\n  checked: (prop_types_default()).bool,\n  disabled: (prop_types_default()).bool,\n  touch: (prop_types_default()).bool,\n  onChange: (prop_types_default()).func\n};\n/* harmony default export */ const radio_Radio = (Radio);\n;// CONCATENATED MODULE: ./src/radio/index.js\n\n;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== "function" && b !== null)\r\n        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o["default"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\r\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === "m") throw new TypeError("Private method is not writable");\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\r\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@material/base/foundation.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCFoundation = /** @class */ (function () {\n    function MDCFoundation(adapter) {\n        if (adapter === void 0) { adapter = {}; }\n        this.adapter = adapter;\n    }\n    Object.defineProperty(MDCFoundation, "cssClasses", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports every\n            // CSS class the foundation class needs as a property. e.g. {ACTIVE: \'mdc-component--active\'}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, "strings", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // semantic strings as constants. e.g. {ARIA_ROLE: \'tablist\'}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, "numbers", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, "defaultAdapter", {\n        get: function () {\n            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n            // validation.\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCFoundation.prototype.init = function () {\n        // Subclasses should override this method to perform initialization routines (registering events, etc.)\n    };\n    MDCFoundation.prototype.destroy = function () {\n        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n    };\n    return MDCFoundation;\n}());\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const foundation = ((/* unused pure expression or super */ null && (MDCFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// CONCATENATED MODULE: ./node_modules/@material/base/component.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\nvar MDCComponent = /** @class */ (function () {\n    function MDCComponent(root, foundation) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        this.root = root;\n        this.initialize.apply(this, __spreadArray([], __read(args)));\n        // Note that we initialize foundation here and not within the constructor\'s\n        // default param so that this.root is defined and can be used within the\n        // foundation class.\n        this.foundation =\n            foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation.init();\n        this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n        // returns an instantiated component with its root set to that element. Also note that in the cases of\n        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n        // from getDefaultFoundation().\n        return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n    MDCComponent.prototype.initialize = function () {\n        var _args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            _args[_i] = arguments[_i];\n        }\n        // Subclasses can override this to do any additional setup work that would be considered part of a\n        // "constructor". Essentially, it is a hook into the parent constructor before the foundation is\n        // initialized. Any additional arguments besides root and foundation will be passed in here.\n    };\n    MDCComponent.prototype.getDefaultFoundation = function () {\n        // Subclasses must override this method to return a properly configured foundation class for the\n        // component.\n        throw new Error(\'Subclasses must override getDefaultFoundation to return a properly configured \' +\n            \'foundation class\');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n        // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n        // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n        // Subclasses may implement this method to release any resources / deregister any listeners they have\n        // attached. An example of this might be deregistering a resize event from the window object.\n        this.foundation.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n        this.root.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n        this.root.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n        if (shouldBubble === void 0) { shouldBubble = false; }\n        var evt;\n        if (typeof CustomEvent === \'function\') {\n            evt = new CustomEvent(evtType, {\n                bubbles: shouldBubble,\n                detail: evtData,\n            });\n        }\n        else {\n            evt = document.createEvent(\'CustomEvent\');\n            evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n        }\n        this.root.dispatchEvent(evt);\n    };\n    return MDCComponent;\n}());\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const component = ((/* unused pure expression or super */ null && (MDCComponent)));\n//# sourceMappingURL=component.js.map\n;// CONCATENATED MODULE: ./node_modules/@material/dom/events.js\n/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Determine whether the current browser supports passive event listeners, and\n * if so, use them.\n */\nfunction applyPassive(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    return supportsPassiveOption(globalObj) ?\n        { passive: true } :\n        false;\n}\nfunction supportsPassiveOption(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    // See\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n    var passiveSupported = false;\n    try {\n        var options = {\n            // This function will be called when the browser\n            // attempts to access the passive property.\n            get passive() {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        var handler = function () { };\n        globalObj.document.addEventListener(\'test\', handler, options);\n        globalObj.document.removeEventListener(\'test\', handler, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n    return passiveSupported;\n}\n//# sourceMappingURL=events.js.map\n;// CONCATENATED MODULE: ./node_modules/@material/dom/ponyfill.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * @fileoverview A "ponyfill" is a polyfill that doesn\'t modify the global prototype chain.\n * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.\n */\nfunction closest(element, selector) {\n    if (element.closest) {\n        return element.closest(selector);\n    }\n    var el = element;\n    while (el) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentElement;\n    }\n    return null;\n}\nfunction matches(element, selector) {\n    var nativeMatches = element.matches\n        || element.webkitMatchesSelector\n        || element.msMatchesSelector;\n    return nativeMatches.call(element, selector);\n}\n/**\n * Used to compute the estimated scroll width of elements. When an element is\n * hidden due to display: none; being applied to a parent element, the width is\n * returned as 0. However, the element will have a true width once no longer\n * inside a display: none context. This method computes an estimated width when\n * the element is hidden or returns the true width when the element is visble.\n * @param {Element} element the element whose width to estimate\n */\nfunction estimateScrollWidth(element) {\n    // Check the offsetParent. If the element inherits display: none from any\n    // parent, the offsetParent property will be null (see\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).\n    // This check ensures we only clone the node when necessary.\n    var htmlEl = element;\n    if (htmlEl.offsetParent !== null) {\n        return htmlEl.scrollWidth;\n    }\n    var clone = htmlEl.cloneNode(true);\n    clone.style.setProperty(\'position\', \'absolute\');\n    clone.style.setProperty(\'transform\', \'translate(-9999px, -9999px)\');\n    document.documentElement.appendChild(clone);\n    var scrollWidth = clone.scrollWidth;\n    document.documentElement.removeChild(clone);\n    return scrollWidth;\n}\n//# sourceMappingURL=ponyfill.js.map\n;// CONCATENATED MODULE: ./node_modules/@material/ripple/constants.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar ripple_constants_cssClasses = {\n    // Ripple is a special case where the "root" component is really a "mixin" of sorts,\n    // given that it\'s an \'upgrade\' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    BG_FOCUSED: \'mdc-ripple-upgraded--background-focused\',\n    FG_ACTIVATION: \'mdc-ripple-upgraded--foreground-activation\',\n    FG_DEACTIVATION: \'mdc-ripple-upgraded--foreground-deactivation\',\n    ROOT: \'mdc-ripple-upgraded\',\n    UNBOUNDED: \'mdc-ripple-upgraded--unbounded\',\n};\nvar constants_strings = {\n    VAR_FG_SCALE: \'--mdc-ripple-fg-scale\',\n    VAR_FG_SIZE: \'--mdc-ripple-fg-size\',\n    VAR_FG_TRANSLATE_END: \'--mdc-ripple-fg-translate-end\',\n    VAR_FG_TRANSLATE_START: \'--mdc-ripple-fg-translate-start\',\n    VAR_LEFT: \'--mdc-ripple-left\',\n    VAR_TOP: \'--mdc-ripple-top\',\n};\nvar ripple_constants_numbers = {\n    DEACTIVATION_TIMEOUT_MS: 225,\n    FG_DEACTIVATION_MS: 150,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    PADDING: 10,\n    TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices\n};\n//# sourceMappingURL=constants.js.map\n;// CONCATENATED MODULE: ./node_modules/@material/ripple/util.js\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to\n * detect CSS custom variable support.\n */\nvar supportsCssVariables_;\nfunction supportsCssVariables(windowObj, forceRefresh) {\n    if (forceRefresh === void 0) { forceRefresh = false; }\n    var CSS = windowObj.CSS;\n    var supportsCssVars = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === \'boolean\' && !forceRefresh) {\n        return supportsCssVariables_;\n    }\n    var supportsFunctionPresent = CSS && typeof CSS.supports === \'function\';\n    if (!supportsFunctionPresent) {\n        return false;\n    }\n    var explicitlySupportsCssVars = CSS.supports(\'--css-vars\', \'yes\');\n    // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = (CSS.supports(\'(--css-vars: yes)\') &&\n        CSS.supports(\'color\', \'#00000000\'));\n    supportsCssVars =\n        explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;\n    if (!forceRefresh) {\n        supportsCssVariables_ = supportsCssVars;\n    }\n    return supportsCssVars;\n}\nfunction getNormalizedEventCoords(evt, pageOffset, clientRect) {\n    if (!evt) {\n        return { x: 0, y: 0 };\n    }\n    var x = pageOffset.x, y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY;\n    // Determine touch point relative to the ripple container.\n    if (evt.type === \'touchstart\') {\n        var touchEvent = evt;\n        normalizedX = touchEvent.changedTouches[0].pageX - documentX;\n        normalizedY = touchEvent.changedTouches[0].pageY - documentY;\n    }\n    else {\n        var mouseEvent = evt;\n        normalizedX = mouseEvent.pageX - documentX;\n        normalizedY = mouseEvent.pageY - documentY;\n    }\n    return { x: normalizedX, y: normalizedY };\n}\n//# sourceMappingURL=util.js.map\n;// CONCATENATED MODULE: ./node_modules/@material/ripple/foundation.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\n// Activation events registered on the root element of each instance for activation\nvar ACTIVATION_EVENT_TYPES = [\n    \'touchstart\', \'pointerdown\', \'mousedown\', \'keydown\',\n];\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nvar POINTER_DEACTIVATION_EVENT_TYPES = [\n    \'touchend\', \'pointerup\', \'mouseup\', \'contextmenu\',\n];\n// simultaneous nested activations\nvar activatedTargets = [];\nvar MDCRippleFoundation = /** @class */ (function (_super) {\n    __extends(MDCRippleFoundation, _super);\n    function MDCRippleFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;\n        _this.activationAnimationHasEnded = false;\n        _this.activationTimer = 0;\n        _this.fgDeactivationRemovalTimer = 0;\n        _this.fgScale = \'0\';\n        _this.frame = { width: 0, height: 0 };\n        _this.initialSize = 0;\n        _this.layoutFrame = 0;\n        _this.maxRadius = 0;\n        _this.unboundedCoords = { left: 0, top: 0 };\n        _this.activationState = _this.defaultActivationState();\n        _this.activationTimerCallback = function () {\n            _this.activationAnimationHasEnded = true;\n            _this.runDeactivationUXLogicIfReady();\n        };\n        _this.activateHandler = function (e) {\n            _this.activateImpl(e);\n        };\n        _this.deactivateHandler = function () {\n            _this.deactivateImpl();\n        };\n        _this.focusHandler = function () {\n            _this.handleFocus();\n        };\n        _this.blurHandler = function () {\n            _this.handleBlur();\n        };\n        _this.resizeHandler = function () {\n            _this.layout();\n        };\n        return _this;\n    }\n    Object.defineProperty(MDCRippleFoundation, "cssClasses", {\n        get: function () {\n            return ripple_constants_cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, "strings", {\n        get: function () {\n            return constants_strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, "numbers", {\n        get: function () {\n            return ripple_constants_numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                browserSupportsCssVars: function () { return true; },\n                computeBoundingRect: function () {\n                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });\n                },\n                containsEventTarget: function () { return true; },\n                deregisterDocumentInteractionHandler: function () { return undefined; },\n                deregisterInteractionHandler: function () { return undefined; },\n                deregisterResizeHandler: function () { return undefined; },\n                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },\n                isSurfaceActive: function () { return true; },\n                isSurfaceDisabled: function () { return true; },\n                isUnbounded: function () { return true; },\n                registerDocumentInteractionHandler: function () { return undefined; },\n                registerInteractionHandler: function () { return undefined; },\n                registerResizeHandler: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                updateCssVariable: function () { return undefined; },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCRippleFoundation.prototype.init = function () {\n        var _this = this;\n        var supportsPressRipple = this.supportsPressRipple();\n        this.registerRootHandlers(supportsPressRipple);\n        if (supportsPressRipple) {\n            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter.addClass(ROOT_1);\n                if (_this.adapter.isUnbounded()) {\n                    _this.adapter.addClass(UNBOUNDED_1);\n                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n                    _this.layoutInternal();\n                }\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.destroy = function () {\n        var _this = this;\n        if (this.supportsPressRipple()) {\n            if (this.activationTimer) {\n                clearTimeout(this.activationTimer);\n                this.activationTimer = 0;\n                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n            }\n            if (this.fgDeactivationRemovalTimer) {\n                clearTimeout(this.fgDeactivationRemovalTimer);\n                this.fgDeactivationRemovalTimer = 0;\n                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n            }\n            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter.removeClass(ROOT_2);\n                _this.adapter.removeClass(UNBOUNDED_2);\n                _this.removeCssVars();\n            });\n        }\n        this.deregisterRootHandlers();\n        this.deregisterDeactivationHandlers();\n    };\n    /**\n     * @param evt Optional event containing position information.\n     */\n    MDCRippleFoundation.prototype.activate = function (evt) {\n        this.activateImpl(evt);\n    };\n    MDCRippleFoundation.prototype.deactivate = function () {\n        this.deactivateImpl();\n    };\n    MDCRippleFoundation.prototype.layout = function () {\n        var _this = this;\n        if (this.layoutFrame) {\n            cancelAnimationFrame(this.layoutFrame);\n        }\n        this.layoutFrame = requestAnimationFrame(function () {\n            _this.layoutInternal();\n            _this.layoutFrame = 0;\n        });\n    };\n    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {\n        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n        if (unbounded) {\n            this.adapter.addClass(UNBOUNDED);\n        }\n        else {\n            this.adapter.removeClass(UNBOUNDED);\n        }\n    };\n    MDCRippleFoundation.prototype.handleFocus = function () {\n        var _this = this;\n        requestAnimationFrame(function () { return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });\n    };\n    MDCRippleFoundation.prototype.handleBlur = function () {\n        var _this = this;\n        requestAnimationFrame(function () { return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });\n    };\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     */\n    MDCRippleFoundation.prototype.supportsPressRipple = function () {\n        return this.adapter.browserSupportsCssVars();\n    };\n    MDCRippleFoundation.prototype.defaultActivationState = function () {\n        return {\n            activationEvent: undefined,\n            hasDeactivationUXRun: false,\n            isActivated: false,\n            isProgrammatic: false,\n            wasActivatedByPointer: false,\n            wasElementMadeActive: false,\n        };\n    };\n    /**\n     * supportsPressRipple Passed from init to save a redundant function call\n     */\n    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {\n        var e_1, _a;\n        if (supportsPressRipple) {\n            try {\n                for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {\n                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;\n                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (this.adapter.isUnbounded()) {\n                this.adapter.registerResizeHandler(this.resizeHandler);\n            }\n        }\n        this.adapter.registerInteractionHandler(\'focus\', this.focusHandler);\n        this.adapter.registerInteractionHandler(\'blur\', this.blurHandler);\n    };\n    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {\n        var e_2, _a;\n        if (evt.type === \'keydown\') {\n            this.adapter.registerInteractionHandler(\'keyup\', this.deactivateHandler);\n        }\n        else {\n            try {\n                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {\n                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;\n                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {\n        var e_3, _a;\n        try {\n            for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {\n                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;\n                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        this.adapter.deregisterInteractionHandler(\'focus\', this.focusHandler);\n        this.adapter.deregisterInteractionHandler(\'blur\', this.blurHandler);\n        if (this.adapter.isUnbounded()) {\n            this.adapter.deregisterResizeHandler(this.resizeHandler);\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {\n        var e_4, _a;\n        this.adapter.deregisterInteractionHandler(\'keyup\', this.deactivateHandler);\n        try {\n            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {\n                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;\n                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n    };\n    MDCRippleFoundation.prototype.removeCssVars = function () {\n        var _this = this;\n        var rippleStrings = MDCRippleFoundation.strings;\n        var keys = Object.keys(rippleStrings);\n        keys.forEach(function (key) {\n            if (key.indexOf(\'VAR_\') === 0) {\n                _this.adapter.updateCssVariable(rippleStrings[key], null);\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.activateImpl = function (evt) {\n        var _this = this;\n        if (this.adapter.isSurfaceDisabled()) {\n            return;\n        }\n        var activationState = this.activationState;\n        if (activationState.isActivated) {\n            return;\n        }\n        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n        var previousActivationEvent = this.previousActivationEvent;\n        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;\n        if (isSameInteraction) {\n            return;\n        }\n        activationState.isActivated = true;\n        activationState.isProgrammatic = evt === undefined;\n        activationState.activationEvent = evt;\n        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === \'mousedown\' || evt.type === \'touchstart\' || evt.type === \'pointerdown\');\n        var hasActivatedChild = evt !== undefined &&\n            activatedTargets.length > 0 &&\n            activatedTargets.some(function (target) { return _this.adapter.containsEventTarget(target); });\n        if (hasActivatedChild) {\n            // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n            this.resetActivationState();\n            return;\n        }\n        if (evt !== undefined) {\n            activatedTargets.push(evt.target);\n            this.registerDeactivationHandlers(evt);\n        }\n        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);\n        if (activationState.wasElementMadeActive) {\n            this.animateActivation();\n        }\n        requestAnimationFrame(function () {\n            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n            activatedTargets = [];\n            if (!activationState.wasElementMadeActive\n                && evt !== undefined\n                && (evt.key === \' \' || evt.keyCode === 32)) {\n                // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n                // active states inconsistently when they\'re called within event handling code:\n                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n                // variable is set within a rAF callback for a submit button interaction (#2241).\n                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);\n                if (activationState.wasElementMadeActive) {\n                    _this.animateActivation();\n                }\n            }\n            if (!activationState.wasElementMadeActive) {\n                // Reset activation state immediately if element was not made active.\n                _this.activationState = _this.defaultActivationState();\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {\n        return (evt !== undefined && evt.type === \'keydown\') ?\n            this.adapter.isSurfaceActive() :\n            true;\n    };\n    MDCRippleFoundation.prototype.animateActivation = function () {\n        var _this = this;\n        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;\n        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;\n        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n        this.layoutInternal();\n        var translateStart = \'\';\n        var translateEnd = \'\';\n        if (!this.adapter.isUnbounded()) {\n            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;\n            translateStart = startPoint.x + "px, " + startPoint.y + "px";\n            translateEnd = endPoint.x + "px, " + endPoint.y + "px";\n        }\n        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n        // Cancel any ongoing activation/deactivation animations\n        clearTimeout(this.activationTimer);\n        clearTimeout(this.fgDeactivationRemovalTimer);\n        this.rmBoundedActivationClasses();\n        this.adapter.removeClass(FG_DEACTIVATION);\n        // Force layout in order to re-trigger the animation.\n        this.adapter.computeBoundingRect();\n        this.adapter.addClass(FG_ACTIVATION);\n        this.activationTimer = setTimeout(function () {\n            _this.activationTimerCallback();\n        }, DEACTIVATION_TIMEOUT_MS);\n    };\n    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {\n        var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;\n        var startPoint;\n        if (wasActivatedByPointer) {\n            startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());\n        }\n        else {\n            startPoint = {\n                x: this.frame.width / 2,\n                y: this.frame.height / 2,\n            };\n        }\n        // Center the element around the start point.\n        startPoint = {\n            x: startPoint.x - (this.initialSize / 2),\n            y: startPoint.y - (this.initialSize / 2),\n        };\n        var endPoint = {\n            x: (this.frame.width / 2) - (this.initialSize / 2),\n            y: (this.frame.height / 2) - (this.initialSize / 2),\n        };\n        return { startPoint: startPoint, endPoint: endPoint };\n    };\n    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {\n        var _this = this;\n        // This method is called both when a pointing device is released, and when the activation animation ends.\n        // The deactivation animation should only run after both of those occur.\n        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n        var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;\n        var activationHasEnded = hasDeactivationUXRun || !isActivated;\n        if (activationHasEnded && this.activationAnimationHasEnded) {\n            this.rmBoundedActivationClasses();\n            this.adapter.addClass(FG_DEACTIVATION);\n            this.fgDeactivationRemovalTimer = setTimeout(function () {\n                _this.adapter.removeClass(FG_DEACTIVATION);\n            }, ripple_constants_numbers.FG_DEACTIVATION_MS);\n        }\n    };\n    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {\n        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n        this.adapter.removeClass(FG_ACTIVATION);\n        this.activationAnimationHasEnded = false;\n        this.adapter.computeBoundingRect();\n    };\n    MDCRippleFoundation.prototype.resetActivationState = function () {\n        var _this = this;\n        this.previousActivationEvent = this.activationState.activationEvent;\n        this.activationState = this.defaultActivationState();\n        // Touch devices may fire additional events for the same interaction within a short time.\n        // Store the previous event until it\'s safe to assume that subsequent events are for new interactions.\n        setTimeout(function () { return _this.previousActivationEvent = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n    };\n    MDCRippleFoundation.prototype.deactivateImpl = function () {\n        var _this = this;\n        var activationState = this.activationState;\n        // This can happen in scenarios such as when you have a keyup event that blurs the element.\n        if (!activationState.isActivated) {\n            return;\n        }\n        var state = __assign({}, activationState);\n        if (activationState.isProgrammatic) {\n            requestAnimationFrame(function () {\n                _this.animateDeactivation(state);\n            });\n            this.resetActivationState();\n        }\n        else {\n            this.deregisterDeactivationHandlers();\n            requestAnimationFrame(function () {\n                _this.activationState.hasDeactivationUXRun = true;\n                _this.animateDeactivation(state);\n                _this.resetActivationState();\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {\n        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;\n        if (wasActivatedByPointer || wasElementMadeActive) {\n            this.runDeactivationUXLogicIfReady();\n        }\n    };\n    MDCRippleFoundation.prototype.layoutInternal = function () {\n        var _this = this;\n        this.frame = this.adapter.computeBoundingRect();\n        var maxDim = Math.max(this.frame.height, this.frame.width);\n        // Surface diameter is treated differently for unbounded vs. bounded ripples.\n        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface\'s longest diameter\n        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface\'s border via\n        // `overflow: hidden`.\n        var getBoundedRadius = function () {\n            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));\n            return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n        };\n        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();\n        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n        // Unbounded ripple size should always be even number to equally center align.\n        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {\n            this.initialSize = initialSize - 1;\n        }\n        else {\n            this.initialSize = initialSize;\n        }\n        this.fgScale = "" + this.maxRadius / this.initialSize;\n        this.updateLayoutCssVars();\n    };\n    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {\n        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;\n        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");\n        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);\n        if (this.adapter.isUnbounded()) {\n            this.unboundedCoords = {\n                left: Math.round((this.frame.width / 2) - (this.initialSize / 2)),\n                top: Math.round((this.frame.height / 2) - (this.initialSize / 2)),\n            };\n            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");\n            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");\n        }\n    };\n    return MDCRippleFoundation;\n}(MDCFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const ripple_foundation = ((/* unused pure expression or super */ null && (MDCRippleFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// CONCATENATED MODULE: ./node_modules/@material/ripple/component.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\n\n\nvar MDCRipple = /** @class */ (function (_super) {\n    __extends(MDCRipple, _super);\n    function MDCRipple() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.disabled = false;\n        return _this;\n    }\n    MDCRipple.attachTo = function (root, opts) {\n        if (opts === void 0) { opts = {\n            isUnbounded: undefined\n        }; }\n        var ripple = new MDCRipple(root);\n        // Only override unbounded behavior if option is explicitly specified\n        if (opts.isUnbounded !== undefined) {\n            ripple.unbounded = opts.isUnbounded;\n        }\n        return ripple;\n    };\n    MDCRipple.createAdapter = function (instance) {\n        return {\n            addClass: function (className) { return instance.root.classList.add(className); },\n            browserSupportsCssVars: function () { return supportsCssVariables(window); },\n            computeBoundingRect: function () { return instance.root.getBoundingClientRect(); },\n            containsEventTarget: function (target) { return instance.root.contains(target); },\n            deregisterDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterInteractionHandler: function (evtType, handler) {\n                return instance.root\n                    .removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterResizeHandler: function (handler) {\n                return window.removeEventListener(\'resize\', handler);\n            },\n            getWindowPageOffset: function () {\n                return ({ x: window.pageXOffset, y: window.pageYOffset });\n            },\n            isSurfaceActive: function () { return matches(instance.root, \':active\'); },\n            isSurfaceDisabled: function () { return Boolean(instance.disabled); },\n            isUnbounded: function () { return Boolean(instance.unbounded); },\n            registerDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.addEventListener(evtType, handler, applyPassive());\n            },\n            registerInteractionHandler: function (evtType, handler) {\n                return instance.root\n                    .addEventListener(evtType, handler, applyPassive());\n            },\n            registerResizeHandler: function (handler) {\n                return window.addEventListener(\'resize\', handler);\n            },\n            removeClass: function (className) { return instance.root.classList.remove(className); },\n            updateCssVariable: function (varName, value) {\n                return instance.root.style.setProperty(varName, value);\n            },\n        };\n    };\n    Object.defineProperty(MDCRipple.prototype, "unbounded", {\n        get: function () {\n            return Boolean(this.isUnbounded);\n        },\n        set: function (unbounded) {\n            this.isUnbounded = Boolean(unbounded);\n            this.setUnbounded();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCRipple.prototype.activate = function () {\n        this.foundation.activate();\n    };\n    MDCRipple.prototype.deactivate = function () {\n        this.foundation.deactivate();\n    };\n    MDCRipple.prototype.layout = function () {\n        this.foundation.layout();\n    };\n    MDCRipple.prototype.getDefaultFoundation = function () {\n        return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n    };\n    MDCRipple.prototype.initialSyncWithDOM = function () {\n        var root = this.root;\n        this.isUnbounded = \'mdcRippleIsUnbounded\' in root.dataset;\n    };\n    /**\n     * Closure Compiler throws an access control error when directly accessing a\n     * protected or private property inside a getter/setter, like unbounded above.\n     * By accessing the protected property inside a method, we solve that problem.\n     * That\'s why this function exists.\n     */\n    MDCRipple.prototype.setUnbounded = function () {\n        this.foundation.setUnbounded(Boolean(this.isUnbounded));\n    };\n    return MDCRipple;\n}(MDCComponent));\n\n//# sourceMappingURL=component.js.map\n;// CONCATENATED MODULE: ./src/ripple/Ripple.jsx\nvar Ripple_excluded = ["unbounded", "disabled", "className", "element"];\n\nfunction Ripple_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Ripple_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Ripple_ownKeys(Object(source), true).forEach(function (key) { Ripple_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Ripple_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Ripple_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Ripple_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Ripple_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Ripple_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nfunction Ripple(_ref) {\n  var _ref$unbounded = _ref.unbounded,\n      unbounded = _ref$unbounded === void 0 ? false : _ref$unbounded,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      className = _ref.className,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'span\' : _ref$element,\n      props = Ripple_objectWithoutProperties(_ref, Ripple_excluded);\n\n  var rootRef = (0,react.useRef)();\n  var rippleRef = (0,react.useRef)();\n  (0,react.useEffect)(function () {\n    if (disabled) return;\n\n    if (!rippleRef.current) {\n      rippleRef.current = new MDCRipple(rootRef.current.parentNode);\n    }\n\n    rippleRef.current.unbounded = unbounded;\n    return function () {\n      return rippleRef.current.destroy();\n    };\n  }, [disabled, unbounded]);\n  var classNames = classnames_default()(className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Ripple_objectSpread({\n    ref: rootRef,\n    className: classNames\n  }, props));\n}\nRipple.displayName = \'MDCRipple\';\n;// CONCATENATED MODULE: ./src/ripple/constants.js\nvar src_ripple_constants_cssClasses = {\n  ROOT: \'mdc-ripple-upgraded\',\n  UNBOUNDED: \'mdc-ripple-upgraded--unbounded\',\n  BG_FOCUSED: \'mdc-ripple-upgraded--background-focused\',\n  FG_ACTIVATION: \'mdc-ripple-upgraded--foreground-activation\',\n  FG_DEACTIVATION: \'mdc-ripple-upgraded--foreground-deactivation\',\n  SURFACE: \'mdc-ripple-surface\',\n  SURFACE_PRIMARY: \'mdc-ripple-surface--primary\',\n  SURFACE_ACCENT: \'mdc-ripple-surface--accent\'\n};\nvar ripple_constants_strings = {\n  VAR_FG_SCALE: \'--mdc-ripple-fg-scale\',\n  VAR_FG_SIZE: \'--mdc-ripple-fg-size\',\n  VAR_FG_TRANSLATE_END: \'--mdc-ripple-fg-translate-end\',\n  VAR_FG_TRANSLATE_START: \'--mdc-ripple-fg-translate-start\',\n  VAR_LEFT: \'--mdc-ripple-left\',\n  VAR_TOP: \'--mdc-ripple-top\'\n};\nvar src_ripple_constants_numbers = {\n  DEACTIVATION_TIMEOUT_MS: 225,\n  // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)\n  FG_DEACTIVATION_MS: 150,\n  // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)\n  INITIAL_ORIGIN_SCALE: 0.6,\n  PADDING: 10,\n  TAP_DELAY_MS: 300 // Delay between touch and simulated mouse events on touch devices\n\n};\n;// CONCATENATED MODULE: ./src/ripple/hooks.js\n\n\nfunction useRipple(rootRef) {\n  var unbounded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var rippleRef = (0,react.useRef)();\n  (0,react.useEffect)(function () {\n    if (!rippleRef.current) {\n      rippleRef.current = new MDCRipple(rootRef.current);\n    }\n\n    rippleRef.current.unbounded = unbounded;\n    return function () {\n      return rippleRef.current.destroy();\n    };\n  }, [rootRef, unbounded]);\n  return rippleRef.current;\n}\n;// CONCATENATED MODULE: ./src/ripple/RippleSurface.jsx\nvar RippleSurface_excluded = ["primary", "accent", "className", "element"];\n\nfunction RippleSurface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction RippleSurface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { RippleSurface_ownKeys(Object(source), true).forEach(function (key) { RippleSurface_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { RippleSurface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction RippleSurface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction RippleSurface_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = RippleSurface_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction RippleSurface_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar RippleSurface = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var primary = _ref.primary,\n      accent = _ref.accent,\n      className = _ref.className,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      props = RippleSurface_objectWithoutProperties(_ref, RippleSurface_excluded);\n\n  var rootRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  useRipple(rootRef);\n  var classNames = classnames_default()(src_ripple_constants_cssClasses.SURFACE, (_classnames = {}, RippleSurface_defineProperty(_classnames, src_ripple_constants_cssClasses.SURFACE_PRIMARY, primary), RippleSurface_defineProperty(_classnames, src_ripple_constants_cssClasses.SURFACE_ACCENT, accent), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, RippleSurface_objectSpread({\n    ref: rootRef,\n    className: classNames\n  }, props));\n});\nRippleSurface.displayName = \'MDCRippleSurface\';\nRippleSurface.propTypes = {\n  primary: (prop_types_default()).bool,\n  accent: (prop_types_default()).bool\n};\n/* harmony default export */ const ripple_RippleSurface = (RippleSurface);\n;// CONCATENATED MODULE: ./src/ripple/index.js\n\n\n\n;// CONCATENATED MODULE: ./src/segmented-button/constants.js\nvar segmented_button_constants_cssClasses = {\n  ROOT: \'mdc-segmented-button\',\n  SINGLE_SELECT: \'mdc-segmented-button--single-select\',\n  SEGMENT: \'mdc-segmented-button__segment\',\n  SEGMENT_SELECTED: \'mdc-segmented-button__segment--selected\',\n  ICON: \'mdc-segmented-button__icon\',\n  LABEL: \'mdc-segmented-button__label\',\n  RIPPLE: \'mdc-segmented-button__ripple\',\n  TOUCH: \'mdc-segmented-button--touch\',\n  TOUCH_ELEMENT: \'mdc-segmented-button__touch\'\n};\n;// CONCATENATED MODULE: ./src/segmented-button/SegmentedButtonSegment.jsx\nvar SegmentedButtonSegment_excluded = ["label", "icon", "selected", "touch", "ripple", "element", "component", "className", "children"];\n\nfunction SegmentedButtonSegment_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction SegmentedButtonSegment_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SegmentedButtonSegment_ownKeys(Object(source), true).forEach(function (key) { SegmentedButtonSegment_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SegmentedButtonSegment_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction SegmentedButtonSegment_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SegmentedButtonSegment_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = SegmentedButtonSegment_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction SegmentedButtonSegment_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar SegmentedButtonSegment = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var label = _ref.label,\n      icon = _ref.icon,\n      selected = _ref.selected,\n      touch = _ref.touch,\n      ripple = _ref.ripple,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'button\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? label : _ref$children,\n      props = SegmentedButtonSegment_objectWithoutProperties(_ref, SegmentedButtonSegment_excluded);\n\n  var classNames = classnames_default()(segmented_button_constants_cssClasses.SEGMENT, (_classnames = {}, SegmentedButtonSegment_defineProperty(_classnames, segmented_button_constants_cssClasses.SEGMENT_SELECTED, selected), SegmentedButtonSegment_defineProperty(_classnames, segmented_button_constants_cssClasses.TOUCH, touch), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, SegmentedButtonSegment_objectSpread(SegmentedButtonSegment_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: [ripple && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: segmented_button_constants_cssClasses.RIPPLE\n    }), touch && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: segmented_button_constants_cssClasses.TOUCH_ELEMENT\n    }), icon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: icon,\n      fallback: icon_Icon,\n      className: segmented_button_constants_cssClasses.ICON\n    }), children && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      className: segmented_button_constants_cssClasses.LABEL,\n      children: children\n    })]\n  }));\n});\nSegmentedButtonSegment.displayName = \'MDCSegmentedButtonSegment\';\nSegmentedButtonSegment.propTypes = {\n  label: (prop_types_default()).string,\n  icon: (prop_types_default()).node,\n  selected: (prop_types_default()).bool,\n  ripple: (prop_types_default()).bool\n};\n/* harmony default export */ const segmented_button_SegmentedButtonSegment = (SegmentedButtonSegment);\n;// CONCATENATED MODULE: ./src/segmented-button/SegmentedButton.jsx\nvar SegmentedButton_excluded = ["value", "segments", "singleSelect", "ripple", "touch", "onChange", "element", "component", "className", "children"];\n\nfunction SegmentedButton_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction SegmentedButton_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SegmentedButton_ownKeys(Object(source), true).forEach(function (key) { SegmentedButton_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SegmentedButton_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction SegmentedButton_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SegmentedButton_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = SegmentedButton_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction SegmentedButton_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\nvar SegmentedButton = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var value = _ref.value,\n      segments = _ref.segments,\n      _ref$singleSelect = _ref.singleSelect,\n      singleSelect = _ref$singleSelect === void 0 ? !isUndefined(value) && !isArray(value) : _ref$singleSelect,\n      _ref$ripple = _ref.ripple,\n      ripple = _ref$ripple === void 0 ? true : _ref$ripple,\n      _ref$touch = _ref.touch,\n      touch = _ref$touch === void 0 ? false : _ref$touch,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? segments === null || segments === void 0 ? void 0 : segments.map(function (segment) {\n    return (0,react.createElement)(segmented_button_SegmentedButtonSegment, segment);\n  }) : _ref$children,\n      props = SegmentedButton_objectWithoutProperties(_ref, SegmentedButton_excluded);\n\n  var handleClick = (0,react.useCallback)(function (event) {\n    var segmentValue = event.currentTarget.value;\n    var newValue = singleSelect ? segmentValue : value.includes(segmentValue) ? value.filter(function (v) {\n      return v !== segmentValue;\n    }) : value.concat(segmentValue);\n    onChange(newValue);\n  }, [value, singleSelect, onChange]);\n  var classNames = classnames_default()(segmented_button_constants_cssClasses.ROOT, SegmentedButton_defineProperty({}, segmented_button_constants_cssClasses.SINGLE_SELECT, singleSelect), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, SegmentedButton_objectSpread(SegmentedButton_objectSpread({\n    ref: ref,\n    className: classNames,\n    role: singleSelect ? \'radiogroup\' : \'group\'\n  }, props), {}, {\n    children: isUndefined(value) ? children : react.Children.map(children, function (segment) {\n      var _clone;\n\n      var ariaProp = singleSelect ? \'aria-checked\' : \'aria-pressed\';\n      var selected = singleSelect ? value === segment.props.value : value.includes(segment.props.value);\n      return (0,react.cloneElement)(segment, (_clone = {\n        ripple: ripple,\n        touch: touch,\n        selected: selected,\n        role: singleSelect ? \'radio\' : undefined\n      }, SegmentedButton_defineProperty(_clone, ariaProp, selected), SegmentedButton_defineProperty(_clone, "onClickCapture", handleClick), _clone));\n    })\n  }));\n});\nSegmentedButton.displayName = \'MDCSegmentedButton\';\nSegmentedButton.propTypes = {\n  value: (prop_types_default()).any,\n  segments: prop_types_default().arrayOf(prop_types_default().oneOfType([(prop_types_default()).object, (prop_types_default()).element])),\n  singleSelect: (prop_types_default()).bool,\n  ripple: (prop_types_default()).bool,\n  touch: (prop_types_default()).bool,\n  onChange: (prop_types_default()).func\n};\n/* harmony default export */ const segmented_button_SegmentedButton = (SegmentedButton);\n;// CONCATENATED MODULE: ./src/segmented-button/index.js\n\n\nsegmented_button_SegmentedButton.Segment = segmented_button_SegmentedButtonSegment;\n\n;// CONCATENATED MODULE: ./src/side-sheet/constants.js\nvar side_sheet_constants_numbers = {\n  ANIMATION_ENTER_TIME_MS: 250,\n  ANIMATION_EXIT_TIME_MS: 200\n};\nvar side_sheet_constants_cssClasses = {\n  ROOT: \'mdc-side-sheet\',\n  DISMISSIBLE: \'mdc-side-sheet--dismissible\',\n  MODAL: \'mdc-side-sheet--modal\',\n  OPEN: \'mdc-side-sheet--open\',\n  ANIMATE: \'mdc-side-sheet--animate\',\n  OPENING: \'mdc-side-sheet--opening\',\n  CLOSING: \'mdc-side-sheet--closing\',\n  CONTENT: \'mdc-side-sheet__content\',\n  HEADER: \'mdc-side-sheet__header\',\n  TITLE: \'mdc-side-sheet__title\',\n  CLOSE_BUTTON: \'mdc-side-sheet__close-button\',\n  APP_CONTENT: \'mdc-side-sheet-app-content\',\n  SCRIM: \'mdc-side-sheet-scrim\'\n};\n;// CONCATENATED MODULE: ./src/side-sheet/SideSheetHeader.jsx\nvar SideSheetHeader_excluded = ["title", "closeIcon", "onClose", "element"];\n\nfunction SideSheetHeader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction SideSheetHeader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SideSheetHeader_ownKeys(Object(source), true).forEach(function (key) { SideSheetHeader_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SideSheetHeader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction SideSheetHeader_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SideSheetHeader_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = SideSheetHeader_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction SideSheetHeader_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar SideSheetHeader = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var title = _ref.title,\n      closeIcon = _ref.closeIcon,\n      onClose = _ref.onClose,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'header\' : _ref$element,\n      props = SideSheetHeader_objectWithoutProperties(_ref, SideSheetHeader_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, SideSheetHeader_objectSpread(SideSheetHeader_objectSpread({\n    ref: ref,\n    className: side_sheet_constants_cssClasses.HEADER\n  }, props), {}, {\n    children: [title && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: title,\n      fallback: "h3",\n      className: side_sheet_constants_cssClasses.TITLE\n    }), closeIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: closeIcon,\n      fallback: icon_button_IconButton,\n      className: side_sheet_constants_cssClasses.CLOSE_BUTTON,\n      onClick: onClose\n    })]\n  }));\n});\nSideSheetHeader.displayName = \'MDCSideSheetHeader\';\n/* harmony default export */ const side_sheet_SideSheetHeader = (SideSheetHeader);\n;// CONCATENATED MODULE: ./src/side-sheet/SideSheetContent.jsx\nvar SideSheetContent_excluded = ["element"];\n\nfunction SideSheetContent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction SideSheetContent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SideSheetContent_ownKeys(Object(source), true).forEach(function (key) { SideSheetContent_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SideSheetContent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction SideSheetContent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SideSheetContent_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = SideSheetContent_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction SideSheetContent_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\nvar SideSheetContent = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      props = SideSheetContent_objectWithoutProperties(_ref, SideSheetContent_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, SideSheetContent_objectSpread({\n    ref: ref,\n    className: side_sheet_constants_cssClasses.CONTENT\n  }, props));\n});\nSideSheetContent.displayName = \'MDCSideSheetContent\';\n/* harmony default export */ const side_sheet_SideSheetContent = (SideSheetContent);\n;// CONCATENATED MODULE: ./src/side-sheet/SideSheet.jsx\nvar SideSheet_excluded = ["title", "content", "open", "appear", "dismissible", "modal", "closeIcon", "appContentSelector", "onClose", "element", "component", "className", "children"];\n\nfunction SideSheet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction SideSheet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SideSheet_ownKeys(Object(source), true).forEach(function (key) { SideSheet_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SideSheet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction SideSheet_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SideSheet_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = SideSheet_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction SideSheet_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar SideSheet = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var title = _ref.title,\n      content = _ref.content,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      _ref$appear = _ref.appear,\n      appear = _ref$appear === void 0 ? false : _ref$appear,\n      _ref$dismissible = _ref.dismissible,\n      dismissible = _ref$dismissible === void 0 ? false : _ref$dismissible,\n      _ref$modal = _ref.modal,\n      modal = _ref$modal === void 0 ? false : _ref$modal,\n      _ref$closeIcon = _ref.closeIcon,\n      closeIcon = _ref$closeIcon === void 0 ? dismissible && \'close\' : _ref$closeIcon,\n      appContentSelector = _ref.appContentSelector,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? Function.prototype : _ref$onClose,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'aside\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = SideSheet_objectWithoutProperties(_ref, SideSheet_excluded);\n\n  var rootRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  (0,react.useEffect)(function () {\n    if (!dismissible) return;\n    var appContentElement = appContentSelector ? document.querySelector(appContentSelector) : rootRef.current.nextElementSibling;\n    appContentElement === null || appContentElement === void 0 ? void 0 : appContentElement.classList.add(side_sheet_constants_cssClasses.APP_CONTENT);\n    return function () {\n      appContentElement === null || appContentElement === void 0 ? void 0 : appContentElement.classList.remove(side_sheet_constants_cssClasses.APP_CONTENT);\n    };\n  }, [dismissible, appContentSelector]);\n  (0,react.useEffect)(function () {\n    if (!modal) return;\n\n    function handleDocumentKeyDown(event) {\n      if (event.key && event.key === \'Escape\' || event.keyCode === 27) {\n        onClose();\n      }\n    }\n\n    document.addEventListener(\'keydown\', handleDocumentKeyDown);\n    return function () {\n      return document.removeEventListener(\'keydown\', handleDocumentKeyDown);\n    };\n  }, [modal, onClose]);\n  var classNames = classnames_default()(side_sheet_constants_cssClasses.ROOT, (_classnames = {}, SideSheet_defineProperty(_classnames, side_sheet_constants_cssClasses.DISMISSIBLE, dismissible), SideSheet_defineProperty(_classnames, side_sheet_constants_cssClasses.MODAL, modal), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Layer, {\n    "in": open,\n    appear: appear,\n    modal: modal,\n    fixed: modal,\n    timeout: {\n      enter: side_sheet_constants_numbers.ANIMATION_ENTER_TIME_MS,\n      exit: side_sheet_constants_numbers.ANIMATION_EXIT_TIME_MS\n    },\n    classNames: {\n      appear: side_sheet_constants_cssClasses.OPEN,\n      enter: "".concat(side_sheet_constants_cssClasses.OPEN, " ").concat(side_sheet_constants_cssClasses.ANIMATE),\n      enterActive: "".concat(side_sheet_constants_cssClasses.OPEN, " ").concat(side_sheet_constants_cssClasses.OPENING),\n      enterDone: side_sheet_constants_cssClasses.OPEN,\n      exit: "".concat(side_sheet_constants_cssClasses.OPEN, " ").concat(side_sheet_constants_cssClasses.CLOSING),\n      exitActive: side_sheet_constants_cssClasses.CLOSING\n    },\n    mountOnEnter: modal,\n    unmountOnExit: modal,\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(Element, SideSheet_objectSpread(SideSheet_objectSpread({\n        ref: rootRef,\n        className: classNames\n      }, props), {}, {\n        children: [(title || dismissible) && /*#__PURE__*/(0,jsx_runtime.jsx)(side_sheet_SideSheetHeader, {\n          title: title,\n          onClose: onClose,\n          closeIcon: closeIcon\n        }), content && /*#__PURE__*/(0,jsx_runtime.jsx)(side_sheet_SideSheetContent, {\n          children: content\n        }), children]\n      })), modal && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: side_sheet_constants_cssClasses.SCRIM,\n        onClick: onClose\n      })]\n    })\n  });\n});\nSideSheet.displayName = \'MDCSideSheet\';\nSideSheet.propTypes = {\n  title: (prop_types_default()).string,\n  content: (prop_types_default()).node,\n  closeIcon: (prop_types_default()).node,\n  open: (prop_types_default()).bool,\n  appear: (prop_types_default()).bool,\n  dismissible: (prop_types_default()).bool,\n  modal: (prop_types_default()).bool,\n  appContentSelector: (prop_types_default()).string,\n  onClose: (prop_types_default()).func\n};\n/* harmony default export */ const side_sheet_SideSheet = (SideSheet);\n;// CONCATENATED MODULE: ./src/side-sheet/SideSheetAppContent.jsx\nvar SideSheetAppContent_excluded = ["element", "className"];\n\nfunction SideSheetAppContent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction SideSheetAppContent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SideSheetAppContent_ownKeys(Object(source), true).forEach(function (key) { SideSheetAppContent_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SideSheetAppContent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction SideSheetAppContent_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SideSheetAppContent_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = SideSheetAppContent_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction SideSheetAppContent_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar SideSheetAppContent = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      props = SideSheetAppContent_objectWithoutProperties(_ref, SideSheetAppContent_excluded);\n\n  var classNames = classnames_default()(side_sheet_constants_cssClasses.APP_CONTENT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, SideSheetAppContent_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nSideSheetAppContent.displayName = \'MDCSideSheetAppContent\';\n/* harmony default export */ const side_sheet_SideSheetAppContent = (SideSheetAppContent);\n;// CONCATENATED MODULE: ./src/side-sheet/index.js\n\n\n\n\nside_sheet_SideSheet.Header = side_sheet_SideSheetHeader;\nside_sheet_SideSheet.Content = side_sheet_SideSheetContent;\nside_sheet_SideSheet.AppContent = side_sheet_SideSheetAppContent;\n\n;// CONCATENATED MODULE: ./src/slider/constants.js\nvar slider_constants_numbers = {\n  THUMB_WIDTH: 48\n};\nvar slider_constants_cssClasses = {\n  ROOT: \'mdc-slider\',\n  RANGE: \'mdc-slider--range\',\n  DISCRETE: \'mdc-slider--discrete\',\n  DISABLED: \'mdc-slider--disabled\',\n  INPUT: \'mdc-slider__input\',\n  TRACK: \'mdc-slider__track\',\n  TRACK_INACTIVE: \'mdc-slider__track--inactive\',\n  TRACK_ACTIVE: \'mdc-slider__track--active\',\n  TRACK_ACTIVE_FILL: \'mdc-slider__track--active_fill\',\n  TICK_MARKS: \'mdc-slider__tick-marks\',\n  TICK_MARK_ACTIVE: \'mdc-slider__tick-mark--active\',\n  TICK_MARK_INACTIVE: \'mdc-slider__tick-mark--inactive\',\n  THUMB: \'mdc-slider__thumb\',\n  THUMB_TOP: \'mdc-slider__thumb--top\',\n  THUMB_FOCUSED: \'mdc-slider__thumb--focused\',\n  THUMB_WITH_INDICATOR: \'mdc-slider__thumb--with-indicator\',\n  THUMB_KNOB: \'mdc-slider__thumb-knob\',\n  VALUE_INDICATOR_CONTAINER: \'mdc-slider__value-indicator-container\',\n  VALUE_INDICATOR: \'mdc-slider__value-indicator\',\n  VALUE_INDICATOR_TEXT: \'mdc-slider__value-indicator-text\'\n};\n;// CONCATENATED MODULE: ./src/slider/utils.js\n\nfunction getValueForEventKey(eventKey, value, min, max, step) {\n  var delta = Number(step) || (max - min) / 100;\n\n  switch (eventKey) {\n    case Key.ARROW_LEFT:\n    case Key.ARROW_DOWN:\n      return value - delta;\n\n    case Key.ARROW_RIGHT:\n    case Key.ARROW_UP:\n      return value + delta;\n\n    case Key.HOME:\n      return min;\n\n    case Key.END:\n      return max;\n\n    default:\n      return NaN;\n  }\n}\n;// CONCATENATED MODULE: ./src/slider/Input.jsx\nvar Input_excluded = ["value"];\n\nfunction Input_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Input_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Input_ownKeys(Object(source), true).forEach(function (key) { Input_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Input_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Input_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Input_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Input_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Input_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\nvar Input = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var value = _ref.value,\n      props = Input_objectWithoutProperties(_ref, Input_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("input", Input_objectSpread({\n    ref: ref,\n    className: slider_constants_cssClasses.INPUT,\n    type: "range",\n    value: Math.round(value),\n    onChange: Function.prototype\n  }, props));\n});\nInput.displayName = \'MDCSliderInput\';\n/* harmony default export */ const slider_Input = (Input);\n;// CONCATENATED MODULE: ./src/slider/TickMarks.jsx\nfunction TickMarks_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar TickMarks = function TickMarks(_ref) {\n  var value = _ref.value,\n      min = _ref.min,\n      max = _ref.max,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 1 : _ref$step;\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    className: slider_constants_cssClasses.TICK_MARKS,\n    children: Array.from(new Array((max - min) / step + 1)).map(function (_, i) {\n      return step * i + Number(min);\n    }).map(function (tickValue) {\n      var _classnames;\n\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        "data-value": tickValue,\n        className: classnames_default()((_classnames = {}, TickMarks_defineProperty(_classnames, slider_constants_cssClasses.TICK_MARK_ACTIVE, tickValue <= value), TickMarks_defineProperty(_classnames, slider_constants_cssClasses.TICK_MARK_INACTIVE, tickValue > value), _classnames))\n      }, tickValue);\n    })\n  });\n};\n\nTickMarks.displayName = \'MDCSliderTickMarks\';\n/* harmony default export */ const slider_TickMarks = (TickMarks);\n;// CONCATENATED MODULE: ./src/slider/Track.jsx\n\n\n\n\n\nvar Track = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var value = _ref.value,\n      min = _ref.min,\n      max = _ref.max,\n      step = _ref.step,\n      discrete = _ref.discrete,\n      tickMarks = _ref.tickMarks;\n  var style = {\n    transform: "scaleX(".concat((value - min) / (max - min), ")")\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    ref: ref,\n    className: slider_constants_cssClasses.TRACK,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: slider_constants_cssClasses.TRACK_INACTIVE\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: slider_constants_cssClasses.TRACK_ACTIVE,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: slider_constants_cssClasses.TRACK_ACTIVE_FILL,\n        style: style\n      })\n    }), discrete && tickMarks && /*#__PURE__*/(0,jsx_runtime.jsx)(slider_TickMarks, {\n      value: value,\n      min: min,\n      max: max,\n      step: step\n    })]\n  });\n});\nTrack.displayName = \'MDCSliderTrack\';\n/* harmony default export */ const slider_Track = (Track);\n;// CONCATENATED MODULE: ./src/slider/Thumb.jsx\nvar Thumb_excluded = ["value", "min", "max", "discrete", "disabled", "onStartInteraction", "onEndInteraction"];\n\nfunction Thumb_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Thumb_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Thumb_ownKeys(Object(source), true).forEach(function (key) { Thumb_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Thumb_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Thumb_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Thumb_slicedToArray(arr, i) { return Thumb_arrayWithHoles(arr) || Thumb_iterableToArrayLimit(arr, i) || Thumb_unsupportedIterableToArray(arr, i) || Thumb_nonIterableRest(); }\n\nfunction Thumb_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Thumb_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Thumb_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Thumb_arrayLikeToArray(o, minLen); }\n\nfunction Thumb_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Thumb_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Thumb_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction Thumb_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Thumb_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Thumb_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar Thumb = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var value = _ref.value,\n      min = _ref.min,\n      max = _ref.max,\n      discrete = _ref.discrete,\n      disabled = _ref.disabled,\n      onStartInteraction = _ref.onStartInteraction,\n      onEndInteraction = _ref.onEndInteraction,\n      props = Thumb_objectWithoutProperties(_ref, Thumb_excluded);\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = Thumb_slicedToArray(_useState, 2),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var handleFocus = (0,react.useCallback)(function () {\n    setFocused(true);\n  }, []);\n  var handleBlur = (0,react.useCallback)(function () {\n    setFocused(false);\n  }, []);\n  var classNames = classnames_default()(slider_constants_cssClasses.THUMB, (_classnames = {}, Thumb_defineProperty(_classnames, slider_constants_cssClasses.THUMB_FOCUSED, focused), Thumb_defineProperty(_classnames, slider_constants_cssClasses.THUMB_WITH_INDICATOR, discrete && focused), _classnames));\n  var style = {\n    left: "calc(".concat((value - min) / (max - min) * 100, "% - ").concat(slider_constants_numbers.THUMB_WIDTH * 0.5, "px)")\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", Thumb_objectSpread(Thumb_objectSpread({\n    ref: ref,\n    className: classNames,\n    role: "slider",\n    tabIndex: disabled ? \'-1\' : \'0\',\n    "aria-valuemin": "0",\n    "aria-valuemax": "100",\n    "aria-valuenow": "50",\n    "aria-disabled": disabled || undefined,\n    style: style,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseDown: onStartInteraction,\n    onMouseUp: onEndInteraction,\n    onTouchStart: onStartInteraction,\n    onTouchEnd: onEndInteraction\n  }, props), {}, {\n    children: [discrete && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: slider_constants_cssClasses.VALUE_INDICATOR_CONTAINER,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: slider_constants_cssClasses.VALUE_INDICATOR,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n          className: slider_constants_cssClasses.VALUE_INDICATOR_TEXT,\n          children: value\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: slider_constants_cssClasses.THUMB_KNOB\n    })]\n  }));\n});\nThumb.displayName = \'MDCSliderThumb\';\n/* harmony default export */ const slider_Thumb = (Thumb);\n;// CONCATENATED MODULE: ./src/slider/Slider.jsx\nvar Slider_excluded = ["name", "value", "min", "max", "step", "discrete", "disabled", "tickMarks", "onChange", "className"];\n\nfunction Slider_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Slider_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Slider_ownKeys(Object(source), true).forEach(function (key) { Slider_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Slider_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Slider_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Slider_slicedToArray(arr, i) { return Slider_arrayWithHoles(arr) || Slider_iterableToArrayLimit(arr, i) || Slider_unsupportedIterableToArray(arr, i) || Slider_nonIterableRest(); }\n\nfunction Slider_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Slider_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Slider_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Slider_arrayLikeToArray(o, minLen); }\n\nfunction Slider_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Slider_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Slider_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction Slider_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Slider_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Slider_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Slider = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var name = _ref.name,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      step = _ref.step,\n      _ref$discrete = _ref.discrete,\n      discrete = _ref$discrete === void 0 ? false : _ref$discrete,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$tickMarks = _ref.tickMarks,\n      tickMarks = _ref$tickMarks === void 0 ? false : _ref$tickMarks,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      className = _ref.className,\n      props = Slider_objectWithoutProperties(_ref, Slider_excluded);\n\n  var inputRef = (0,react.useRef)();\n  var trackRef = (0,react.useRef)();\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = Slider_slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useUpdated(function () {\n    if (disabled) return;\n\n    if (active) {\n      document.body.addEventListener(\'mousemove\', handleMove);\n      document.body.addEventListener(\'touchmove\', handleMove);\n      document.body.addEventListener(\'mouseup\', handleUp);\n      document.body.addEventListener(\'touchend\', handleUp);\n    } else {\n      document.body.removeEventListener(\'mousemove\', handleMove);\n      document.body.removeEventListener(\'touchmove\', handleMove);\n      document.body.removeEventListener(\'mouseup\', handleUp);\n      document.body.removeEventListener(\'touchend\', handleUp);\n    }\n\n    return function () {\n      document.body.removeEventListener(\'mousemove\', handleMove);\n      document.body.removeEventListener(\'touchmove\', handleMove);\n      document.body.removeEventListener(\'mouseup\', handleUp);\n      document.body.removeEventListener(\'touchend\', handleUp);\n    };\n  }, [active]);\n  var updateValue = (0,react.useCallback)(function (newValue) {\n    if (newValue < min) {\n      newValue = Number(min);\n    } else if (newValue > max) {\n      newValue = Number(max);\n    }\n\n    if (step) {\n      newValue = Math.round(newValue / step) * step;\n    }\n\n    onChange(newValue);\n  }, [min, max, step, onChange]);\n  var handleMove = (0,react.useCallback)(function (event) {\n    var trackClientRect = trackRef.current.getBoundingClientRect();\n    var pageX = getPageX(event);\n    var offsetX = pageX - trackClientRect.left;\n    var percent = offsetX / trackClientRect.width;\n    var value = Number(min) + percent * (max - min);\n    updateValue(value);\n  }, [min, max, updateValue]);\n  var handleKeyDown = (0,react.useCallback)(function (event) {\n    event.preventDefault();\n    var value = Number(inputRef.current.value);\n    var eventKey = getEventKey(event);\n    var newValue = getValueForEventKey(eventKey, value, min, max, step);\n    if (isNaN(newValue)) return;\n    updateValue(newValue);\n  }, [min, max, step, updateValue]);\n  var handleRootInteraction = (0,react.useCallback)(function (event) {\n    handleMove(event);\n  }, [handleMove]);\n  var handleUp = (0,react.useCallback)(function () {\n    setActive(false);\n  }, []);\n  var handleThumbStartInteraction = (0,react.useCallback)(function () {\n    setActive(true);\n  }, []);\n  var handleThumbEndInteraction = (0,react.useCallback)(function () {\n    setActive(false);\n  }, []);\n  var classNames = classnames_default()(slider_constants_cssClasses.ROOT, (_classnames = {}, Slider_defineProperty(_classnames, slider_constants_cssClasses.DISCRETE, discrete), Slider_defineProperty(_classnames, slider_constants_cssClasses.DISABLED, disabled), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", Slider_objectSpread(Slider_objectSpread({\n    ref: ref,\n    className: classNames,\n    onMouseDown: handleRootInteraction,\n    onTouchStart: handleRootInteraction\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(slider_Input, {\n      ref: inputRef,\n      name: name,\n      value: value,\n      min: min,\n      max: max,\n      step: step,\n      disabled: disabled\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Track, {\n      ref: trackRef,\n      value: value,\n      min: min,\n      max: max,\n      step: step,\n      discrete: discrete,\n      tickMarks: tickMarks\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Thumb, {\n      value: value,\n      min: min,\n      max: max,\n      discrete: discrete,\n      onStartInteraction: handleThumbStartInteraction,\n      onEndInteraction: handleThumbEndInteraction,\n      onKeyDown: handleKeyDown\n    })]\n  }));\n});\nSlider.displayName = \'MDCSlider\';\nSlider.propTypes = {\n  value: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  min: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  max: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  step: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  discrete: (prop_types_default()).bool,\n  disabled: (prop_types_default()).bool,\n  tickMarks: (prop_types_default()).bool,\n  onChange: (prop_types_default()).func\n};\n/* harmony default export */ const slider_Slider = (Slider);\n;// CONCATENATED MODULE: ./src/slider/index.js\n\n;// CONCATENATED MODULE: ./src/snackbar/constants.js\nvar snackbar_constants_numbers = {\n  DEFAULT_AUTO_DISMISS_TIMEOUT_MS: 5000,\n  ANIMATION_OPEN_TIME_MS: 150,\n  ANIMATION_CLOSE_TIME_MS: 75\n};\nvar snackbar_constants_cssClasses = {\n  ROOT: \'mdc-snackbar\',\n  LEADING: \'mdc-snackbar--leading\',\n  STACKED: \'mdc-snackbar--stacked\',\n  OPENING: \'mdc-snackbar--opening\',\n  OPEN: \'mdc-snackbar--open\',\n  CLOSING: \'mdc-snackbar--closing\',\n  SURFACE: \'mdc-snackbar__surface\',\n  LABEL: \'mdc-snackbar__label\',\n  ACTIONS: \'mdc-snackbar__actions\',\n  ACTION: \'mdc-snackbar__action\',\n  DISMISS: \'mdc-snackbar__dismiss\'\n};\n;// CONCATENATED MODULE: ./src/snackbar/Snackbar.jsx\nvar Snackbar_excluded = ["label", "action", "dismissIcon", "open", "appear", "leading", "stacked", "dismissible", "timeout", "closeOnEscape", "onClose", "element", "className", "children"];\n\nfunction Snackbar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Snackbar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Snackbar_ownKeys(Object(source), true).forEach(function (key) { Snackbar_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Snackbar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Snackbar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Snackbar_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Snackbar_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Snackbar_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar Snackbar = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var label = _ref.label,\n      action = _ref.action,\n      _ref$dismissIcon = _ref.dismissIcon,\n      dismissIcon = _ref$dismissIcon === void 0 ? \'close\' : _ref$dismissIcon,\n      _ref$open = _ref.open,\n      open = _ref$open === void 0 ? false : _ref$open,\n      _ref$appear = _ref.appear,\n      appear = _ref$appear === void 0 ? false : _ref$appear,\n      _ref$leading = _ref.leading,\n      leading = _ref$leading === void 0 ? false : _ref$leading,\n      _ref$stacked = _ref.stacked,\n      stacked = _ref$stacked === void 0 ? false : _ref$stacked,\n      _ref$dismissible = _ref.dismissible,\n      dismissible = _ref$dismissible === void 0 ? true : _ref$dismissible,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? snackbar_constants_numbers.DEFAULT_AUTO_DISMISS_TIMEOUT_MS : _ref$timeout,\n      _ref$closeOnEscape = _ref.closeOnEscape,\n      closeOnEscape = _ref$closeOnEscape === void 0 ? true : _ref$closeOnEscape,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? Function.prototype : _ref$onClose,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? label : _ref$children,\n      props = Snackbar_objectWithoutProperties(_ref, Snackbar_excluded);\n\n  var timeoutRef = (0,react.useRef)();\n  useUpdated(function () {\n    if (open) {\n      timeoutRef.current = setTimeout(function () {\n        timeoutRef.current = null;\n        onClose();\n      }, timeout);\n    } else {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n      }\n    }\n\n    return function () {\n      return clearTimeout(timeoutRef.current);\n    };\n  }, [open]);\n  var handleKeyDown = (0,react.useCallback)(function (event) {\n    if (closeOnEscape && event.key === \'Escape\' || event.keyCode === 27) {\n      onClose();\n    }\n  }, [closeOnEscape, onClose]);\n  var classNames = classnames_default()(snackbar_constants_cssClasses.ROOT, (_classnames = {}, Snackbar_defineProperty(_classnames, snackbar_constants_cssClasses.LEADING, leading), Snackbar_defineProperty(_classnames, snackbar_constants_cssClasses.STACKED, stacked), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Layer, {\n    modal: true,\n    "in": open,\n    appear: appear,\n    timeout: {\n      enter: snackbar_constants_numbers.ANIMATION_OPEN_TIME_MS,\n      exit: snackbar_constants_numbers.ANIMATION_CLOSE_TIME_MS\n    },\n    classNames: {\n      appear: snackbar_constants_cssClasses.OPENING,\n      appearActive: snackbar_constants_cssClasses.OPEN,\n      enter: snackbar_constants_cssClasses.OPENING,\n      enterActive: snackbar_constants_cssClasses.OPEN,\n      enterDone: snackbar_constants_cssClasses.OPEN,\n      exit: snackbar_constants_cssClasses.CLOSING\n    },\n    mountOnEnter: true,\n    unmountOnExit: true,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Snackbar_objectSpread(Snackbar_objectSpread({\n      ref: ref,\n      className: classNames,\n      onKeyDown: handleKeyDown\n    }, props), {}, {\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: snackbar_constants_cssClasses.SURFACE,\n        role: "status",\n        "aria-relevant": "additions",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: snackbar_constants_cssClasses.LABEL,\n          "aria-atomic": "false",\n          children: children\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: snackbar_constants_cssClasses.ACTIONS,\n          "aria-atomic": "true",\n          children: [action && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n            component: action,\n            className: snackbar_constants_cssClasses.ACTION\n          }), dismissible && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n            component: dismissIcon,\n            fallback: icon_button_IconButton,\n            className: snackbar_constants_cssClasses.DISMISS,\n            onClick: onClose\n          })]\n        })]\n      })\n    }))\n  });\n});\nSnackbar.displayName = \'MDCSnackbar\';\nSnackbar.propTypes = {\n  label: (prop_types_default()).string,\n  action: (prop_types_default()).element,\n  dismissIcon: (prop_types_default()).node,\n  open: (prop_types_default()).bool,\n  appear: (prop_types_default()).bool,\n  leading: (prop_types_default()).bool,\n  stacked: (prop_types_default()).bool,\n  dismissible: (prop_types_default()).bool,\n  timeout: (prop_types_default()).number,\n  closeOnEscape: (prop_types_default()).bool,\n  onClose: (prop_types_default()).func\n};\n/* harmony default export */ const snackbar_Snackbar = (Snackbar);\n;// CONCATENATED MODULE: ./src/snackbar/index.js\n\n;// CONCATENATED MODULE: ./src/switch/constants.js\nvar switch_constants_cssClasses = {\n  ROOT: \'mdc-switch\',\n  SELECTED: \'mdc-switch--selected\',\n  UNSELECTED: \'mdc-switch--unselected\',\n  TRACK: \'mdc-switch__track\',\n  HANDLE_TRACK: \'mdc-switch__handle-track\',\n  HANDLE: \'mdc-switch__handle\',\n  SHADOW: \'mdc-switch__shadow\',\n  ELEVATION_OVERLAY: \'mdc-elevation-overlay\',\n  RIPPLE: \'mdc-switch__ripple\',\n  ICONS: \'mdc-switch__icons\',\n  ICON: \'mdc-switch__icon\',\n  ICON_ON: \'mdc-switch__icon--on\',\n  ICON_OFF: \'mdc-switch__icon--off\'\n};\n;// CONCATENATED MODULE: ./src/switch/Switch.jsx\nvar Switch_excluded = ["selected", "onChange", "className"];\n\nfunction Switch_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Switch_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Switch_ownKeys(Object(source), true).forEach(function (key) { Switch_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Switch_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Switch_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Switch_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Switch_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Switch_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\nvar Switch_Switch = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      className = _ref.className,\n      props = Switch_objectWithoutProperties(_ref, Switch_excluded);\n\n  var handleClick = (0,react.useCallback)(function (event) {\n    event.stopPropagation();\n    event.target = event.currentTarget;\n    onChange(event, !selected, event.currentTarget);\n  }, [selected, onChange]);\n  var classNames = classnames_default()(switch_constants_cssClasses.ROOT, (_classnames = {}, Switch_defineProperty(_classnames, switch_constants_cssClasses.SELECTED, selected), Switch_defineProperty(_classnames, switch_constants_cssClasses.UNSELECTED, !selected), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("button", Switch_objectSpread(Switch_objectSpread({\n    ref: ref,\n    type: "button",\n    className: classNames,\n    role: "switch",\n    "aria-checked": selected,\n    onClick: handleClick\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: switch_constants_cssClasses.TRACK\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: switch_constants_cssClasses.HANDLE_TRACK,\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n        className: switch_constants_cssClasses.HANDLE,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: switch_constants_cssClasses.SHADOW,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: switch_constants_cssClasses.ELEVATION_OVERLAY\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: switch_constants_cssClasses.RIPPLE\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: switch_constants_cssClasses.ICONS,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n            className: "".concat(switch_constants_cssClasses.ICON, " ").concat(switch_constants_cssClasses.ICON_ON),\n            viewBox: "0 0 24 24",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n              d: "M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z"\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)("svg", {\n            className: "".concat(switch_constants_cssClasses.ICON, " ").concat(switch_constants_cssClasses.ICON_OFF),\n            viewBox: "0 0 24 24",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)("path", {\n              d: "M20 13H4v-2h16v2z"\n            })\n          })]\n        })]\n      })\n    })]\n  }));\n});\nSwitch_Switch.displayName = \'MDCSwitch\';\nSwitch_Switch.propTypes = {\n  selected: (prop_types_default()).bool,\n  disabled: (prop_types_default()).bool,\n  onChange: (prop_types_default()).func\n};\n/* harmony default export */ const switch_Switch = (Switch_Switch);\n;// CONCATENATED MODULE: ./src/switch/index.js\n\n;// CONCATENATED MODULE: ./src/symbol/constants.js\nvar symbol_constants_cssClasses = {\n  ROOT: \'mdc-symbol\',\n  LIGHT: \'mdc-symbol--light\',\n  DARK: \'mdc-symbol--dark\',\n  INACTIVE: \'mdc-symbol--inactive\'\n};\nvar size = {\n  SMALLER: 16,\n  SMALL: 18,\n  MEDIUM: 24,\n  LARGE: 36,\n  LARGER: 48\n};\n;// CONCATENATED MODULE: ./src/symbol/utils.js\n\nfunction getSizeValue(arg) {\n  if (arg === undefined) return;\n\n  if (isNaN(arg)) {\n    return size[arg.toUpperCase()];\n  }\n\n  return Number(arg);\n}\nfunction getFontVariationSettings(fill, wght, grad, opsz) {\n  var parts = [];\n\n  if (fill) {\n    parts.push(\'"FILL" 1\');\n  }\n\n  if (!isNaN(wght)) {\n    parts.push(\'"wght" \' + wght);\n  }\n\n  if (!isNaN(grad)) {\n    parts.push(\'"GRAD" \' + Number(grad));\n  }\n\n  if (!isNaN(opsz)) {\n    parts.push(\'"opsz" \' + opsz);\n  } // "FILL" 0, "wght" 100, "GRAD" 0, "opsz" 48\n\n\n  return parts.length > 0 ? parts.join(\', \') : undefined;\n}\n;// CONCATENATED MODULE: ./src/symbol/Symbol.jsx\nvar Symbol_excluded = ["name", "type", "size", "weight", "grade", "filled", "light", "dark", "inactive", "element", "component", "children", "className"];\n\nfunction Symbol_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Symbol_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Symbol_ownKeys(Object(source), true).forEach(function (key) { Symbol_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Symbol_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Symbol_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Symbol_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Symbol_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Symbol_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar _Symbol = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var name = _ref.name,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \'outlined\' : _ref$type,\n      size = _ref.size,\n      weight = _ref.weight,\n      grade = _ref.grade,\n      _ref$filled = _ref.filled,\n      filled = _ref$filled === void 0 ? false : _ref$filled,\n      _ref$light = _ref.light,\n      light = _ref$light === void 0 ? false : _ref$light,\n      _ref$dark = _ref.dark,\n      dark = _ref$dark === void 0 ? false : _ref$dark,\n      _ref$inactive = _ref.inactive,\n      inactive = _ref$inactive === void 0 ? false : _ref$inactive,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'i\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? name : _ref$children,\n      className = _ref.className,\n      props = Symbol_objectWithoutProperties(_ref, Symbol_excluded);\n\n  var classNames = classnames_default()(symbol_constants_cssClasses.ROOT, (_classnames = {}, Symbol_defineProperty(_classnames, "".concat(symbol_constants_cssClasses.ROOT, "--").concat(type), type), Symbol_defineProperty(_classnames, "".concat(symbol_constants_cssClasses.ROOT, "--").concat(size), size), Symbol_defineProperty(_classnames, symbol_constants_cssClasses.LIGHT, light), Symbol_defineProperty(_classnames, symbol_constants_cssClasses.DARK, dark), Symbol_defineProperty(_classnames, symbol_constants_cssClasses.INACTIVE, inactive), _classnames), className);\n  var fontVariationSettings = getFontVariationSettings(filled, weight, grade, getSizeValue(size));\n  var style = fontVariationSettings ? {\n    fontVariationSettings: fontVariationSettings\n  } : undefined;\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Symbol_objectSpread(Symbol_objectSpread({\n    ref: ref,\n    style: style,\n    className: classNames\n  }, props), {}, {\n    children: children\n  }));\n});\n\n_Symbol.displayName = \'MDCSymbol\';\n_Symbol.propTypes = {\n  name: (prop_types_default()).string,\n  type: prop_types_default().oneOf([\'outlined\', \'rounded\', \'sharp\']),\n  size: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  weight: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  grade: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string]),\n  filled: (prop_types_default()).bool,\n  dark: (prop_types_default()).bool,\n  light: (prop_types_default()).bool,\n  inactive: (prop_types_default()).bool\n};\n/* harmony default export */ const symbol_Symbol = (_Symbol);\n;// CONCATENATED MODULE: ./src/symbol/index.js\n\n;// CONCATENATED MODULE: ./src/tabs/constants.js\nvar tabClassNames = {\n  ROOT: \'mdc-tab\',\n  ACTIVE: \'mdc-tab--active\',\n  STACKED: \'mdc-tab--stacked\',\n  MIN_WIDTH: \'mdc-tab--min-width\',\n  CONTENT: \'mdc-tab__content\',\n  ICON: \'mdc-tab__icon\',\n  LABEL: \'mdc-tab__text-label\',\n  RIPPLE: \'mdc-tab__ripple\'\n};\nvar barCssClasses = {\n  ROOT: \'mdc-tab-bar\'\n};\nvar scrollerCssClasses = {\n  ROOT: \'mdc-tab-scroller\',\n  ALIGN: \'mdc-tab-scroller--align\',\n  ANIMATING: \'mdc-tab-scroller--animating\',\n  SCROLL_AREA: \'mdc-tab-scroller__scroll-area\',\n  SCROLL_AREA_SCROLL: \'mdc-tab-scroller__scroll-area--scroll\',\n  SCROLL_CONTENT: \'mdc-tab-scroller__scroll-content\'\n};\nvar indicatorCssClasses = {\n  ROOT: \'mdc-tab-indicator\',\n  ACTIVE: \'mdc-tab-indicator--active\',\n  FADE: \'mdc-tab-indicator--fade\',\n  NO_TRANSITION: \'mdc-tab-indicator--no-transition\',\n  CONTENT: \'mdc-tab-indicator__content\',\n  CONTENT_ICON: \'mdc-tab-indicator__content--icon material-icons\',\n  CONTENT_UNDERLINE: \'mdc-tab-indicator__content--underline\'\n};\nvar Align = {\n  START: \'start\',\n  CENTER: \'center\',\n  END: \'end\'\n};\n;// CONCATENATED MODULE: ./src/tabs/context.js\n\n/* harmony default export */ const tabs_context = (/*#__PURE__*/(0,react.createContext)({}));\n;// CONCATENATED MODULE: ./src/tabs/TabIndicator.jsx\nvar TabIndicator_excluded = ["icon", "active", "fade", "underline"];\n\nfunction TabIndicator_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TabIndicator_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TabIndicator_ownKeys(Object(source), true).forEach(function (key) { TabIndicator_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TabIndicator_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TabIndicator_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TabIndicator_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TabIndicator_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TabIndicator_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nvar TabIndicator = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames, _classnames2;\n\n  var icon = _ref.icon,\n      _ref$active = _ref.active,\n      active = _ref$active === void 0 ? false : _ref$active,\n      _ref$fade = _ref.fade,\n      fade = _ref$fade === void 0 ? false : _ref$fade,\n      _ref$underline = _ref.underline,\n      underline = _ref$underline === void 0 ? !icon : _ref$underline,\n      props = TabIndicator_objectWithoutProperties(_ref, TabIndicator_excluded);\n\n  var _useContext = (0,react.useContext)(tabs_context),\n      previousTab = _useContext.previousTab;\n\n  var rootRef = (0,react.useRef)();\n  var contentRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  useUpdatedSync(function () {\n    if (fade || !active || !previousTab) return;\n    var activeIndicator = rootRef.current;\n    var previousIndicator = previousTab.querySelector(\'.mdc-tab-indicator\');\n    var previousIndicatorClientRect = previousIndicator.getBoundingClientRect();\n    var activeIndicatorClientRect = activeIndicator.getBoundingClientRect();\n    var xPosition = previousIndicatorClientRect.left - activeIndicatorClientRect.left;\n    var widthDelta = previousIndicatorClientRect.width / activeIndicatorClientRect.width;\n    rootRef.current.classList.add(indicatorCssClasses.NO_TRANSITION);\n    contentRef.current.style.transform = "translateX(".concat(xPosition, "px) scaleX(").concat(widthDelta, ")"); // Force repaint before updating classes and transform to ensure the transform properly takes effect\n\n    contentRef.current.getBoundingClientRect();\n    rootRef.current.classList.remove(indicatorCssClasses.NO_TRANSITION);\n    contentRef.current.style.transform = \'\';\n  }, [fade, active]);\n  var rootClassNames = classnames_default()(indicatorCssClasses.ROOT, (_classnames = {}, TabIndicator_defineProperty(_classnames, indicatorCssClasses.ACTIVE, active), TabIndicator_defineProperty(_classnames, indicatorCssClasses.FADE, fade), _classnames));\n  var contentClassNames = classnames_default()(indicatorCssClasses.CONTENT, (_classnames2 = {}, TabIndicator_defineProperty(_classnames2, indicatorCssClasses.CONTENT_ICON, icon), TabIndicator_defineProperty(_classnames2, indicatorCssClasses.CONTENT_UNDERLINE, underline), _classnames2));\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("span", TabIndicator_objectSpread(TabIndicator_objectSpread({\n    ref: rootRef,\n    className: rootClassNames\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n      ref: contentRef,\n      className: contentClassNames,\n      children: icon\n    })\n  }));\n});\nTabIndicator.displayName = \'MDCTabIndicator\';\nTabIndicator.propTypes = {\n  icon: (prop_types_default()).node,\n  active: (prop_types_default()).bool,\n  fade: (prop_types_default()).bool,\n  underline: (prop_types_default()).bool\n};\n/* harmony default export */ const tabs_TabIndicator = (TabIndicator);\n;// CONCATENATED MODULE: ./src/tabs/Tab.jsx\nvar Tab_excluded = ["value", "icon", "label", "indicatorIcon", "active", "stacked", "minWidth", "minWidthIndicator", "fade", "underline", "onClick", "element", "component", "className", "children"];\n\nfunction Tab_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Tab_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Tab_ownKeys(Object(source), true).forEach(function (key) { Tab_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Tab_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Tab_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Tab_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Tab_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Tab_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\nvar Tab = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var value = _ref.value,\n      icon = _ref.icon,\n      label = _ref.label,\n      indicatorIcon = _ref.indicatorIcon,\n      _ref$active = _ref.active,\n      active = _ref$active === void 0 ? false : _ref$active,\n      _ref$stacked = _ref.stacked,\n      stacked = _ref$stacked === void 0 ? false : _ref$stacked,\n      _ref$minWidth = _ref.minWidth,\n      minWidth = _ref$minWidth === void 0 ? false : _ref$minWidth,\n      _ref$minWidthIndicato = _ref.minWidthIndicator,\n      minWidthIndicator = _ref$minWidthIndicato === void 0 ? false : _ref$minWidthIndicato,\n      _ref$fade = _ref.fade,\n      fade = _ref$fade === void 0 ? false : _ref$fade,\n      _ref$underline = _ref.underline,\n      underline = _ref$underline === void 0 ? !indicatorIcon : _ref$underline,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === void 0 ? Function.prototype : _ref$onClick,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'button\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? label : _ref$children,\n      props = Tab_objectWithoutProperties(_ref, Tab_excluded);\n\n  var rootRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  var handleClick = (0,react.useCallback)(function () {\n    onClick(rootRef.current, value);\n  }, [value, onClick]);\n  var classNames = classnames_default()(tabClassNames.ROOT, (_classnames = {}, Tab_defineProperty(_classnames, tabClassNames.ACTIVE, active), Tab_defineProperty(_classnames, tabClassNames.STACKED, stacked), Tab_defineProperty(_classnames, tabClassNames.MIN_WIDTH, minWidth), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Element, Tab_objectSpread(Tab_objectSpread({\n    ref: rootRef,\n    className: classNames,\n    "data-value": value,\n    role: "tab",\n    "aria-selected": active ? \'true\' : \'false\',\n    tabIndex: active ? 0 : -1,\n    onClick: handleClick\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: tabClassNames.CONTENT,\n      children: [icon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: icon,\n        fallback: icon_Icon,\n        className: tabClassNames.ICON\n      }), children && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: tabClassNames.LABEL,\n        children: children\n      }), minWidthIndicator && /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_TabIndicator, {\n        icon: indicatorIcon,\n        active: active,\n        fade: fade,\n        underline: underline\n      })]\n    }), !minWidthIndicator && /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_TabIndicator, {\n      icon: indicatorIcon,\n      active: active,\n      fade: fade,\n      underline: underline\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: tabClassNames.RIPPLE\n    })]\n  }));\n});\nTab.displayName = \'MDCTab\';\nTab.propTypes = {\n  value: (prop_types_default()).any,\n  icon: (prop_types_default()).node,\n  label: (prop_types_default()).node,\n  indicatorIcon: (prop_types_default()).node,\n  active: (prop_types_default()).bool,\n  stacked: (prop_types_default()).bool,\n  minWidth: (prop_types_default()).bool,\n  minWidthIndicator: (prop_types_default()).bool,\n  fade: (prop_types_default()).bool,\n  underline: (prop_types_default()).bool,\n  onActivate: (prop_types_default()).func\n};\n/* harmony default export */ const tabs_Tab = (Tab);\n;// CONCATENATED MODULE: ./src/tabs/TabScroller.jsx\nvar TabScroller_excluded = ["align", "activeTab", "children"];\n\nfunction TabScroller_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TabScroller_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TabScroller_ownKeys(Object(source), true).forEach(function (key) { TabScroller_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TabScroller_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TabScroller_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TabScroller_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TabScroller_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TabScroller_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar TabScroller = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var align = _ref.align,\n      activeTab = _ref.activeTab,\n      children = _ref.children,\n      props = TabScroller_objectWithoutProperties(_ref, TabScroller_excluded);\n\n  var scrollAreaRef = (0,react.useRef)();\n  var scrollContentRef = (0,react.useRef)();\n  useMounted(function () {\n    var scrollAreaWidth = scrollAreaRef.current.offsetWidth;\n    var scrollContentWidth = scrollContentRef.current.offsetWidth;\n\n    if (scrollContentWidth > scrollAreaWidth) {\n      scrollAreaRef.current.classList.add(scrollerCssClasses.SCROLL_AREA_SCROLL);\n    }\n  });\n  useUpdated(function () {\n    if (!activeTab) return;\n    var scrollAreaWidth = scrollAreaRef.current.offsetWidth;\n    var tabWidth = activeTab.offsetWidth;\n    var tabHalfWidth = tabWidth * 0.5;\n    var offsetLeft = activeTab.offsetLeft - scrollAreaRef.current.scrollLeft;\n    var offsetLeftDelta = activeTab.offsetLeft - scrollAreaRef.current.scrollLeft;\n    var offsetRight = activeTab.offsetLeft + tabWidth - scrollAreaRef.current.scrollLeft;\n    var offsetRightDelta = scrollAreaWidth - offsetRight;\n\n    if (offsetRight > scrollAreaWidth || offsetRightDelta < tabHalfWidth) {\n      scrollAreaRef.current.scrollBy({\n        left: offsetRight > scrollAreaWidth ? Math.abs(offsetRightDelta) + tabHalfWidth : tabHalfWidth - offsetRightDelta,\n        behavior: \'smooth\'\n      });\n    } else if (offsetLeft < 0 || offsetLeftDelta < tabHalfWidth) {\n      scrollAreaRef.current.scrollBy({\n        left: offsetLeft < 0 ? offsetLeftDelta - tabHalfWidth : -(tabHalfWidth - offsetLeftDelta),\n        behavior: \'smooth\'\n      });\n    }\n  }, [activeTab]);\n  var classNames = classnames_default()(scrollerCssClasses.ROOT, TabScroller_defineProperty({}, "".concat(scrollerCssClasses.ALIGN, "-").concat(align), align));\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", TabScroller_objectSpread(TabScroller_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props), {}, {\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      ref: scrollAreaRef,\n      className: scrollerCssClasses.SCROLL_AREA,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        ref: scrollContentRef,\n        className: scrollerCssClasses.SCROLL_CONTENT,\n        children: children\n      })\n    })\n  }));\n});\nTabScroller.displayName = \'MDCTabScroller\';\n/* harmony default export */ const tabs_TabScroller = (TabScroller);\n;// CONCATENATED MODULE: ./src/tabs/TabBar.jsx\nvar TabBar_excluded = ["tabs", "value", "align", "indicatorIcon", "stacked", "minWidth", "minWidthIndicator", "fade", "iconIndicator", "underlineIndicator", "onChange", "element", "component", "className", "children"];\n\nfunction TabBar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TabBar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TabBar_ownKeys(Object(source), true).forEach(function (key) { TabBar_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TabBar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TabBar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TabBar_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TabBar_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TabBar_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar TabBar = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var tabs = _ref.tabs,\n      value = _ref.value,\n      align = _ref.align,\n      indicatorIcon = _ref.indicatorIcon,\n      _ref$stacked = _ref.stacked,\n      stacked = _ref$stacked === void 0 ? false : _ref$stacked,\n      _ref$minWidth = _ref.minWidth,\n      minWidth = _ref$minWidth === void 0 ? false : _ref$minWidth,\n      _ref$minWidthIndicato = _ref.minWidthIndicator,\n      minWidthIndicator = _ref$minWidthIndicato === void 0 ? false : _ref$minWidthIndicato,\n      _ref$fade = _ref.fade,\n      fade = _ref$fade === void 0 ? false : _ref$fade,\n      _ref$iconIndicator = _ref.iconIndicator,\n      iconIndicator = _ref$iconIndicator === void 0 ? Boolean(indicatorIcon) : _ref$iconIndicator,\n      _ref$underlineIndicat = _ref.underlineIndicator,\n      underlineIndicator = _ref$underlineIndicat === void 0 ? !iconIndicator : _ref$underlineIndicat,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? tabs === null || tabs === void 0 ? void 0 : tabs.map(function (tab) {\n    return (0,react.createElement)(tabs_Tab, tab);\n  }) : _ref$children,\n      props = TabBar_objectWithoutProperties(_ref, TabBar_excluded);\n\n  var rootRef = (0,react.useRef)();\n  var activeTabRef = (0,react.useRef)();\n  var previousTabRef = (0,react.useRef)();\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  (0,react.useEffect)(function () {\n    activeTabRef.current = rootRef.current.querySelector(".".concat(tabClassNames.ACTIVE));\n  }, []);\n  var handleTabClick = (0,react.useCallback)(function (element, value) {\n    previousTabRef.current = activeTabRef.current;\n    activeTabRef.current = element;\n    onChange(value);\n  }, [onChange]);\n  var classNames = classnames_default()(barCssClasses.ROOT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, TabBar_objectSpread(TabBar_objectSpread({\n    ref: rootRef,\n    className: classNames,\n    role: "tablist"\n  }, props), {}, {\n    children: !isUndefined(value) ? /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_context.Provider, {\n      value: {\n        activeTab: activeTabRef.current,\n        previousTab: previousTabRef.current\n      },\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_TabScroller, {\n        align: align,\n        activeTab: activeTabRef.current,\n        children: react.Children.map(children, function (tab, index) {\n          var tabValue = isUndefined(tab.props.value) ? index : tab.props.value;\n          return (0,react.cloneElement)(tab, {\n            value: tabValue,\n            active: tabValue === value,\n            indicatorIcon: tab.props.indicatorIcon || indicatorIcon,\n            stacked: tab.props.stacked || stacked,\n            minWidth: tab.props.minWidth || minWidth,\n            minWidthIndicator: tab.props.minWidthIndicator || minWidthIndicator,\n            fade: fade,\n            underline: underlineIndicator,\n            onClick: handleTabClick\n          });\n        })\n      })\n    }) : children\n  }));\n});\nTabBar.displayName = \'MDCTabBar\';\nTabBar.propTypes = {\n  align: prop_types_default().oneOf(Object.values(Align)),\n  indicatorIcon: (prop_types_default()).node,\n  stacked: (prop_types_default()).bool,\n  minWidth: (prop_types_default()).bool,\n  fade: (prop_types_default()).bool,\n  iconIndicator: (prop_types_default()).bool,\n  underlineIndicator: (prop_types_default()).bool,\n  onChange: (prop_types_default()).func\n};\nTabBar.Align = Align;\n/* harmony default export */ const tabs_TabBar = (TabBar);\n;// CONCATENATED MODULE: ./src/tabs/index.js\n\n\ntabs_Tab.Bar = tabs_TabBar;\n\n;// CONCATENATED MODULE: ./src/tooltip/constants.js\nvar tooltip_constants_numbers = {\n  BOUNDED_ANCHOR_GAP: 4,\n  UNBOUNDED_ANCHOR_GAP: 8,\n  MIN_VIEWPORT_TOOLTIP_THRESHOLD: 8,\n  ENTER_DURATION_MS: 150,\n  EXIT_DURATION_MS: 75,\n  HIDE_DELAY_MS: 600,\n  SHOW_DELAY_MS: 500,\n  MIN_HEIGHT: 24,\n  MAX_WIDTH: 200,\n  CARET_INDENTATION: 24,\n  ANIMATION_SCALE: 0.8\n};\nvar tooltip_constants_cssClasses = {\n  ROOT: \'mdc-tooltip\',\n  RICH: \'mdc-tooltip--rich\',\n  MULTILINE: \'mdc-tooltip--multiline\',\n  SHOWING: \'mdc-tooltip--showing\',\n  ACTIONS: \'mdc-tooltip--rich-actions\',\n  SHOWING_TRANSITION: \'mdc-tooltip--showing-transition\',\n  SHOWN: \'mdc-tooltip--shown\',\n  HIDE: \'mdc-tooltip--hide\',\n  HIDE_TRANSITION: \'mdc-tooltip--hide-transition\',\n  SURFACE: \'mdc-tooltip__surface\',\n  SURFACE_ANIMATION: \'mdc-tooltip__surface-animation\',\n  TITLE: \'mdc-tooltip__title\',\n  CONTENT: \'mdc-tooltip__content\',\n  CONTENT_LINK: \'mdc-tooltip__content-link\',\n  ACTION: \'mdc-tooltip__action\',\n  CARET_TOP: \'mdc-tooltip__caret-surface-top\',\n  CARET_BOTTOM: \'mdc-tooltip__caret-surface-bottom\'\n};\n;// CONCATENATED MODULE: ./src/tooltip/Tooltip.jsx\nfunction Tooltip_slicedToArray(arr, i) { return Tooltip_arrayWithHoles(arr) || Tooltip_iterableToArrayLimit(arr, i) || Tooltip_unsupportedIterableToArray(arr, i) || Tooltip_nonIterableRest(); }\n\nfunction Tooltip_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Tooltip_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Tooltip_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Tooltip_arrayLikeToArray(o, minLen); }\n\nfunction Tooltip_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Tooltip_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Tooltip_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar Tooltip = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var label = _ref.label,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      children = _ref.children;\n  var tooltipRef = (0,react.useRef)();\n  var targetRef = (0,react.useRef)(null);\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = Tooltip_slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  (0,react.useImperativeHandle)(ref, function () {\n    return tooltipRef.current;\n  });\n  (0,react.useEffect)(function () {\n    function handleScroll() {\n      setActive(function (active) {\n        return active && !active;\n      });\n    }\n\n    document.addEventListener(\'scroll\', handleScroll);\n    return function () {\n      document.removeEventListener(\'scroll\', handleScroll);\n    };\n  }, []);\n  var handleMouseEnter = (0,react.useCallback)(function (event) {\n    targetRef.current = event.currentTarget;\n    setActive(true);\n  }, []);\n  var handleMouseLeave = (0,react.useCallback)(function () {\n    targetRef.current = null;\n    setActive(false);\n  }, []);\n  var handleEntering = (0,react.useCallback)(function () {\n    var tooltipRect = tooltipRef.current.getBoundingClientRect();\n    var targetRect = targetRef.current.getBoundingClientRect();\n    var top = targetRect.top + targetRect.height + tooltip_constants_numbers.UNBOUNDED_ANCHOR_GAP;\n    var left = targetRect.left + targetRect.width * 0.5 - tooltipRect.width * 0.5;\n    var right = left + tooltipRect.width;\n    var bottom = top + tooltipRect.height;\n    var overflowBottom = window.innerHeight - bottom;\n    var overflowRight = window.innerWidth - right;\n\n    if (tooltipRect.height > tooltip_constants_numbers.MIN_HEIGHT && tooltipRect.width >= tooltip_constants_numbers.MAX_WIDTH) {\n      tooltipRef.current.classList.add(tooltip_constants_cssClasses.MULTILINE);\n    }\n\n    if (overflowBottom < 0) {\n      tooltipRef.current.style.top = "".concat(targetRect.top - tooltipRect.height - tooltip_constants_numbers.UNBOUNDED_ANCHOR_GAP, "px");\n    } else {\n      tooltipRef.current.style.top = "".concat(top, "px");\n    }\n\n    if (overflowRight < 0) {\n      tooltipRef.current.style.left = "".concat(targetRect.right - tooltipRect.width, "px");\n    } else {\n      tooltipRef.current.style.left = "".concat(left < 0 ? targetRect.left : left, "px");\n    }\n  }, []);\n  var classNames = classnames_default()(tooltip_constants_cssClasses.ROOT, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Layer, {\n      modal: true,\n      "in": active,\n      timeout: {\n        enter: tooltip_constants_numbers.SHOW_DELAY_MS,\n        exit: tooltip_constants_numbers.HIDE_DELAY_MS\n      },\n      classNames: {\n        enter: tooltip_constants_cssClasses.SHOWING_TRANSITION,\n        enterActive: "".concat(tooltip_constants_cssClasses.SHOWING_TRANSITION, " ").concat(tooltip_constants_cssClasses.SHOWING),\n        enterDone: "".concat(tooltip_constants_cssClasses.SHOWING_TRANSITION, " ").concat(tooltip_constants_cssClasses.SHOWN),\n        exit: "".concat(tooltip_constants_cssClasses.HIDE_TRANSITION, " ").concat(tooltip_constants_cssClasses.HIDE),\n        exitActive: "".concat(tooltip_constants_cssClasses.HIDE_TRANSITION, " ").concat(tooltip_constants_cssClasses.HIDE)\n      },\n      onEntering: handleEntering,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(Element, {\n        ref: tooltipRef,\n        className: classNames,\n        role: "tooltip",\n        "aria-hidden": active ? undefined : \'true\',\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n          className: "".concat(tooltip_constants_cssClasses.SURFACE, " ").concat(tooltip_constants_cssClasses.SURFACE_ANIMATION),\n          children: label\n        })\n      })\n    })]\n  });\n});\nTooltip.displayName = \'MDCTooltip\';\n/* harmony default export */ const tooltip_Tooltip = (Tooltip);\n;// CONCATENATED MODULE: ./src/tooltip/RichTooltip.jsx\nfunction RichTooltip_slicedToArray(arr, i) { return RichTooltip_arrayWithHoles(arr) || RichTooltip_iterableToArrayLimit(arr, i) || RichTooltip_unsupportedIterableToArray(arr, i) || RichTooltip_nonIterableRest(); }\n\nfunction RichTooltip_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction RichTooltip_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return RichTooltip_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return RichTooltip_arrayLikeToArray(o, minLen); }\n\nfunction RichTooltip_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction RichTooltip_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction RichTooltip_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar RichTooltip = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var title = _ref.title,\n      content = _ref.content,\n      actions = _ref.actions,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      children = _ref.children;\n  var tooltipRef = (0,react.useRef)();\n  var targetRef = (0,react.useRef)();\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = RichTooltip_slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  (0,react.useImperativeHandle)(ref, function () {\n    return tooltipRef.current;\n  });\n  (0,react.useEffect)(function () {\n    function handleScroll() {\n      setActive(function (active) {\n        return active && !active;\n      });\n    }\n\n    document.addEventListener(\'scroll\', handleScroll);\n    return function () {\n      document.removeEventListener(\'scroll\', handleScroll);\n    };\n  }, []);\n  var handleTargetMouseEnter = (0,react.useCallback)(function () {\n    setActive(true);\n  }, []);\n  var handleTargetMouseLeave = (0,react.useCallback)(function () {\n    setActive(false);\n  }, []);\n  var handleTooltipMouseEnter = (0,react.useCallback)(function () {\n    setActive(true);\n  }, []);\n  var handleTooltipMouseLeave = (0,react.useCallback)(function () {\n    setActive(false);\n  }, []);\n  var handleEntering = (0,react.useCallback)(function () {\n    var tooltipRect = tooltipRef.current.getBoundingClientRect();\n    var targetRect = targetRef.current.getBoundingClientRect();\n    var width = tooltipRef.current.firstChild.clientWidth;\n    var height = tooltipRef.current.firstChild.scrollHeight;\n    var top = targetRect.bottom + window.scrollY + tooltip_constants_numbers.UNBOUNDED_ANCHOR_GAP;\n    var left = targetRect.right + window.scrollX + tooltip_constants_numbers.UNBOUNDED_ANCHOR_GAP;\n    var right = left + width + tooltip_constants_numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    var bottom = top + height + tooltip_constants_numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    var overflowBottom = window.innerHeight - bottom;\n    var overflowRight = window.innerWidth - right;\n\n    if (overflowBottom < 0) {\n      tooltipRef.current.style.top = "".concat(top + overflowBottom, "px");\n    } else {\n      tooltipRef.current.style.top = "".concat(top, "px");\n    }\n\n    if (overflowRight < 0) {\n      tooltipRef.current.style.left = "".concat(targetRect.right - tooltipRect.width, "px");\n    } else {\n      tooltipRef.current.style.left = "".concat(left < 0 ? targetRect.left : left, "px");\n    }\n\n    tooltipRef.current.getBoundingClientRect();\n  }, []);\n  var classNames = classnames_default()(tooltip_constants_cssClasses.ROOT, tooltip_constants_cssClasses.RICH, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n      component: children,\n      ref: targetRef,\n      onMouseEnter: handleTargetMouseEnter,\n      onMouseLeave: handleTargetMouseLeave\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Layer, {\n      modal: true,\n      "in": active,\n      timeout: {\n        enter: tooltip_constants_numbers.SHOW_DELAY_MS,\n        exit: tooltip_constants_numbers.HIDE_DELAY_MS\n      },\n      classNames: {\n        enter: tooltip_constants_cssClasses.SHOWING_TRANSITION,\n        enterActive: "".concat(tooltip_constants_cssClasses.SHOWING_TRANSITION, " ").concat(tooltip_constants_cssClasses.SHOWING),\n        enterDone: "".concat(tooltip_constants_cssClasses.SHOWING_TRANSITION, " ").concat(tooltip_constants_cssClasses.SHOWN),\n        exit: tooltip_constants_cssClasses.SHOWN,\n        exitActive: "".concat(tooltip_constants_cssClasses.HIDE_TRANSITION, " ").concat(tooltip_constants_cssClasses.SHOWN),\n        exitDone: "".concat(tooltip_constants_cssClasses.HIDE_TRANSITION, " ").concat(tooltip_constants_cssClasses.HIDE)\n      },\n      mountOnEnter: true,\n      unmountOnExit: true,\n      onEntering: handleEntering,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(Element, {\n        ref: tooltipRef,\n        className: classNames,\n        role: "tooltip",\n        "aria-hidden": active ? undefined : \'true\',\n        "aria-expanded": active ? \'true\' : undefined,\n        onMouseEnter: handleTooltipMouseEnter,\n        onMouseLeave: handleTooltipMouseLeave,\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n          className: "".concat(tooltip_constants_cssClasses.SURFACE, " ").concat(tooltip_constants_cssClasses.SURFACE_ANIMATION),\n          children: [title && /*#__PURE__*/(0,jsx_runtime.jsx)("h2", {\n            className: tooltip_constants_cssClasses.TITLE,\n            children: title\n          }), content && /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n            className: tooltip_constants_cssClasses.CONTENT,\n            children: content\n          }), actions && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n            className: tooltip_constants_cssClasses.ACTIONS,\n            children: react.Children.map(actions, function (action) {\n              return /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n                component: action,\n                "aria-label": "action"\n              });\n            })\n          })]\n        })\n      })\n    })]\n  });\n});\nRichTooltip.displayName = \'MDCRichTooltip\';\n/* harmony default export */ const tooltip_RichTooltip = (RichTooltip);\n;// CONCATENATED MODULE: ./src/tooltip/index.js\n\n\n;// CONCATENATED MODULE: ./src/text-field/constants.js\nvar text_field_constants_cssClasses = {\n  ROOT: \'mdc-text-field\',\n  FILLED: \'mdc-text-field--filled\',\n  OUTLINED: \'mdc-text-field--outlined\',\n  TEXTAREA: \'mdc-text-field--textarea\',\n  DISABLED: \'mdc-text-field--disabled\',\n  FOCUSED: \'mdc-text-field--focused\',\n  INVALID: \'mdc-text-field--invalid\',\n  LABEL_FLOATING: \'mdc-text-field--label-floating\',\n  NO_LABEL: \'mdc-text-field--no-label\',\n  END_ALIGNED: \'mdc-text-field--end-aligned\',\n  WITH_LEADING_ICON: \'mdc-text-field--with-leading-icon\',\n  WITH_TRAILING_ICON: \'mdc-text-field--with-trailing-icon\',\n  WITH_INTERNAL_COUNTER: \'mdc-text-field--with-internal-counter\',\n  ICON: \'mdc-text-field__icon\',\n  ICON_LEADING: \'mdc-text-field__icon--leading\',\n  ICON_TRAILING: \'mdc-text-field__icon--trailing\',\n  INPUT: \'mdc-text-field__input\',\n  AFFIX: \'mdc-text-field__affix\',\n  AFFIX_PREFIX: \'mdc-text-field__affix--prefix\',\n  AFFIX_SUFFIX: \'mdc-text-field__affix--suffix\',\n  RESIZER: \'mdc-text-field__resizer\',\n  RIPPLE: \'mdc-text-field__ripple\',\n  HELPER_LINE: \'mdc-text-field-helper-line\',\n  HELPER_TEXT: \'mdc-text-field-helper-text\',\n  HELPER_TEXT_PERSISTENT: \'mdc-text-field-helper-text--persistent\',\n  HELPER_TEXT_VALIDATION: \'mdc-text-field-helper-text--validation-msg\',\n  CHARACTER_COUNTER: \'mdc-text-field-character-counter\'\n};\n;// CONCATENATED MODULE: ./src/text-field/HelperText.jsx\nvar text_field_HelperText_excluded = ["persistent", "validation"];\n\nfunction text_field_HelperText_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction text_field_HelperText_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { text_field_HelperText_ownKeys(Object(source), true).forEach(function (key) { text_field_HelperText_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { text_field_HelperText_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction text_field_HelperText_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction text_field_HelperText_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = text_field_HelperText_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction text_field_HelperText_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar HelperText_HelperText = function HelperText(_ref) {\n  var _classnames;\n\n  var _ref$persistent = _ref.persistent,\n      persistent = _ref$persistent === void 0 ? false : _ref$persistent,\n      _ref$validation = _ref.validation,\n      validation = _ref$validation === void 0 ? false : _ref$validation,\n      props = text_field_HelperText_objectWithoutProperties(_ref, text_field_HelperText_excluded);\n\n  var classNames = classnames_default()(text_field_constants_cssClasses.HELPER_TEXT, (_classnames = {}, text_field_HelperText_defineProperty(_classnames, text_field_constants_cssClasses.HELPER_TEXT_PERSISTENT, persistent), text_field_HelperText_defineProperty(_classnames, text_field_constants_cssClasses.HELPER_TEXT_VALIDATION, validation), _classnames));\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", text_field_HelperText_objectSpread({\n    className: classNames\n  }, props));\n};\n\nHelperText_HelperText.displayName = \'MDCTextFieldHelperText\';\nHelperText_HelperText.propTypes = {\n  persistent: (prop_types_default()).bool,\n  validation: (prop_types_default()).bool\n};\n/* harmony default export */ const text_field_HelperText = (HelperText_HelperText);\n;// CONCATENATED MODULE: ./src/text-field/CharacterCounter.jsx\nvar CharacterCounter_excluded = ["value", "maxValue"];\n\nfunction CharacterCounter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction CharacterCounter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CharacterCounter_ownKeys(Object(source), true).forEach(function (key) { CharacterCounter_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CharacterCounter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction CharacterCounter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction CharacterCounter_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = CharacterCounter_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction CharacterCounter_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nfunction CharacterCounter(_ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      maxValue = _ref.maxValue,\n      props = CharacterCounter_objectWithoutProperties(_ref, CharacterCounter_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", CharacterCounter_objectSpread(CharacterCounter_objectSpread({\n    className: "mdc-text-field-character-counter"\n  }, props), {}, {\n    children: value + (maxValue ? " / ".concat(maxValue) : \'\')\n  }));\n}\nCharacterCounter.displayName = \'MDCTextFieldCharacterCounter\';\nCharacterCounter.propTypes = {\n  value: (prop_types_default()).number,\n  maxValue: (prop_types_default()).number\n};\n;// CONCATENATED MODULE: ./src/text-field/Input.jsx\nvar text_field_Input_excluded = ["textarea", "autoResize", "element"];\n\nfunction text_field_Input_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction text_field_Input_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { text_field_Input_ownKeys(Object(source), true).forEach(function (key) { text_field_Input_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { text_field_Input_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction text_field_Input_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction text_field_Input_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = text_field_Input_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction text_field_Input_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\nvar Input_Input = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var textarea = _ref.textarea,\n      autoResize = _ref.autoResize,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? textarea ? \'textarea\' : \'input\' : _ref$element,\n      props = text_field_Input_objectWithoutProperties(_ref, text_field_Input_excluded);\n\n  (0,react.useLayoutEffect)(function () {\n    if (!autoResize) return;\n    var element = ref.current;\n\n    function setHeight() {\n      element.style.height = \'1rem\';\n      element.style.height = "".concat(element.scrollHeight, "px");\n    }\n\n    setHeight();\n    element.addEventListener(\'input\', setHeight);\n    return function () {\n      return element.removeEventListener(\'input\', setHeight);\n    };\n  }, [autoResize, ref]);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, text_field_Input_objectSpread({\n    ref: ref,\n    className: text_field_constants_cssClasses.INPUT\n  }, props));\n});\nInput_Input.displayName = \'MDCTextFieldInput\';\n/* harmony default export */ const text_field_Input = (Input_Input);\n;// CONCATENATED MODULE: ./src/text-field/Resizer.jsx\nvar Resizer_excluded = ["textarea", "autoResize", "children"];\n\nfunction Resizer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Resizer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Resizer_ownKeys(Object(source), true).forEach(function (key) { Resizer_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Resizer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Resizer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Resizer_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Resizer_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Resizer_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\nvar Resizer = function Resizer(_ref) {\n  var textarea = _ref.textarea,\n      autoResize = _ref.autoResize,\n      children = _ref.children,\n      props = Resizer_objectWithoutProperties(_ref, Resizer_excluded);\n\n  return textarea && !autoResize ? /*#__PURE__*/(0,jsx_runtime.jsx)("span", Resizer_objectSpread(Resizer_objectSpread({\n    className: text_field_constants_cssClasses.RESIZER\n  }, props), {}, {\n    children: children\n  })) : children;\n};\n\nResizer.displayName = \'MDCTextFieldResizer\';\n/* harmony default export */ const text_field_Resizer = (Resizer);\n;// CONCATENATED MODULE: ./src/text-field/TextField.jsx\nvar TextField_excluded = ["value", "defaultValue", "label", "leadingIcon", "trailingIcon", "prefix", "suffix", "persistentHelperText", "helperText", "validationMessage", "filled", "outlined", "fullWidth", "disabled", "textarea", "endAligned", "autoResize", "characterCounter", "internalCharacterCounter", "className", "element", "onFocus", "onBlur", "onChange"];\n\nfunction TextField_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TextField_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TextField_ownKeys(Object(source), true).forEach(function (key) { TextField_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TextField_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TextField_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TextField_slicedToArray(arr, i) { return TextField_arrayWithHoles(arr) || TextField_iterableToArrayLimit(arr, i) || TextField_unsupportedIterableToArray(arr, i) || TextField_nonIterableRest(); }\n\nfunction TextField_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction TextField_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return TextField_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TextField_arrayLikeToArray(o, minLen); }\n\nfunction TextField_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction TextField_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction TextField_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction TextField_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TextField_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TextField_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TextField = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _inputRef$current2, _classnames, _inputRef$current3;\n\n  var value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      label = _ref.label,\n      leadingIcon = _ref.leadingIcon,\n      trailingIcon = _ref.trailingIcon,\n      prefix = _ref.prefix,\n      suffix = _ref.suffix,\n      persistentHelperText = _ref.persistentHelperText,\n      _ref$helperText = _ref.helperText,\n      helperText = _ref$helperText === void 0 ? persistentHelperText : _ref$helperText,\n      validationMessage = _ref.validationMessage,\n      _ref$filled = _ref.filled,\n      filled = _ref$filled === void 0 ? false : _ref$filled,\n      _ref$outlined = _ref.outlined,\n      outlined = _ref$outlined === void 0 ? false : _ref$outlined,\n      _ref$fullWidth = _ref.fullWidth,\n      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$textarea = _ref.textarea,\n      textarea = _ref$textarea === void 0 ? false : _ref$textarea,\n      _ref$endAligned = _ref.endAligned,\n      endAligned = _ref$endAligned === void 0 ? false : _ref$endAligned,\n      _ref$autoResize = _ref.autoResize,\n      autoResize = _ref$autoResize === void 0 ? false : _ref$autoResize,\n      _ref$characterCounter = _ref.characterCounter,\n      characterCounter = _ref$characterCounter === void 0 ? false : _ref$characterCounter,\n      _ref$internalCharacte = _ref.internalCharacterCounter,\n      internalCharacterCounter = _ref$internalCharacte === void 0 ? characterCounter === \'internal\' : _ref$internalCharacte,\n      className = _ref.className,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'label\' : _ref$element,\n      _ref$onFocus = _ref.onFocus,\n      onFocus = _ref$onFocus === void 0 ? Function.prototype : _ref$onFocus,\n      _ref$onBlur = _ref.onBlur,\n      onBlur = _ref$onBlur === void 0 ? Function.prototype : _ref$onBlur,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? Function.prototype : _ref$onChange,\n      props = TextField_objectWithoutProperties(_ref, TextField_excluded);\n\n  var inputRef = (0,react.useRef)();\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = TextField_slicedToArray(_useState, 2),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = TextField_slicedToArray(_useState3, 2),\n      touched = _useState4[0],\n      setTouched = _useState4[1];\n\n  var _useState5 = (0,react.useState)(true),\n      _useState6 = TextField_slicedToArray(_useState5, 2),\n      valid = _useState6[0],\n      setValid = _useState6[1];\n\n  var _useState7 = (0,react.useState)(),\n      _useState8 = TextField_slicedToArray(_useState7, 2),\n      interactionCoords = _useState8[0],\n      setInteractionCoords = _useState8[1];\n\n  var _useState9 = (0,react.useState)((value === null || value === void 0 ? void 0 : value.length) || (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value) || 0),\n      _useState10 = TextField_slicedToArray(_useState9, 2),\n      count = _useState10[0],\n      setCount = _useState10[1];\n\n  var handleInteraction = (0,react.useCallback)(function (event) {\n    var targetClientRect = event.target.getBoundingClientRect();\n    setInteractionCoords({\n      x: event.clientX - targetClientRect.left,\n      y: event.clientY - targetClientRect.top\n    });\n  }, []);\n  var handleInputFocus = (0,react.useCallback)(function (event) {\n    setFocused(true);\n    setTouched(true);\n    onFocus(event);\n  }, [onFocus]);\n  var handleInputBlur = (0,react.useCallback)(function (event) {\n    setFocused(false);\n    setInteractionCoords();\n    onBlur(event);\n  }, [onBlur]);\n  var handleInputChange = (0,react.useCallback)(function (event) {\n    var _inputRef$current;\n\n    var value = inputRef.current.value;\n    var isValid = (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.validity.valid;\n    setCount(value.length);\n    setValid(isValid);\n    onChange(event, value);\n  }, [onChange]);\n  var focusedOrHasValue = focused || value !== undefined && value !== null && value !== \'\' || defaultValue !== undefined && defaultValue !== null && defaultValue !== \'\' || Boolean((_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.value);\n  var hasHelperLine = helperText || validationMessage || characterCounter;\n  var classNames = classnames_default()(text_field_constants_cssClasses.ROOT, (_classnames = {}, TextField_defineProperty(_classnames, text_field_constants_cssClasses.FILLED, filled && !fullWidth), TextField_defineProperty(_classnames, text_field_constants_cssClasses.OUTLINED, outlined && !fullWidth), TextField_defineProperty(_classnames, text_field_constants_cssClasses.TEXTAREA, textarea), TextField_defineProperty(_classnames, text_field_constants_cssClasses.DISABLED, disabled), TextField_defineProperty(_classnames, text_field_constants_cssClasses.FOCUSED, focused), TextField_defineProperty(_classnames, text_field_constants_cssClasses.INVALID, !valid && touched), TextField_defineProperty(_classnames, text_field_constants_cssClasses.LABEL_FLOATING, focusedOrHasValue), TextField_defineProperty(_classnames, text_field_constants_cssClasses.NO_LABEL, !label), TextField_defineProperty(_classnames, text_field_constants_cssClasses.END_ALIGNED, endAligned), TextField_defineProperty(_classnames, text_field_constants_cssClasses.WITH_LEADING_ICON, leadingIcon), TextField_defineProperty(_classnames, text_field_constants_cssClasses.WITH_TRAILING_ICON, trailingIcon), TextField_defineProperty(_classnames, text_field_constants_cssClasses.WITH_INTERNAL_COUNTER, internalCharacterCounter), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(Element, {\n      ref: ref,\n      className: classNames,\n      onMouseDown: handleInteraction,\n      onTouchStart: handleInteraction,\n      children: [filled && /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: text_field_constants_cssClasses.RIPPLE\n      }), filled && label && /*#__PURE__*/(0,jsx_runtime.jsx)(floating_label_FloatingLabel, {\n        label: label,\n        "float": focusedOrHasValue\n      }), outlined && /*#__PURE__*/(0,jsx_runtime.jsx)(notched_outline_NotchedOutline, {\n        notched: focusedOrHasValue,\n        children: label && /*#__PURE__*/(0,jsx_runtime.jsx)(floating_label_FloatingLabel, {\n          label: label,\n          "float": focusedOrHasValue\n        })\n      }), leadingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: leadingIcon,\n        fallback: icon_Icon,\n        className: "".concat(text_field_constants_cssClasses.ICON, " ").concat(text_field_constants_cssClasses.ICON_LEADING),\n        tabIndex: "0",\n        role: "button"\n      }), prefix && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: "".concat(text_field_constants_cssClasses.AFFIX, " ").concat(text_field_constants_cssClasses.AFFIX_PREFIX),\n        children: prefix\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(text_field_Resizer, {\n        textarea: textarea,\n        autoResize: autoResize,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_Input, TextField_objectSpread({\n          ref: inputRef,\n          value: value,\n          defaultValue: defaultValue,\n          textarea: textarea,\n          autoResize: autoResize,\n          disabled: disabled,\n          onInput: handleInputChange,\n          onFocus: handleInputFocus,\n          onBlur: handleInputBlur\n        }, props)), internalCharacterCounter && /*#__PURE__*/(0,jsx_runtime.jsx)(CharacterCounter, {\n          value: count,\n          maxValue: props.maxLength\n        })]\n      }), suffix && /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n        className: "".concat(text_field_constants_cssClasses.AFFIX, " ").concat(text_field_constants_cssClasses.AFFIX_SUFFIX),\n        children: suffix\n      }), trailingIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n        component: trailingIcon,\n        fallback: icon_Icon,\n        className: "".concat(text_field_constants_cssClasses.ICON, " ").concat(text_field_constants_cssClasses.ICON_TRAILING),\n        tabIndex: "0",\n        role: "button"\n      }), filled && /*#__PURE__*/(0,jsx_runtime.jsx)(line_ripple_LineRipple, {\n        active: focused,\n        transformOrigin: interactionCoords === null || interactionCoords === void 0 ? void 0 : interactionCoords.x\n      })]\n    }), hasHelperLine && /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n      className: text_field_constants_cssClasses.HELPER_LINE,\n      children: [helperText && /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_HelperText, {\n        persistent: Boolean(persistentHelperText),\n        children: helperText\n      }), validationMessage && !valid && /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_HelperText, {\n        validation: true,\n        children: typeof validationMessage === \'string\' ? validationMessage : (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.validationMessage\n      }), characterCounter && !internalCharacterCounter && /*#__PURE__*/(0,jsx_runtime.jsx)(CharacterCounter, {\n        value: count,\n        maxValue: props.maxLength\n      })]\n    })]\n  });\n});\nTextField.displayName = \'MDCTextField\';\nTextField.propTypes = {\n  value: (prop_types_default()).any,\n  label: (prop_types_default()).string,\n  leadingIcon: (prop_types_default()).node,\n  trailingIcon: (prop_types_default()).node,\n  prefix: (prop_types_default()).string,\n  suffix: (prop_types_default()).string,\n  outline: (prop_types_default()).bool,\n  fullWidth: (prop_types_default()).bool,\n  textarea: (prop_types_default()).bool,\n  dense: (prop_types_default()).bool,\n  disabled: (prop_types_default()).bool,\n  helperText: (prop_types_default()).string,\n  persistentHelperText: (prop_types_default()).string,\n  validationMessage: prop_types_default().oneOfType([(prop_types_default()).bool, (prop_types_default()).string])\n};\n/* harmony default export */ const text_field_TextField = (TextField);\n;// CONCATENATED MODULE: ./src/text-field/index.js\n\n;// CONCATENATED MODULE: ./src/top-app-bar/constants.js\nvar top_app_bar_constants_numbers = {\n  DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,\n  MAX_TOP_APP_BAR_HEIGHT: 128\n};\nvar top_app_bar_constants_cssClasses = {\n  ROOT: \'mdc-top-app-bar\',\n  FIXED: \'mdc-top-app-bar--fixed\',\n  FIXED_SCROLLED: \'mdc-top-app-bar--fixed-scrolled\',\n  FIXED_ADJUST: \'mdc-top-app-bar--fixed-adjust\',\n  PROMINENT: \'mdc-top-app-bar--prominent\',\n  PROMINENT_FIXED_ADJUST: \'mdc-top-app-bar--prominent-fixed-adjust\',\n  DENSE: \'mdc-top-app-bar--dense\',\n  DENSE_FIXED_ADJUST: \'mdc-top-app-bar--dense-fixed-adjust\',\n  DENSE_PROMINENT_FIXED_ADJUST: \'mdc-top-app-bar--dense-prominent-fixed-adjust\',\n  SHORT: \'mdc-top-app-bar--short\',\n  SHORT_COLLAPSED: \'mdc-top-app-bar--short-collapsed\',\n  SHORT_FIXED_ADJUST: \'mdc-top-app-bar--short-fixed-adjust\',\n  STICKY: \'mdc-top-app-bar--sticky\',\n  STICKY_HIDDEN: \'mdc-top-app-bar--sticky-hidden\',\n  STICKY_SHOWN: \'mdc-top-app-bar--sticky-shown\',\n  RAISED: \'mdc-top-app-bar--raised\',\n  ROW: \'mdc-top-app-bar__row\',\n  SECTION: \'mdc-top-app-bar__section\',\n  SECTION_ALIGN_START: \'mdc-top-app-bar__section--align-start\',\n  SECTION_ALIGN_CENTER: \'mdc-top-app-bar__section--align-center\',\n  SECTION_ALIGN_END: \'mdc-top-app-bar__section--align-end\',\n  NAVIGATION_ICON: \'mdc-top-app-bar__navigation-icon\',\n  ACTION_ITEM: \'mdc-top-app-bar__action-item\',\n  TITLE: \'mdc-top-app-bar__title\'\n};\nvar constants_Align = {\n  START: \'start\',\n  CENTER: \'center\',\n  END: \'end\'\n};\n;// CONCATENATED MODULE: ./src/top-app-bar/TopAppBarRow.jsx\nvar TopAppBarRow_excluded = ["element", "className"];\n\nfunction TopAppBarRow_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TopAppBarRow_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TopAppBarRow_ownKeys(Object(source), true).forEach(function (key) { TopAppBarRow_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TopAppBarRow_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TopAppBarRow_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TopAppBarRow_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TopAppBarRow_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TopAppBarRow_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar TopAppBarRow = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'div\' : _ref$element,\n      className = _ref.className,\n      props = TopAppBarRow_objectWithoutProperties(_ref, TopAppBarRow_excluded);\n\n  var classNames = classnames_default()(top_app_bar_constants_cssClasses.ROW, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, TopAppBarRow_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nTopAppBarRow.displayName = \'MDCTopAppBarRow\';\n/* harmony default export */ const top_app_bar_TopAppBarRow = (TopAppBarRow);\n;// CONCATENATED MODULE: ./src/top-app-bar/TopAppBarSection.jsx\nvar TopAppBarSection_excluded = ["align", "element", "className"];\n\nfunction TopAppBarSection_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TopAppBarSection_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TopAppBarSection_ownKeys(Object(source), true).forEach(function (key) { TopAppBarSection_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TopAppBarSection_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TopAppBarSection_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TopAppBarSection_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TopAppBarSection_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TopAppBarSection_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar TopAppBarSection = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var align = _ref.align,\n      _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'section\' : _ref$element,\n      className = _ref.className,\n      props = TopAppBarSection_objectWithoutProperties(_ref, TopAppBarSection_excluded);\n\n  var classNames = classnames_default()(top_app_bar_constants_cssClasses.SECTION, (_classnames = {}, TopAppBarSection_defineProperty(_classnames, top_app_bar_constants_cssClasses.SECTION_ALIGN_START, align === constants_Align.START), TopAppBarSection_defineProperty(_classnames, top_app_bar_constants_cssClasses.SECTION_ALIGN_CENTER, align === constants_Align.CENTER), TopAppBarSection_defineProperty(_classnames, top_app_bar_constants_cssClasses.SECTION_ALIGN_END, align === constants_Align.END), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, TopAppBarSection_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nTopAppBarSection.displayName = \'MDCTopAppBarSection\';\nTopAppBarSection.propTypes = {\n  align: prop_types_default().oneOf(Object.values(constants_Align))\n};\n/* harmony default export */ const top_app_bar_TopAppBarSection = (TopAppBarSection);\n;// CONCATENATED MODULE: ./src/top-app-bar/TopAppBar.jsx\nvar TopAppBar_excluded = ["title", "navigationIcon", "actionItems", "fixed", "sticky", "dense", "prominent", "short", "collapsed", "raised", "onNavigationIconClick", "element", "component", "className", "children"];\n\nfunction TopAppBar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TopAppBar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TopAppBar_ownKeys(Object(source), true).forEach(function (key) { TopAppBar_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TopAppBar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TopAppBar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TopAppBar_slicedToArray(arr, i) { return TopAppBar_arrayWithHoles(arr) || TopAppBar_iterableToArrayLimit(arr, i) || TopAppBar_unsupportedIterableToArray(arr, i) || TopAppBar_nonIterableRest(); }\n\nfunction TopAppBar_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction TopAppBar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return TopAppBar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TopAppBar_arrayLikeToArray(o, minLen); }\n\nfunction TopAppBar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction TopAppBar_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction TopAppBar_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction TopAppBar_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TopAppBar_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TopAppBar_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar TopAppBar = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var title = _ref.title,\n      navigationIcon = _ref.navigationIcon,\n      actionItems = _ref.actionItems,\n      _ref$fixed = _ref.fixed,\n      fixed = _ref$fixed === void 0 ? false : _ref$fixed,\n      _ref$sticky = _ref.sticky,\n      sticky = _ref$sticky === void 0 ? false : _ref$sticky,\n      _ref$dense = _ref.dense,\n      dense = _ref$dense === void 0 ? false : _ref$dense,\n      _ref$prominent = _ref.prominent,\n      prominent = _ref$prominent === void 0 ? false : _ref$prominent,\n      _ref$short = _ref["short"],\n      _short = _ref$short === void 0 ? false : _ref$short,\n      _ref$collapsed = _ref.collapsed,\n      collapsed = _ref$collapsed === void 0 ? false : _ref$collapsed,\n      _ref$raised = _ref.raised,\n      raised = _ref$raised === void 0 ? false : _ref$raised,\n      _ref$onNavigationIcon = _ref.onNavigationIconClick,\n      onNavigationIconClick = _ref$onNavigationIcon === void 0 ? Function.prototype : _ref$onNavigationIcon,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'header\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      children = _ref.children,\n      props = TopAppBar_objectWithoutProperties(_ref, TopAppBar_excluded);\n\n  var rootRef = (0,react.useRef)();\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = TopAppBar_slicedToArray(_useState, 2),\n      scrolled = _useState2[0],\n      setScrolled = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = TopAppBar_slicedToArray(_useState3, 2),\n      hidden = _useState4[0],\n      setHidden = _useState4[1];\n\n  (0,react.useImperativeHandle)(ref, function () {\n    return rootRef.current;\n  });\n  (0,react.useEffect)(function () {\n    var lastScrollPosition = 0;\n\n    function handleScroll() {\n      var scrollValue = window.pageYOffset;\n\n      if (fixed) {\n        setScrolled(scrollValue > 0);\n      } else if (sticky) {\n        var currentScrollPosition = Math.max(scrollValue, 0);\n        var diff = currentScrollPosition - lastScrollPosition;\n        var shouldHide = diff > 0;\n        lastScrollPosition = currentScrollPosition;\n        setHidden(shouldHide);\n      }\n    }\n\n    window.addEventListener(\'scroll\', handleScroll);\n    return function () {\n      window.removeEventListener(\'scroll\', handleScroll);\n    };\n  }, [fixed, sticky]);\n  var classNames = classnames_default()(top_app_bar_constants_cssClasses.ROOT, (_classnames = {}, TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.FIXED, fixed), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.STICKY, sticky), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.DENSE, dense), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.PROMINENT, prominent), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.SHORT, _short), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.SHORT_COLLAPSED, _short && collapsed), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.FIXED_SCROLLED, fixed && scrolled), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.STICKY_HIDDEN, sticky && hidden), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.STICKY_SHOWN, sticky && !hidden), TopAppBar_defineProperty(_classnames, top_app_bar_constants_cssClasses.RAISED, raised), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, TopAppBar_objectSpread(TopAppBar_objectSpread({\n    ref: rootRef,\n    className: classNames\n  }, props), {}, {\n    children: children || /*#__PURE__*/(0,jsx_runtime.jsxs)(top_app_bar_TopAppBarRow, {\n      children: [(title || navigationIcon) && /*#__PURE__*/(0,jsx_runtime.jsxs)(top_app_bar_TopAppBarSection, {\n        align: constants_Align.START,\n        children: [navigationIcon && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n          component: navigationIcon,\n          fallback: icon_button_IconButton,\n          className: top_app_bar_constants_cssClasses.NAVIGATION_ICON,\n          onClick: onNavigationIconClick\n        }), title && /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n          component: title,\n          fallback: "span",\n          className: top_app_bar_constants_cssClasses.TITLE\n        })]\n      }), actionItems && /*#__PURE__*/(0,jsx_runtime.jsx)(top_app_bar_TopAppBarSection, {\n        align: constants_Align.END,\n        children: react.Children.map(actionItems, function (item) {\n          return /*#__PURE__*/(0,jsx_runtime.jsx)(Clone, {\n            component: item,\n            className: top_app_bar_constants_cssClasses.ACTION_ITEM\n          });\n        })\n      })]\n    })\n  }));\n});\nTopAppBar.displayName = \'MDCTopAppBar\';\nTopAppBar.propTypes = {\n  title: (prop_types_default()).node,\n  navigationIcon: (prop_types_default()).node,\n  actionItems: prop_types_default().oneOfType([(prop_types_default()).element, prop_types_default().arrayOf((prop_types_default()).element)]),\n  fixed: (prop_types_default()).bool,\n  sticky: (prop_types_default()).bool,\n  dense: (prop_types_default()).bool,\n  prominent: (prop_types_default()).bool,\n  "short": (prop_types_default()).bool,\n  collapsed: (prop_types_default()).bool,\n  raised: (prop_types_default()).bool\n};\n/* harmony default export */ const top_app_bar_TopAppBar = (TopAppBar);\n;// CONCATENATED MODULE: ./src/top-app-bar/TopAppBarActionItem.jsx\nvar TopAppBarActionItem_excluded = ["element", "component", "className"];\n\nfunction TopAppBarActionItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TopAppBarActionItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TopAppBarActionItem_ownKeys(Object(source), true).forEach(function (key) { TopAppBarActionItem_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TopAppBarActionItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TopAppBarActionItem_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TopAppBarActionItem_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TopAppBarActionItem_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TopAppBarActionItem_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar TopAppBarActionItem = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'span\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = TopAppBarActionItem_objectWithoutProperties(_ref, TopAppBarActionItem_excluded);\n\n  var classNames = classnames_default()(top_app_bar_constants_cssClasses.ACTION_ITEM, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, TopAppBarActionItem_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nTopAppBarActionItem.displayName = \'MDCTopAppBarActionItem\';\n/* harmony default export */ const top_app_bar_TopAppBarActionItem = (TopAppBarActionItem);\n;// CONCATENATED MODULE: ./src/top-app-bar/TopAppBarFixedAdjust.jsx\nvar TopAppBarFixedAdjust_excluded = ["dense", "prominent", "short", "element", "component", "className"];\n\nfunction TopAppBarFixedAdjust_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TopAppBarFixedAdjust_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TopAppBarFixedAdjust_ownKeys(Object(source), true).forEach(function (key) { TopAppBarFixedAdjust_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TopAppBarFixedAdjust_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TopAppBarFixedAdjust_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TopAppBarFixedAdjust_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TopAppBarFixedAdjust_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TopAppBarFixedAdjust_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar TopAppBarFixedAdjust = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$dense = _ref.dense,\n      dense = _ref$dense === void 0 ? false : _ref$dense,\n      _ref$prominent = _ref.prominent,\n      prominent = _ref$prominent === void 0 ? false : _ref$prominent,\n      _ref$short = _ref["short"],\n      _short = _ref$short === void 0 ? false : _ref$short,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? \'div\' : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = TopAppBarFixedAdjust_objectWithoutProperties(_ref, TopAppBarFixedAdjust_excluded);\n\n  var classNames = classnames_default()(top_app_bar_constants_cssClasses.FIXED_ADJUST, (_classnames = {}, TopAppBarFixedAdjust_defineProperty(_classnames, top_app_bar_constants_cssClasses.DENSE_FIXED_ADJUST, dense), TopAppBarFixedAdjust_defineProperty(_classnames, top_app_bar_constants_cssClasses.PROMINENT_FIXED_ADJUST, prominent), TopAppBarFixedAdjust_defineProperty(_classnames, top_app_bar_constants_cssClasses.DENSE_PROMINENT_FIXED_ADJUST, dense && prominent), TopAppBarFixedAdjust_defineProperty(_classnames, top_app_bar_constants_cssClasses.SHORT_FIXED_ADJUST, _short), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, TopAppBarFixedAdjust_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nTopAppBarFixedAdjust.displayName = \'MDCTopAppBarFixedAdjust\';\n/* harmony default export */ const top_app_bar_TopAppBarFixedAdjust = (TopAppBarFixedAdjust);\n;// CONCATENATED MODULE: ./src/top-app-bar/TopAppBarNavigationIcon.jsx\nvar TopAppBarNavigationIcon_excluded = ["className"];\n\nfunction TopAppBarNavigationIcon_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TopAppBarNavigationIcon_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TopAppBarNavigationIcon_ownKeys(Object(source), true).forEach(function (key) { TopAppBarNavigationIcon_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TopAppBarNavigationIcon_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TopAppBarNavigationIcon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TopAppBarNavigationIcon_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TopAppBarNavigationIcon_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TopAppBarNavigationIcon_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar TopAppBarNavigationIcon = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var className = _ref.className,\n      props = TopAppBarNavigationIcon_objectWithoutProperties(_ref, TopAppBarNavigationIcon_excluded);\n\n  var classNames = classnames_default()(top_app_bar_constants_cssClasses.NAVIGATION_ICON, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, TopAppBarNavigationIcon_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nTopAppBarNavigationIcon.displayName = \'MDCTopAppBarNavigationIcon\';\n/* harmony default export */ const top_app_bar_TopAppBarNavigationIcon = (TopAppBarNavigationIcon);\n;// CONCATENATED MODULE: ./src/top-app-bar/TopAppBarTitle.jsx\nvar TopAppBarTitle_excluded = ["element", "className"];\n\nfunction TopAppBarTitle_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction TopAppBarTitle_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TopAppBarTitle_ownKeys(Object(source), true).forEach(function (key) { TopAppBarTitle_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TopAppBarTitle_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction TopAppBarTitle_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TopAppBarTitle_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = TopAppBarTitle_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction TopAppBarTitle_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nvar TopAppBarTitle = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _ref$element = _ref.element,\n      Element = _ref$element === void 0 ? \'span\' : _ref$element,\n      className = _ref.className,\n      props = TopAppBarTitle_objectWithoutProperties(_ref, TopAppBarTitle_excluded);\n\n  var classNames = classnames_default()(top_app_bar_constants_cssClasses.TITLE, className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, TopAppBarTitle_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nTopAppBarTitle.displayName = \'MDCTopAppBarTitle\';\n/* harmony default export */ const top_app_bar_TopAppBarTitle = (TopAppBarTitle);\n;// CONCATENATED MODULE: ./src/top-app-bar/index.js\n\n\n\n\n\n\n\ntop_app_bar_TopAppBar.ActionItem = top_app_bar_TopAppBarActionItem;\ntop_app_bar_TopAppBar.FixedAdjust = top_app_bar_TopAppBarFixedAdjust;\ntop_app_bar_TopAppBar.NavigationIcon = top_app_bar_TopAppBarNavigationIcon;\ntop_app_bar_TopAppBar.Row = top_app_bar_TopAppBarRow;\ntop_app_bar_TopAppBar.Section = top_app_bar_TopAppBarSection;\ntop_app_bar_TopAppBar.Title = top_app_bar_TopAppBarTitle;\n\n;// CONCATENATED MODULE: ./src/typography/constants.js\nvar elementsByType = {\n  headline1: \'h1\',\n  headline2: \'h2\',\n  headline3: \'h3\',\n  headline4: \'h4\',\n  headline5: \'h5\',\n  headline6: \'h6\',\n  subtitle1: \'h5\',\n  subtitle2: \'h6\',\n  body1: \'p\',\n  body2: \'p\',\n  button: \'span\',\n  caption: \'span\',\n  overline: \'span\'\n};\nvar typography_constants_cssClasses = {\n  ROOT: \'mdc-typography\',\n  DISPLAY: \'mdc-typography--display\',\n  ALIGN: \'mdc-typography--align\',\n  NO_MARGIN: \'mdc-typography--no-margin\',\n  NO_WRAP: \'mdc-typography--no-wrap\'\n};\n;// CONCATENATED MODULE: ./src/typography/Typography.jsx\nvar Typography_excluded = ["type", "display", "align", "noMargin", "noWrap", "element", "component", "className"];\n\nfunction Typography_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Typography_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Typography_ownKeys(Object(source), true).forEach(function (key) { Typography_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Typography_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Typography_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Typography_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Typography_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Typography_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\nvar Typography = /*#__PURE__*/(0,react.forwardRef)(function (_ref, ref) {\n  var _classnames;\n\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \'body1\' : _ref$type,\n      display = _ref.display,\n      align = _ref.align,\n      _ref$noMargin = _ref.noMargin,\n      noMargin = _ref$noMargin === void 0 ? false : _ref$noMargin,\n      _ref$noWrap = _ref.noWrap,\n      noWrap = _ref$noWrap === void 0 ? false : _ref$noWrap,\n      _ref$element = _ref.element,\n      element = _ref$element === void 0 ? elementsByType[type] : _ref$element,\n      _ref$component = _ref.component,\n      Element = _ref$component === void 0 ? element : _ref$component,\n      className = _ref.className,\n      props = Typography_objectWithoutProperties(_ref, Typography_excluded);\n\n  var classNames = classnames_default()(typography_constants_cssClasses.ROOT, "".concat(typography_constants_cssClasses.ROOT, "--").concat(type), (_classnames = {}, Typography_defineProperty(_classnames, "".concat(typography_constants_cssClasses.DISPLAY, "-").concat(display), display), Typography_defineProperty(_classnames, "".concat(typography_constants_cssClasses.ALIGN, "-").concat(align), align), Typography_defineProperty(_classnames, typography_constants_cssClasses.NO_MARGIN, noMargin), Typography_defineProperty(_classnames, typography_constants_cssClasses.NO_WRAP, noWrap), _classnames), className);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Element, Typography_objectSpread({\n    ref: ref,\n    className: classNames\n  }, props));\n});\nTypography.displayName = \'MDCTypography\';\nTypography.propTypes = {\n  type: prop_types_default().oneOf(Object.keys(elementsByType)),\n  display: prop_types_default().oneOf([\'block\', \'inline\', \'inline-block\']),\n  align: prop_types_default().oneOf([\'left\', \'center\', \'right\', \'justify\']),\n  noMargin: (prop_types_default()).bool,\n  noWrap: (prop_types_default()).bool\n};\n/* harmony default export */ const typography_Typography = (Typography);\n;// CONCATENATED MODULE: ./src/typography/index.js\n\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./docs/src/utils/code.js\nfunction code_typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { code_typeof = function _typeof(obj) { return typeof obj; }; } else { code_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return code_typeof(obj); }\n\nfunction code_slicedToArray(arr, i) { return code_arrayWithHoles(arr) || code_iterableToArrayLimit(arr, i) || code_unsupportedIterableToArray(arr, i) || code_nonIterableRest(); }\n\nfunction code_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction code_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return code_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return code_arrayLikeToArray(o, minLen); }\n\nfunction code_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction code_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction code_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\nfunction jsxToHtml(root) {\n  return react.Children.toArray(root).map(function (item) {\n    return printComponent(item);\n  }).join(\'\\n\');\n}\nfunction printComponent(component) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var type = typeof component.type === \'string\' ? component.type : component.type.displayName.replace(\'MDC\', \'\');\n  var children = component.props.children;\n  var props = Object.entries(component.props).filter(function (_ref) {\n    var _ref2 = code_slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return key !== \'children\' && value !== undefined;\n  });\n  var indent = \'  \'.repeat(depth);\n  var result = indent + "<".concat(type);\n\n  if (!isEmpty(props)) {\n    result += " ".concat(printProps(props, depth + 1));\n  }\n\n  if (!children) {\n    result += result.endsWith(\'\\n\') ? indent + \'/>\' : \' />\';\n  } else if ( /*#__PURE__*/(0,react.isValidElement)(children)) {\n    result += ">\\n".concat(printComponent(children, depth + 1), "\\n").concat(indent, "</").concat(type, ">");\n  } else if (Array.isArray(children)) {\n    result += result.endsWith(\'\\n\') ? indent + \'>\\n\' : \'>\\n\';\n    result += children.map(function (child) {\n      return printComponent(child, depth + 1);\n    }).join(\'\\n\');\n    result += "\\n".concat(indent, "</").concat(type, ">");\n  } else {\n    result += ">".concat(children, "</").concat(type, ">");\n  }\n\n  return result;\n}\n\nfunction printProps(props, depth) {\n  var result = \'\';\n  var indent = \'  \'.repeat(depth);\n\n  if (props.length < 3) {\n    result += props.map(printProp).join(\' \');\n  } else {\n    result += "\\n".concat(indent).concat(props.map(printProp).join(\'\\n\' + indent), "\\n");\n  }\n\n  return result;\n}\n\nfunction printProp(_ref3) {\n  var _ref4 = code_slicedToArray(_ref3, 2),\n      key = _ref4[0],\n      value = _ref4[1];\n\n  if (value === true) {\n    return key;\n  } else if (typeof value === \'string\') {\n    return "".concat(key, "=\\"").concat(value, "\\"");\n  } else {\n    return "".concat(key, "={").concat(printValue(value), "}");\n  }\n}\n\nfunction printValue(value) {\n  if (typeof value === \'string\') {\n    return "\'".concat(value, "\'");\n  } else if (Array.isArray(value)) {\n    return "[".concat(value.map(function (v) {\n      return printValue(v);\n    }).join(\', \'), "]");\n  } else if ( /*#__PURE__*/(0,react.isValidElement)(value)) {\n    return printComponent(value);\n  } else if (typeof value === \'function\') {\n    return "".concat(value.name || \'[Function]\');\n  } else {\n    return value;\n  }\n}\n\nfunction isEmpty(value) {\n  if (!value) {\n    return true;\n  } else if (Array.isArray(value)) {\n    return value.length === 0;\n  } else if (code_typeof(value) === \'object\') {\n    return Object.keys(value).length === 0;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/highlight.js/lib/core.js\nvar core = __webpack_require__(390);\n;// CONCATENATED MODULE: ./node_modules/highlight.js/es/core.js\n// https://nodejs.org/api/packages.html#packages_writing_dual_packages_while_avoiding_or_minimizing_hazards\n\n/* harmony default export */ const es_core = (core);\n\n;// CONCATENATED MODULE: ./node_modules/highlight.js/es/languages/javascript.js\nconst IDENT_RE = \'[A-Za-z$_][0-9A-Za-z$_]*\';\nconst KEYWORDS = [\n  "as", // for exports\n  "in",\n  "of",\n  "if",\n  "for",\n  "while",\n  "finally",\n  "var",\n  "new",\n  "function",\n  "do",\n  "return",\n  "void",\n  "else",\n  "break",\n  "catch",\n  "instanceof",\n  "with",\n  "throw",\n  "case",\n  "default",\n  "try",\n  "switch",\n  "continue",\n  "typeof",\n  "delete",\n  "let",\n  "yield",\n  "const",\n  "class",\n  // JS handles these with a special rule\n  // "get",\n  // "set",\n  "debugger",\n  "async",\n  "await",\n  "static",\n  "import",\n  "from",\n  "export",\n  "extends"\n];\nconst LITERALS = [\n  "true",\n  "false",\n  "null",\n  "undefined",\n  "NaN",\n  "Infinity"\n];\n\nconst TYPES = [\n  "Intl",\n  "DataView",\n  "Number",\n  "Math",\n  "Date",\n  "String",\n  "RegExp",\n  "Object",\n  "Function",\n  "Boolean",\n  "Error",\n  "Symbol",\n  "Set",\n  "Map",\n  "WeakSet",\n  "WeakMap",\n  "Proxy",\n  "Reflect",\n  "JSON",\n  "Promise",\n  "Float64Array",\n  "Int16Array",\n  "Int32Array",\n  "Int8Array",\n  "Uint16Array",\n  "Uint32Array",\n  "Float32Array",\n  "Array",\n  "Uint8Array",\n  "Uint8ClampedArray",\n  "ArrayBuffer",\n  "BigInt64Array",\n  "BigUint64Array",\n  "BigInt"\n];\n\nconst ERROR_TYPES = [\n  "EvalError",\n  "InternalError",\n  "RangeError",\n  "ReferenceError",\n  "SyntaxError",\n  "TypeError",\n  "URIError"\n];\n\nconst BUILT_IN_GLOBALS = [\n  "setInterval",\n  "setTimeout",\n  "clearInterval",\n  "clearTimeout",\n\n  "require",\n  "exports",\n\n  "eval",\n  "isFinite",\n  "isNaN",\n  "parseFloat",\n  "parseInt",\n  "decodeURI",\n  "decodeURIComponent",\n  "encodeURI",\n  "encodeURIComponent",\n  "escape",\n  "unescape"\n];\n\nconst BUILT_IN_VARIABLES = [\n  "arguments",\n  "this",\n  "super",\n  "console",\n  "window",\n  "document",\n  "localStorage",\n  "module",\n  "global" // Node.js\n];\n\nconst BUILT_INS = [].concat(\n  BUILT_IN_GLOBALS,\n  TYPES,\n  ERROR_TYPES\n);\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === "string") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat(\'(?=\', re, \')\');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join("");\n  return joined;\n}\n\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\n/** @type LanguageFn */\nfunction javascript(hljs) {\n  /**\n   * Takes a string like "<Booger" and checks to see\n   * if we can find a matching "</Booger" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */\n  const hasClosingTag = (match, { after }) => {\n    const tag = "</" + match[0].slice(1);\n    const pos = match.input.indexOf(tag, after);\n    return pos !== -1;\n  };\n\n  const IDENT_RE$1 = IDENT_RE;\n  const FRAGMENT = {\n    begin: \'<>\',\n    end: \'</>\'\n  };\n  const XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n    /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */\n    isTrulyOpeningTag: (match, response) => {\n      const afterMatchIndex = match[0].length + match.index;\n      const nextChar = match.input[afterMatchIndex];\n      // nested type?\n      // HTML should not include another raw `<` inside a tag\n      // But a type might: `<Array<Array<number>>`, etc.\n      if (nextChar === "<") {\n        response.ignoreMatch();\n        return;\n      }\n      // <something>\n      // This is now either a tag or a type.\n      if (nextChar === ">") {\n        // if we cannot find a matching closing tag, then we\n        // will ignore it\n        if (!hasClosingTag(match, { after: afterMatchIndex })) {\n          response.ignoreMatch();\n        }\n      }\n    }\n  };\n  const KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_INS,\n    "variable.language": BUILT_IN_VARIABLES\n  };\n\n  // https://tc39.es/ecma262/#sec-literals-numeric-literals\n  const decimalDigits = \'[0-9](_?[0-9])*\';\n  const frac = `\\\\.(${decimalDigits})`;\n  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n  const NUMBER = {\n    className: \'number\',\n    variants: [\n      // DecimalLiteral\n      { begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` +\n        `[eE][+-]?(${decimalDigits})\\\\b` },\n      { begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b` },\n\n      // DecimalBigIntegerLiteral\n      { begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b` },\n\n      // NonDecimalIntegerLiteral\n      { begin: "\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b" },\n      { begin: "\\\\b0[bB][0-1](_?[0-1])*n?\\\\b" },\n      { begin: "\\\\b0[oO][0-7](_?[0-7])*n?\\\\b" },\n\n      // LegacyOctalIntegerLiteral (does not include underscore separators)\n      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n      { begin: "\\\\b0[0-7]+n?\\\\b" },\n    ],\n    relevance: 0\n  };\n\n  const SUBST = {\n    className: \'subst\',\n    begin: \'\\\\$\\\\{\',\n    end: \'\\\\}\',\n    keywords: KEYWORDS$1,\n    contains: [] // defined later\n  };\n  const HTML_TEMPLATE = {\n    begin: \'html`\',\n    end: \'\',\n    starts: {\n      end: \'`\',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: \'xml\'\n    }\n  };\n  const CSS_TEMPLATE = {\n    begin: \'css`\',\n    end: \'\',\n    starts: {\n      end: \'`\',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: \'css\'\n    }\n  };\n  const TEMPLATE_STRING = {\n    className: \'string\',\n    begin: \'`\',\n    end: \'`\',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  const JSDOC_COMMENT = hljs.COMMENT(\n    /\\/\\*\\*(?!\\/)/,\n    \'\\\\*/\',\n    {\n      relevance: 0,\n      contains: [\n        {\n          begin: \'(?=@[A-Za-z]+)\',\n          relevance: 0,\n          contains: [\n            {\n              className: \'doctag\',\n              begin: \'@[A-Za-z]+\'\n            },\n            {\n              className: \'type\',\n              begin: \'\\\\{\',\n              end: \'\\\\}\',\n              excludeEnd: true,\n              excludeBegin: true,\n              relevance: 0\n            },\n            {\n              className: \'variable\',\n              begin: IDENT_RE$1 + \'(?=\\\\s*(-)|$)\',\n              endsParent: true,\n              relevance: 0\n            },\n            // eat spaces (not newlines) so we can find\n            // types or variables\n            {\n              begin: /(?=[^\\n])\\s/,\n              relevance: 0\n            }\n          ]\n        }\n      ]\n    }\n  );\n  const COMMENT = {\n    className: "comment",\n    variants: [\n      JSDOC_COMMENT,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_LINE_COMMENT_MODE\n    ]\n  };\n  const SUBST_INTERNALS = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    HTML_TEMPLATE,\n    CSS_TEMPLATE,\n    TEMPLATE_STRING,\n    NUMBER,\n    hljs.REGEXP_MODE\n  ];\n  SUBST.contains = SUBST_INTERNALS\n    .concat({\n      // we need to pair up {} inside our subst to prevent\n      // it from ending too early by matching another }\n      begin: /\\{/,\n      end: /\\}/,\n      keywords: KEYWORDS$1,\n      contains: [\n        "self"\n      ].concat(SUBST_INTERNALS)\n    });\n  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n    // eat recursive parens in sub expressions\n    {\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS$1,\n      contains: ["self"].concat(SUBST_AND_COMMENTS)\n    }\n  ]);\n  const PARAMS = {\n    className: \'params\',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: KEYWORDS$1,\n    contains: PARAMS_CONTAINS\n  };\n\n  // ES6 classes\n  const CLASS_OR_EXTENDS = {\n    variants: [\n      {\n        match: [\n          /class/,\n          /\\s+/,\n          IDENT_RE$1\n        ],\n        scope: {\n          1: "keyword",\n          3: "title.class"\n        }\n      },\n      {\n        match: [\n          /extends/,\n          /\\s+/,\n          concat(IDENT_RE$1, "(", concat(/\\./, IDENT_RE$1), ")*")\n        ],\n        scope: {\n          1: "keyword",\n          3: "title.class.inherited"\n        }\n      }\n    ]\n  };\n\n  const CLASS_REFERENCE = {\n    relevance: 0,\n    match: /\\b[A-Z][a-z]+([A-Z][a-z]+)*/,\n    className: "title.class",\n    keywords: {\n      _: [\n        // se we still get relevance credit for JS library classes\n        ...TYPES,\n        ...ERROR_TYPES\n      ]\n    }\n  };\n\n  const USE_STRICT = {\n    label: "use_strict",\n    className: \'meta\',\n    relevance: 10,\n    begin: /^\\s*[\'"]use (strict|asm)[\'"]/\n  };\n\n  const FUNCTION_DEFINITION = {\n    variants: [\n      {\n        match: [\n          /function/,\n          /\\s+/,\n          IDENT_RE$1,\n          /(?=\\s*\\()/\n        ]\n      },\n      // anonymous function\n      {\n        match: [\n          /function/,\n          /\\s*(?=\\()/\n        ]\n      }\n    ],\n    className: {\n      1: "keyword",\n      3: "title.function"\n    },\n    label: "func.def",\n    contains: [ PARAMS ],\n    illegal: /%/\n  };\n\n  const UPPER_CASE_CONSTANT = {\n    relevance: 0,\n    match: /\\b[A-Z][A-Z_0-9]+\\b/,\n    className: "variable.constant"\n  };\n\n  function noneOf(list) {\n    return concat("(?!", list.join("|"), ")");\n  }\n\n  const FUNCTION_CALL = {\n    match: concat(\n      /\\b/,\n      noneOf([\n        ...BUILT_IN_GLOBALS,\n        "super"\n      ]),\n      IDENT_RE$1, lookahead(/\\(/)),\n    className: "title.function",\n    relevance: 0\n  };\n\n  const PROPERTY_ACCESS = {\n    begin: concat(/\\./, lookahead(\n      concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)\n    )),\n    end: IDENT_RE$1,\n    excludeBegin: true,\n    keywords: "prototype",\n    className: "property",\n    relevance: 0\n  };\n\n  const GETTER_OR_SETTER = {\n    match: [\n      /get|set/,\n      /\\s+/,\n      IDENT_RE$1,\n      /(?=\\()/\n    ],\n    className: {\n      1: "keyword",\n      3: "title.function"\n    },\n    contains: [\n      { // eat to avoid empty params\n        begin: /\\(\\)/\n      },\n      PARAMS\n    ]\n  };\n\n  const FUNC_LEAD_IN_RE = \'(\\\\(\' +\n    \'[^()]*(\\\\(\' +\n    \'[^()]*(\\\\(\' +\n    \'[^()]*\' +\n    \'\\\\)[^()]*)*\' +\n    \'\\\\)[^()]*)*\' +\n    \'\\\\)|\' + hljs.UNDERSCORE_IDENT_RE + \')\\\\s*=>\';\n\n  const FUNCTION_VARIABLE = {\n    match: [\n      /const|var|let/, /\\s+/,\n      IDENT_RE$1, /\\s*/,\n      /=\\s*/,\n      lookahead(FUNC_LEAD_IN_RE)\n    ],\n    className: {\n      1: "keyword",\n      3: "title.function"\n    },\n    contains: [\n      PARAMS\n    ]\n  };\n\n  return {\n    name: \'Javascript\',\n    aliases: [\'js\', \'jsx\', \'mjs\', \'cjs\'],\n    keywords: KEYWORDS$1,\n    // this will be extended by TypeScript\n    exports: { PARAMS_CONTAINS },\n    illegal: /#(?![$_A-z])/,\n    contains: [\n      hljs.SHEBANG({\n        label: "shebang",\n        binary: "node",\n        relevance: 5\n      }),\n      USE_STRICT,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      HTML_TEMPLATE,\n      CSS_TEMPLATE,\n      TEMPLATE_STRING,\n      COMMENT,\n      NUMBER,\n      CLASS_REFERENCE,\n      {\n        className: \'attr\',\n        begin: IDENT_RE$1 + lookahead(\':\'),\n        relevance: 0\n      },\n      FUNCTION_VARIABLE,\n      { // "value" container\n        begin: \'(\' + hljs.RE_STARTERS_RE + \'|\\\\b(case|return|throw)\\\\b)\\\\s*\',\n        keywords: \'return throw case\',\n        relevance: 0,\n        contains: [\n          COMMENT,\n          hljs.REGEXP_MODE,\n          {\n            className: \'function\',\n            // we have to count the parens to make sure we actually have the\n            // correct bounding ( ) before the =>.  There could be any number of\n            // sub-expressions inside also surrounded by parens.\n            begin: FUNC_LEAD_IN_RE,\n            returnBegin: true,\n            end: \'\\\\s*=>\',\n            contains: [\n              {\n                className: \'params\',\n                variants: [\n                  {\n                    begin: hljs.UNDERSCORE_IDENT_RE,\n                    relevance: 0\n                  },\n                  {\n                    className: null,\n                    begin: /\\(\\s*\\)/,\n                    skip: true\n                  },\n                  {\n                    begin: /\\(/,\n                    end: /\\)/,\n                    excludeBegin: true,\n                    excludeEnd: true,\n                    keywords: KEYWORDS$1,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          },\n          { // could be a comma delimited list of params to a function call\n            begin: /,/,\n            relevance: 0\n          },\n          {\n            match: /\\s+/,\n            relevance: 0\n          },\n          { // JSX\n            variants: [\n              { begin: FRAGMENT.begin, end: FRAGMENT.end },\n              {\n                begin: XML_TAG.begin,\n                // we carefully check the opening tag to see if it truly\n                // is a tag and not a false positive\n                \'on:begin\': XML_TAG.isTrulyOpeningTag,\n                end: XML_TAG.end\n              }\n            ],\n            subLanguage: \'xml\',\n            contains: [\n              {\n                begin: XML_TAG.begin,\n                end: XML_TAG.end,\n                skip: true,\n                contains: [\'self\']\n              }\n            ]\n          }\n        ],\n      },\n      FUNCTION_DEFINITION,\n      {\n        // prevent this from getting swallowed up by function\n        // since they appear "function like"\n        beginKeywords: "while if switch catch for"\n      },\n      {\n        // we have to count the parens to make sure we actually have the correct\n        // bounding ( ).  There could be any number of sub-expressions inside\n        // also surrounded by parens.\n        begin: \'\\\\b(?!function)\' + hljs.UNDERSCORE_IDENT_RE +\n          \'\\\\(\' + // first parens\n          \'[^()]*(\\\\(\' +\n            \'[^()]*(\\\\(\' +\n              \'[^()]*\' +\n            \'\\\\)[^()]*)*\' +\n          \'\\\\)[^()]*)*\' +\n          \'\\\\)\\\\s*\\\\{\', // end parens\n        returnBegin:true,\n        label: "func.def",\n        contains: [\n          PARAMS,\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })\n        ]\n      },\n      // catch ... so it won\'t trigger the property rule below\n      {\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      PROPERTY_ACCESS,\n      // hack: prevents detection of keywords in some circumstances\n      // .keyword()\n      // $keyword = x\n      {\n        match: \'\\\\$\' + IDENT_RE$1,\n        relevance: 0\n      },\n      {\n        match: [ /\\bconstructor(?=\\s*\\()/ ],\n        className: { 1: "title.function" },\n        contains: [ PARAMS ]\n      },\n      FUNCTION_CALL,\n      UPPER_CASE_CONSTANT,\n      CLASS_OR_EXTENDS,\n      GETTER_OR_SETTER,\n      {\n        match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      }\n    ]\n  };\n}\n\n/* harmony default export */ const languages_javascript = (javascript);\n\n;// CONCATENATED MODULE: ./node_modules/highlight.js/es/languages/scss.js\nconst MODES = (hljs) => {\n  return {\n    IMPORTANT: {\n      scope: \'meta\',\n      begin: \'!important\'\n    },\n    HEXCOLOR: {\n      scope: \'number\',\n      begin: \'#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})\'\n    },\n    ATTRIBUTE_SELECTOR_MODE: {\n      scope: \'selector-attr\',\n      begin: /\\[/,\n      end: /\\]/,\n      illegal: \'$\',\n      contains: [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE\n      ]\n    },\n    CSS_NUMBER_MODE: {\n      scope: \'number\',\n      begin: hljs.NUMBER_RE + \'(\' +\n        \'%|em|ex|ch|rem\' +\n        \'|vw|vh|vmin|vmax\' +\n        \'|cm|mm|in|pt|pc|px\' +\n        \'|deg|grad|rad|turn\' +\n        \'|s|ms\' +\n        \'|Hz|kHz\' +\n        \'|dpi|dpcm|dppx\' +\n        \')?\',\n      relevance: 0\n    },\n    CSS_VARIABLE: {\n      className: "attr",\n      begin: /--[A-Za-z][A-Za-z0-9_-]*/\n    }\n  };\n};\n\nconst TAGS = [\n  \'a\',\n  \'abbr\',\n  \'address\',\n  \'article\',\n  \'aside\',\n  \'audio\',\n  \'b\',\n  \'blockquote\',\n  \'body\',\n  \'button\',\n  \'canvas\',\n  \'caption\',\n  \'cite\',\n  \'code\',\n  \'dd\',\n  \'del\',\n  \'details\',\n  \'dfn\',\n  \'div\',\n  \'dl\',\n  \'dt\',\n  \'em\',\n  \'fieldset\',\n  \'figcaption\',\n  \'figure\',\n  \'footer\',\n  \'form\',\n  \'h1\',\n  \'h2\',\n  \'h3\',\n  \'h4\',\n  \'h5\',\n  \'h6\',\n  \'header\',\n  \'hgroup\',\n  \'html\',\n  \'i\',\n  \'iframe\',\n  \'img\',\n  \'input\',\n  \'ins\',\n  \'kbd\',\n  \'label\',\n  \'legend\',\n  \'li\',\n  \'main\',\n  \'mark\',\n  \'menu\',\n  \'nav\',\n  \'object\',\n  \'ol\',\n  \'p\',\n  \'q\',\n  \'quote\',\n  \'samp\',\n  \'section\',\n  \'span\',\n  \'strong\',\n  \'summary\',\n  \'sup\',\n  \'table\',\n  \'tbody\',\n  \'td\',\n  \'textarea\',\n  \'tfoot\',\n  \'th\',\n  \'thead\',\n  \'time\',\n  \'tr\',\n  \'ul\',\n  \'var\',\n  \'video\'\n];\n\nconst MEDIA_FEATURES = [\n  \'any-hover\',\n  \'any-pointer\',\n  \'aspect-ratio\',\n  \'color\',\n  \'color-gamut\',\n  \'color-index\',\n  \'device-aspect-ratio\',\n  \'device-height\',\n  \'device-width\',\n  \'display-mode\',\n  \'forced-colors\',\n  \'grid\',\n  \'height\',\n  \'hover\',\n  \'inverted-colors\',\n  \'monochrome\',\n  \'orientation\',\n  \'overflow-block\',\n  \'overflow-inline\',\n  \'pointer\',\n  \'prefers-color-scheme\',\n  \'prefers-contrast\',\n  \'prefers-reduced-motion\',\n  \'prefers-reduced-transparency\',\n  \'resolution\',\n  \'scan\',\n  \'scripting\',\n  \'update\',\n  \'width\',\n  // TODO: find a better solution?\n  \'min-width\',\n  \'max-width\',\n  \'min-height\',\n  \'max-height\'\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n  \'active\',\n  \'any-link\',\n  \'blank\',\n  \'checked\',\n  \'current\',\n  \'default\',\n  \'defined\',\n  \'dir\', // dir()\n  \'disabled\',\n  \'drop\',\n  \'empty\',\n  \'enabled\',\n  \'first\',\n  \'first-child\',\n  \'first-of-type\',\n  \'fullscreen\',\n  \'future\',\n  \'focus\',\n  \'focus-visible\',\n  \'focus-within\',\n  \'has\', // has()\n  \'host\', // host or host()\n  \'host-context\', // host-context()\n  \'hover\',\n  \'indeterminate\',\n  \'in-range\',\n  \'invalid\',\n  \'is\', // is()\n  \'lang\', // lang()\n  \'last-child\',\n  \'last-of-type\',\n  \'left\',\n  \'link\',\n  \'local-link\',\n  \'not\', // not()\n  \'nth-child\', // nth-child()\n  \'nth-col\', // nth-col()\n  \'nth-last-child\', // nth-last-child()\n  \'nth-last-col\', // nth-last-col()\n  \'nth-last-of-type\', //nth-last-of-type()\n  \'nth-of-type\', //nth-of-type()\n  \'only-child\',\n  \'only-of-type\',\n  \'optional\',\n  \'out-of-range\',\n  \'past\',\n  \'placeholder-shown\',\n  \'read-only\',\n  \'read-write\',\n  \'required\',\n  \'right\',\n  \'root\',\n  \'scope\',\n  \'target\',\n  \'target-within\',\n  \'user-invalid\',\n  \'valid\',\n  \'visited\',\n  \'where\' // where()\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n  \'after\',\n  \'backdrop\',\n  \'before\',\n  \'cue\',\n  \'cue-region\',\n  \'first-letter\',\n  \'first-line\',\n  \'grammar-error\',\n  \'marker\',\n  \'part\',\n  \'placeholder\',\n  \'selection\',\n  \'slotted\',\n  \'spelling-error\'\n];\n\nconst ATTRIBUTES = [\n  \'align-content\',\n  \'align-items\',\n  \'align-self\',\n  \'animation\',\n  \'animation-delay\',\n  \'animation-direction\',\n  \'animation-duration\',\n  \'animation-fill-mode\',\n  \'animation-iteration-count\',\n  \'animation-name\',\n  \'animation-play-state\',\n  \'animation-timing-function\',\n  \'auto\',\n  \'backface-visibility\',\n  \'background\',\n  \'background-attachment\',\n  \'background-clip\',\n  \'background-color\',\n  \'background-image\',\n  \'background-origin\',\n  \'background-position\',\n  \'background-repeat\',\n  \'background-size\',\n  \'border\',\n  \'border-bottom\',\n  \'border-bottom-color\',\n  \'border-bottom-left-radius\',\n  \'border-bottom-right-radius\',\n  \'border-bottom-style\',\n  \'border-bottom-width\',\n  \'border-collapse\',\n  \'border-color\',\n  \'border-image\',\n  \'border-image-outset\',\n  \'border-image-repeat\',\n  \'border-image-slice\',\n  \'border-image-source\',\n  \'border-image-width\',\n  \'border-left\',\n  \'border-left-color\',\n  \'border-left-style\',\n  \'border-left-width\',\n  \'border-radius\',\n  \'border-right\',\n  \'border-right-color\',\n  \'border-right-style\',\n  \'border-right-width\',\n  \'border-spacing\',\n  \'border-style\',\n  \'border-top\',\n  \'border-top-color\',\n  \'border-top-left-radius\',\n  \'border-top-right-radius\',\n  \'border-top-style\',\n  \'border-top-width\',\n  \'border-width\',\n  \'bottom\',\n  \'box-decoration-break\',\n  \'box-shadow\',\n  \'box-sizing\',\n  \'break-after\',\n  \'break-before\',\n  \'break-inside\',\n  \'caption-side\',\n  \'clear\',\n  \'clip\',\n  \'clip-path\',\n  \'color\',\n  \'column-count\',\n  \'column-fill\',\n  \'column-gap\',\n  \'column-rule\',\n  \'column-rule-color\',\n  \'column-rule-style\',\n  \'column-rule-width\',\n  \'column-span\',\n  \'column-width\',\n  \'columns\',\n  \'content\',\n  \'counter-increment\',\n  \'counter-reset\',\n  \'cursor\',\n  \'direction\',\n  \'display\',\n  \'empty-cells\',\n  \'filter\',\n  \'flex\',\n  \'flex-basis\',\n  \'flex-direction\',\n  \'flex-flow\',\n  \'flex-grow\',\n  \'flex-shrink\',\n  \'flex-wrap\',\n  \'float\',\n  \'font\',\n  \'font-display\',\n  \'font-family\',\n  \'font-feature-settings\',\n  \'font-kerning\',\n  \'font-language-override\',\n  \'font-size\',\n  \'font-size-adjust\',\n  \'font-smoothing\',\n  \'font-stretch\',\n  \'font-style\',\n  \'font-variant\',\n  \'font-variant-ligatures\',\n  \'font-variation-settings\',\n  \'font-weight\',\n  \'height\',\n  \'hyphens\',\n  \'icon\',\n  \'image-orientation\',\n  \'image-rendering\',\n  \'image-resolution\',\n  \'ime-mode\',\n  \'inherit\',\n  \'initial\',\n  \'justify-content\',\n  \'left\',\n  \'letter-spacing\',\n  \'line-height\',\n  \'list-style\',\n  \'list-style-image\',\n  \'list-style-position\',\n  \'list-style-type\',\n  \'margin\',\n  \'margin-bottom\',\n  \'margin-left\',\n  \'margin-right\',\n  \'margin-top\',\n  \'marks\',\n  \'mask\',\n  \'max-height\',\n  \'max-width\',\n  \'min-height\',\n  \'min-width\',\n  \'nav-down\',\n  \'nav-index\',\n  \'nav-left\',\n  \'nav-right\',\n  \'nav-up\',\n  \'none\',\n  \'normal\',\n  \'object-fit\',\n  \'object-position\',\n  \'opacity\',\n  \'order\',\n  \'orphans\',\n  \'outline\',\n  \'outline-color\',\n  \'outline-offset\',\n  \'outline-style\',\n  \'outline-width\',\n  \'overflow\',\n  \'overflow-wrap\',\n  \'overflow-x\',\n  \'overflow-y\',\n  \'padding\',\n  \'padding-bottom\',\n  \'padding-left\',\n  \'padding-right\',\n  \'padding-top\',\n  \'page-break-after\',\n  \'page-break-before\',\n  \'page-break-inside\',\n  \'perspective\',\n  \'perspective-origin\',\n  \'pointer-events\',\n  \'position\',\n  \'quotes\',\n  \'resize\',\n  \'right\',\n  \'src\', // @font-face\n  \'tab-size\',\n  \'table-layout\',\n  \'text-align\',\n  \'text-align-last\',\n  \'text-decoration\',\n  \'text-decoration-color\',\n  \'text-decoration-line\',\n  \'text-decoration-style\',\n  \'text-indent\',\n  \'text-overflow\',\n  \'text-rendering\',\n  \'text-shadow\',\n  \'text-transform\',\n  \'text-underline-position\',\n  \'top\',\n  \'transform\',\n  \'transform-origin\',\n  \'transform-style\',\n  \'transition\',\n  \'transition-delay\',\n  \'transition-duration\',\n  \'transition-property\',\n  \'transition-timing-function\',\n  \'unicode-bidi\',\n  \'vertical-align\',\n  \'visibility\',\n  \'white-space\',\n  \'widows\',\n  \'width\',\n  \'word-break\',\n  \'word-spacing\',\n  \'word-wrap\',\n  \'z-index\'\n  // reverse makes sure longer attributes `font-weight` are matched fully\n  // instead of getting false positives on say `font`\n].reverse();\n\n/*\nLanguage: SCSS\nDescription: Scss is an extension of the syntax of CSS.\nAuthor: Kurt Emch <kurt@kurtemch.com>\nWebsite: https://sass-lang.com\nCategory: common, css, web\n*/\n\n/** @type LanguageFn */\nfunction scss(hljs) {\n  const modes = MODES(hljs);\n  const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;\n  const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;\n\n  const AT_IDENTIFIER = \'@[a-z-]+\'; // @font-face\n  const AT_MODIFIERS = "and or not only";\n  const IDENT_RE = \'[a-zA-Z-][a-zA-Z0-9_-]*\';\n  const VARIABLE = {\n    className: \'variable\',\n    begin: \'(\\\\$\' + IDENT_RE + \')\\\\b\'\n  };\n\n  return {\n    name: \'SCSS\',\n    case_insensitive: true,\n    illegal: \'[=/|\\\']\',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: \'selector-id\',\n        begin: \'#[A-Za-z0-9_-]+\',\n        relevance: 0\n      },\n      {\n        className: \'selector-class\',\n        begin: \'\\\\.[A-Za-z0-9_-]+\',\n        relevance: 0\n      },\n      modes.ATTRIBUTE_SELECTOR_MODE,\n      {\n        className: \'selector-tag\',\n        begin: \'\\\\b(\' + TAGS.join(\'|\') + \')\\\\b\',\n        // was there, before, but why?\n        relevance: 0\n      },\n      {\n        className: \'selector-pseudo\',\n        begin: \':(\' + PSEUDO_CLASSES$1.join(\'|\') + \')\'\n      },\n      {\n        className: \'selector-pseudo\',\n        begin: \'::(\' + PSEUDO_ELEMENTS$1.join(\'|\') + \')\'\n      },\n      VARIABLE,\n      { // pseudo-selector params\n        begin: /\\(/,\n        end: /\\)/,\n        contains: [ modes.CSS_NUMBER_MODE ]\n      },\n      modes.CSS_VARIABLE,\n      {\n        className: \'attribute\',\n        begin: \'\\\\b(\' + ATTRIBUTES.join(\'|\') + \')\\\\b\'\n      },\n      {\n        begin: \'\\\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\\\b\'\n      },\n      {\n        begin: \':\',\n        end: \';\',\n        contains: [\n          VARIABLE,\n          modes.HEXCOLOR,\n          modes.CSS_NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          modes.IMPORTANT\n        ]\n      },\n      // matching these here allows us to treat them more like regular CSS\n      // rules so everything between the {} gets regular rule highlighting,\n      // which is what we want for page and font-face\n      {\n        begin: \'@(page|font-face)\',\n        keywords: {\n          $pattern: AT_IDENTIFIER,\n          keyword: \'@page @font-face\'\n        }\n      },\n      {\n        begin: \'@\',\n        end: \'[{;]\',\n        returnBegin: true,\n        keywords: {\n          $pattern: /[a-z-]+/,\n          keyword: AT_MODIFIERS,\n          attribute: MEDIA_FEATURES.join(" ")\n        },\n        contains: [\n          {\n            begin: AT_IDENTIFIER,\n            className: "keyword"\n          },\n          {\n            begin: /[a-z-]+(?=:)/,\n            className: "attribute"\n          },\n          VARIABLE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          modes.HEXCOLOR,\n          modes.CSS_NUMBER_MODE\n        ]\n      }\n    ]\n  };\n}\n\n/* harmony default export */ const languages_scss = (scss);\n\n;// CONCATENATED MODULE: ./node_modules/highlight.js/es/languages/shell.js\n/*\nLanguage: Shell Session\nRequires: bash.js\nAuthor: TSUYUSATO Kitsune <make.just.on@gmail.com>\nCategory: common\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction shell(hljs) {\n  return {\n    name: \'Shell Session\',\n    aliases: [ \'console\', \'shellsession\' ],\n    contains: [\n      {\n        className: \'meta\',\n        // We cannot add \\s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.\n        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:\n        // echo /path/to/home > t.exe\n        begin: /^\\s{0,3}[/~\\w\\d[\\]()@-]*[>%$#][ ]?/,\n        starts: {\n          end: /[^\\\\](?=\\s*$)/,\n          subLanguage: \'bash\'\n        }\n      }\n    ]\n  };\n}\n\n/* harmony default export */ const languages_shell = (shell);\n\n;// CONCATENATED MODULE: ./node_modules/highlight.js/es/languages/plaintext.js\n/*\nLanguage: Plain text\nAuthor: Egor Rogov (e.rogov@postgrespro.ru)\nDescription: Plain text without any highlighting.\nCategory: common\n*/\n\nfunction plaintext(hljs) {\n  return {\n    name: \'Plain text\',\n    aliases: [\n      \'text\',\n      \'txt\'\n    ],\n    disableAutodetect: true\n  };\n}\n\n/* harmony default export */ const languages_plaintext = (plaintext);\n\n;// CONCATENATED MODULE: ./node_modules/highlight.js/es/languages/xml.js\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction xml_source(re) {\n  if (!re) return null;\n  if (typeof re === "string") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction xml_lookahead(re) {\n  return xml_concat(\'(?=\', re, \')\');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return xml_concat(\'(?:\', re, \')?\');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction xml_concat(...args) {\n  const joined = args.map((x) => xml_source(x)).join("");\n  return joined;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === \'object\' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = \'(\' +\n    (opts.capture ? "" : "?:") +\n    args.map((x) => xml_source(x)).join("|") + ")";\n  return joined;\n}\n\n/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common, web\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction xml(hljs) {\n  // Element names can contain letters, digits, hyphens, underscores, and periods\n  const TAG_NAME_RE = xml_concat(/[A-Z_]/, optional(/[A-Z0-9_.-]*:/), /[A-Z0-9_.-]*/);\n  const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;\n  const XML_ENTITIES = {\n    className: \'symbol\',\n    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n  };\n  const XML_META_KEYWORDS = {\n    begin: /\\s/,\n    contains: [\n      {\n        className: \'keyword\',\n        begin: /#?[a-z_][a-z1-9_-]+/,\n        illegal: /\\n/\n      }\n    ]\n  };\n  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n    begin: /\\(/,\n    end: /\\)/\n  });\n  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n    className: \'string\'\n  });\n  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    className: \'string\'\n  });\n  const TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [\n      {\n        className: \'attr\',\n        begin: XML_IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: /=\\s*/,\n        relevance: 0,\n        contains: [\n          {\n            className: \'string\',\n            endsParent: true,\n            variants: [\n              {\n                begin: /"/,\n                end: /"/,\n                contains: [ XML_ENTITIES ]\n              },\n              {\n                begin: /\'/,\n                end: /\'/,\n                contains: [ XML_ENTITIES ]\n              },\n              {\n                begin: /[^\\s"\'=<>`]+/\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  };\n  return {\n    name: \'HTML, XML\',\n    aliases: [\n      \'html\',\n      \'xhtml\',\n      \'rss\',\n      \'atom\',\n      \'xjb\',\n      \'xsd\',\n      \'xsl\',\n      \'plist\',\n      \'wsf\',\n      \'svg\'\n    ],\n    case_insensitive: true,\n    contains: [\n      {\n        className: \'meta\',\n        begin: /<![a-z]/,\n        end: />/,\n        relevance: 10,\n        contains: [\n          XML_META_KEYWORDS,\n          QUOTE_META_STRING_MODE,\n          APOS_META_STRING_MODE,\n          XML_META_PAR_KEYWORDS,\n          {\n            begin: /\\[/,\n            end: /\\]/,\n            contains: [\n              {\n                className: \'meta\',\n                begin: /<![a-z]/,\n                end: />/,\n                contains: [\n                  XML_META_KEYWORDS,\n                  XML_META_PAR_KEYWORDS,\n                  QUOTE_META_STRING_MODE,\n                  APOS_META_STRING_MODE\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      hljs.COMMENT(\n        /\x3c!--/,\n        /--\x3e/,\n        {\n          relevance: 10\n        }\n      ),\n      {\n        begin: /<!\\[CDATA\\[/,\n        end: /\\]\\]>/,\n        relevance: 10\n      },\n      XML_ENTITIES,\n      {\n        className: \'meta\',\n        begin: /<\\?xml/,\n        end: /\\?>/,\n        relevance: 10\n      },\n      {\n        className: \'tag\',\n        /*\n        The lookahead pattern (?=...) ensures that \'begin\' only matches\n        \'<style\' as a single word, followed by a whitespace or an\n        ending bracket.\n        */\n        begin: /<style(?=\\s|>)/,\n        end: />/,\n        keywords: {\n          name: \'style\'\n        },\n        contains: [ TAG_INTERNALS ],\n        starts: {\n          end: /<\\/style>/,\n          returnEnd: true,\n          subLanguage: [\n            \'css\',\n            \'xml\'\n          ]\n        }\n      },\n      {\n        className: \'tag\',\n        // See the comment in the <style tag about the lookahead pattern\n        begin: /<script(?=\\s|>)/,\n        end: />/,\n        keywords: {\n          name: \'script\'\n        },\n        contains: [ TAG_INTERNALS ],\n        starts: {\n          end: /<\\/script>/,\n          returnEnd: true,\n          subLanguage: [\n            \'javascript\',\n            \'handlebars\',\n            \'xml\'\n          ]\n        }\n      },\n      // we need this for now for jSX\n      {\n        className: \'tag\',\n        begin: /<>|<\\/>/\n      },\n      // open tag\n      {\n        className: \'tag\',\n        begin: xml_concat(\n          /</,\n          xml_lookahead(xml_concat(\n            TAG_NAME_RE,\n            // <tag/>\n            // <tag>\n            // <tag ...\n            either(/\\/>/, />/, /\\s/)\n          ))\n        ),\n        end: /\\/?>/,\n        contains: [\n          {\n            className: \'name\',\n            begin: TAG_NAME_RE,\n            relevance: 0,\n            starts: TAG_INTERNALS\n          }\n        ]\n      },\n      // close tag\n      {\n        className: \'tag\',\n        begin: xml_concat(\n          /<\\//,\n          xml_lookahead(xml_concat(\n            TAG_NAME_RE, />/\n          ))\n        ),\n        contains: [\n          {\n            className: \'name\',\n            begin: TAG_NAME_RE,\n            relevance: 0\n          },\n          {\n            begin: />/,\n            relevance: 0,\n            endsParent: true\n          }\n        ]\n      }\n    ]\n  };\n}\n\n/* harmony default export */ const languages_xml = (xml);\n\n;// CONCATENATED MODULE: ./docs/src/utils/highlight.js\n\n\n\n\n\n\nes_core.registerLanguage(\'javascript\', languages_javascript);\nes_core.registerLanguage(\'scss\', languages_scss);\nes_core.registerLanguage(\'shell\', languages_shell);\nes_core.registerLanguage(\'plaintext\', languages_plaintext);\nes_core.registerLanguage(\'xml\', languages_xml);\nfunction highlight(code, lang) {\n  var language = es_core.getLanguage(lang) ? lang : \'plaintext\';\n  return es_core.highlight(code, {\n    language: language\n  }).value;\n}\n;// CONCATENATED MODULE: ./docs/src/components/Code/index.jsx\n\n\n\n\nfunction Code(_ref) {\n  var lang = _ref.lang,\n      children = _ref.children;\n  var html = jsxToHtml(children);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n    className: "code",\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)("pre", {\n      className: "hljs language-".concat(lang),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("code", {\n        dangerouslySetInnerHTML: {\n          __html: highlight(html, \'jsx\')\n        }\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/components/Demo/index.jsx\nvar Demo_excluded = ["title", "description", "setup", "settings", "code", "children"];\n\nfunction Demo_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Demo_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Demo_ownKeys(Object(source), true).forEach(function (key) { Demo_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Demo_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Demo_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Demo_slicedToArray(arr, i) { return Demo_arrayWithHoles(arr) || Demo_iterableToArrayLimit(arr, i) || Demo_unsupportedIterableToArray(arr, i) || Demo_nonIterableRest(); }\n\nfunction Demo_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Demo_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Demo_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Demo_arrayLikeToArray(o, minLen); }\n\nfunction Demo_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Demo_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Demo_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction Demo_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Demo_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Demo_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\nfunction Demo(_ref) {\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \'Demo\' : _ref$title,\n      description = _ref.description,\n      setup = _ref.setup,\n      settings = _ref.settings,\n      code = _ref.code,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? code : _ref$children,\n      props = Demo_objectWithoutProperties(_ref, Demo_excluded);\n\n  var _useState = (0,react.useState)(false),\n      _useState2 = Demo_slicedToArray(_useState, 2),\n      isCodeOpen = _useState2[0],\n      setCodeOpen = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = Demo_slicedToArray(_useState3, 2),\n      isSettingsOpen = _useState4[0],\n      setSettingsOpen = _useState4[1];\n\n  var classNames = classnames_default()(\'demo\', {\n    \'demo--with-settings\': settings\n  });\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(card_Card, Demo_objectSpread(Demo_objectSpread({\n    element: "article",\n    className: classNames,\n    outlined: true\n  }, props), {}, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(card_Card.Header, {\n      title: title,\n      actions: [/*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        icon: isCodeOpen ? \'code_off\' : \'code\',\n        title: isCodeOpen ? \'Hide code\' : \'Show code\',\n        onClick: function onClick() {\n          return setCodeOpen(function (v) {\n            return !v;\n          });\n        }\n      }, "code"), settings ? /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        icon: "settings",\n        title: "\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438",\n        onClick: function onClick() {\n          return setSettingsOpen(true);\n        }\n      }, "settings") : null]\n    }), description && /*#__PURE__*/(0,jsx_runtime.jsx)(card_Card.Section, {\n      secondary: true,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        noMargin: true,\n        children: description\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(card_Card.Section, {\n      primary: true,\n      children: [setup, children]\n    }), isCodeOpen && /*#__PURE__*/(0,jsx_runtime.jsx)(card_Card.Section, {\n      secondary: true,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(Code, {\n        lang: "jsx",\n        children: children\n      })\n    }), settings && /*#__PURE__*/(0,jsx_runtime.jsx)(side_sheet_SideSheet, {\n      title: "Settings",\n      open: isSettingsOpen // appear\n      ,\n      closeIcon: "close",\n      onClose: function onClose() {\n        return setSettingsOpen(false);\n      },\n      dismissible: true,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(side_sheet_SideSheet.Content, {\n        children: settings\n      })\n    })]\n  }));\n}\n;// CONCATENATED MODULE: ./docs/src/components/FieldSet/index.jsx\n\n\n\nfunction FieldSet(_ref) {\n  var legend = _ref.legend,\n      children = _ref.children;\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("fieldset", {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)("legend", {\n      children: legend\n    }), children]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/components/Page/index.jsx\nvar Page_excluded = ["id", "title", "description", "links", "children"];\n\nfunction Page_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction Page_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Page_ownKeys(Object(source), true).forEach(function (key) { Page_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Page_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction Page_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Page_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Page_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction Page_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\nfunction Page(_ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      description = _ref.description,\n      links = _ref.links,\n      children = _ref.children,\n      props = Page_objectWithoutProperties(_ref, Page_excluded);\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("article", Page_objectSpread(Page_objectSpread({\n    id: "".concat(id, "-page"),\n    className: "page"\n  }, props), {}, {\n    children: [title && /*#__PURE__*/(0,jsx_runtime.jsxs)("header", {\n      className: "page-header",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        className: "page-title",\n        type: "headline4",\n        noMargin: true,\n        children: title\n      }), description && /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        className: "page-description",\n        type: "body1",\n        noMargin: true,\n        children: description\n      }), links && /*#__PURE__*/(0,jsx_runtime.jsxs)("ul", {\n        children: [links.guide && /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n            href: links.guide,\n            target: "_blank",\n            rel: "noreferrer",\n            children: "Guide"\n          })\n        }), links.docs && /*#__PURE__*/(0,jsx_runtime.jsx)("li", {\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("a", {\n            href: links.docs,\n            target: "_blank",\n            rel: "noreferrer",\n            children: "Docs"\n          })\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "page-content",\n      children: children\n    })]\n  }));\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Avatar/index.jsx\nfunction Avatar_slicedToArray(arr, i) { return Avatar_arrayWithHoles(arr) || Avatar_iterableToArrayLimit(arr, i) || Avatar_unsupportedIterableToArray(arr, i) || Avatar_nonIterableRest(); }\n\nfunction Avatar_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Avatar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Avatar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Avatar_arrayLikeToArray(o, minLen); }\n\nfunction Avatar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Avatar_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Avatar_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar id = \'avatar\';\nvar title = \'Avatar\';\nvar description = \'Avatars are found throughout material design with uses in everything from tables to dialog menus.\';\nfunction AvatarPage() {\n  var _useState = (0,react.useState)(\'medium\'),\n      _useState2 = Avatar_slicedToArray(_useState, 2),\n      size = _useState2[0],\n      setSize = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'image\'),\n      _useState4 = Avatar_slicedToArray(_useState3, 2),\n      content = _useState4[0],\n      setContent = _useState4[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: id,\n    title: title,\n    description: description,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Demo",\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Content",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'image\',\n              label: \'Image\'\n            }, {\n              value: \'icon\',\n              label: \'Icon\'\n            }, {\n              value: \'text\',\n              label: \'Text\'\n            }],\n            value: content,\n            onChange: setContent\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Size",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'small\',\n              label: \'Small\'\n            }, {\n              value: \'medium\',\n              label: \'Medium\'\n            }, {\n              value: \'large\',\n              label: \'Large\'\n            }],\n            value: size,\n            onChange: setSize\n          })\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(avatar_Avatar, {\n        image: content === \'image\' ? \'https://placeimg.com/128/128/people\' : undefined,\n        icon: content === \'icon\' ? \'star\' : undefined,\n        text: content === \'text\' ? \'MD\' : undefined,\n        size: size\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Badge/index.jsx\nfunction Badge_slicedToArray(arr, i) { return Badge_arrayWithHoles(arr) || Badge_iterableToArrayLimit(arr, i) || Badge_unsupportedIterableToArray(arr, i) || Badge_nonIterableRest(); }\n\nfunction Badge_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Badge_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Badge_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Badge_arrayLikeToArray(o, minLen); }\n\nfunction Badge_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Badge_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Badge_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar Badge_id = \'badge\';\nvar Badge_title = \'Badge\';\nvar Badge_description = \'Badge generates a small badge to the top-right of its child(ren).\';\nvar content = {\n  avatar: /*#__PURE__*/(0,jsx_runtime.jsx)(avatar_Avatar, {\n    text: "MD",\n    size: "medium"\n  }),\n  button: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n    outlined: true,\n    children: "Button"\n  }),\n  icon: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_Icon, {\n    children: "star"\n  }),\n  iconButton: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n    icon: "star"\n  }),\n  text: \'Text\'\n};\nfunction BadgePage() {\n  var _useState = (0,react.useState)(0),\n      _useState2 = Badge_slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'avatar\'),\n      _useState4 = Badge_slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = Badge_slicedToArray(_useState5, 2),\n      inset = _useState6[0],\n      setInset = _useState6[1];\n\n  var _useState7 = (0,react.useState)(false),\n      _useState8 = Badge_slicedToArray(_useState7, 2),\n      transparent = _useState8[0],\n      setTransparent = _useState8[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Badge_id,\n    title: Badge_title,\n    description: Badge_description,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      settings: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        value: value,\n        label: "Value",\n        outlined: true,\n        onChange: function onChange(_, value) {\n          return setValue(value);\n        }\n      }, "value"), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n        legend: "Content",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n          segments: [{\n            value: \'avatar\',\n            label: \'Avatar\'\n          }, {\n            value: \'button\',\n            label: \'Button\'\n          }, {\n            value: \'icon\',\n            label: \'Icon\'\n          }, {\n            value: \'iconButton\',\n            label: \'Icon Button\'\n          }, {\n            value: \'text\',\n            label: \'Text\'\n          }],\n          value: type,\n          onChange: setType\n        })\n      }, "content"), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Inset",\n        alignEnd: true,\n        spaceBetween: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n          selected: inset,\n          onChange: function onChange() {\n            return setInset(function (v) {\n              return !v;\n            });\n          }\n        })\n      }, "inset"), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Transparent",\n        alignEnd: true,\n        spaceBetween: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n          selected: transparent,\n          onChange: function onChange() {\n            return setTransparent(function (v) {\n              return !v;\n            });\n          }\n        })\n      }, "transparent")],\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(badge_Badge, {\n        value: value,\n        inset: inset || undefined,\n        transparent: transparent || undefined,\n        children: content[type]\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Banner/index.jsx\nfunction Banner_slicedToArray(arr, i) { return Banner_arrayWithHoles(arr) || Banner_iterableToArrayLimit(arr, i) || Banner_unsupportedIterableToArray(arr, i) || Banner_nonIterableRest(); }\n\nfunction Banner_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Banner_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Banner_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Banner_arrayLikeToArray(o, minLen); }\n\nfunction Banner_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Banner_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Banner_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar Banner_id = \'banner\';\nvar Banner_title = \'Banner\';\nvar Banner_description = \'A banner displays a prominent message and related optional actions.\';\nvar links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-banner\',\n  guide: \'https://material.io/components/banners\'\n};\nfunction Banner_BadgePage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = Banner_slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'Lorem ipsum\'),\n      _useState4 = Banner_slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = Banner_slicedToArray(_useState5, 2),\n      hasIcon = _useState6[0],\n      setHasIcon = _useState6[1];\n\n  var _useState7 = (0,react.useState)(\'\'),\n      _useState8 = Banner_slicedToArray(_useState7, 2),\n      icon = _useState8[0],\n      setIcon = _useState8[1];\n\n  var _useState9 = (0,react.useState)(false),\n      _useState10 = Banner_slicedToArray(_useState9, 2),\n      hasAction = _useState10[0],\n      setHasAction = _useState10[1];\n\n  var _useState11 = (0,react.useState)(\'\'),\n      _useState12 = Banner_slicedToArray(_useState11, 2),\n      action = _useState12[0],\n      setAction = _useState12[1];\n\n  var _useState13 = (0,react.useState)(false),\n      _useState14 = Banner_slicedToArray(_useState13, 2),\n      hasSecondaryAction = _useState14[0],\n      setHasSecondaryAction = _useState14[1];\n\n  var _useState15 = (0,react.useState)(\'\'),\n      _useState16 = Banner_slicedToArray(_useState15, 2),\n      secondaryAction = _useState16[0],\n      setSecondaryAction = _useState16[1];\n\n  var _useState17 = (0,react.useState)(false),\n      _useState18 = Banner_slicedToArray(_useState17, 2),\n      centered = _useState18[0],\n      setCentered = _useState18[1];\n\n  var _useState19 = (0,react.useState)(false),\n      _useState20 = Banner_slicedToArray(_useState19, 2),\n      fixed = _useState20[0],\n      setFixed = _useState20[1];\n\n  var _useState21 = (0,react.useState)(false),\n      _useState22 = Banner_slicedToArray(_useState21, 2),\n      mobileStacked = _useState22[0],\n      setMobileStacked = _useState22[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Banner_id,\n    title: Banner_title,\n    description: Banner_description,\n    links: links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Demo",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(top_app_bar_TopAppBar, {\n        title: "Title",\n        actionItems: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          label: "Toggle",\n          onClick: function onClick() {\n            return setOpen(function (v) {\n              return !v;\n            });\n          }\n        }),\n        raised: true\n      }),\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: text,\n          label: "Text",\n          onChange: function onChange(_, value) {\n            return setText(value);\n          },\n          outlined: true\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: icon,\n          label: "Icon",\n          trailingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: hasIcon,\n            onChange: function onChange() {\n              return setHasIcon(function (v) {\n                return !v;\n              });\n            }\n          }),\n          outlined: true,\n          disabled: !hasIcon,\n          onChange: function onChange(_, value) {\n            return setIcon(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: action,\n          label: "Action",\n          trailingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: hasAction,\n            onChange: function onChange() {\n              return setHasAction(function (v) {\n                return !v;\n              });\n            }\n          }),\n          disabled: !hasAction,\n          outlined: true,\n          onChange: function onChange(_, value) {\n            return setAction(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: secondaryAction,\n          label: "Secondary action",\n          trailingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: hasSecondaryAction,\n            onChange: function onChange() {\n              return setHasSecondaryAction(function (v) {\n                return !v;\n              });\n            }\n          }),\n          disabled: !hasSecondaryAction,\n          outlined: true,\n          onChange: function onChange(_, value) {\n            return setSecondaryAction(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Centered",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: centered,\n            onChange: function onChange() {\n              return setCentered(function (v) {\n                return !v;\n              });\n            }\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Fixed",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: fixed,\n            onChange: function onChange() {\n              return setFixed(function (v) {\n                return !v;\n              });\n            }\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Mobile stacked",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: mobileStacked,\n            onChange: function onChange() {\n              return setMobileStacked(function (v) {\n                return !v;\n              });\n            }\n          })\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(banner_Banner, {\n        text: text,\n        icon: hasIcon ? icon : undefined,\n        action: hasAction ? /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          children: action\n        }) : undefined,\n        secondaryAction: hasSecondaryAction ? /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          children: secondaryAction\n        }) : undefined,\n        open: open || undefined,\n        centered: centered || undefined,\n        fixed: fixed || undefined,\n        mobileStacked: mobileStacked || undefined\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Button/index.jsx\nfunction Button_slicedToArray(arr, i) { return Button_arrayWithHoles(arr) || Button_iterableToArrayLimit(arr, i) || Button_unsupportedIterableToArray(arr, i) || Button_nonIterableRest(); }\n\nfunction Button_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Button_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Button_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Button_arrayLikeToArray(o, minLen); }\n\nfunction Button_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Button_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Button_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar Button_id = \'button\';\nvar Button_title = \'Button\';\nvar Button_description = \'Buttons communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars.\';\nvar Button_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-button\',\n  guide: \'https://material.io/components/buttons\'\n};\nfunction ButtonPage() {\n  var _useState = (0,react.useState)(\'Button\'),\n      _useState2 = Button_slicedToArray(_useState, 2),\n      label = _useState2[0],\n      setLabel = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = Button_slicedToArray(_useState3, 2),\n      hasLeadingIcon = _useState4[0],\n      setHasLeadingIcon = _useState4[1];\n\n  var _useState5 = (0,react.useState)(\'save\'),\n      _useState6 = Button_slicedToArray(_useState5, 2),\n      leadingIcon = _useState6[0],\n      setLeadingIcon = _useState6[1];\n\n  var _useState7 = (0,react.useState)(false),\n      _useState8 = Button_slicedToArray(_useState7, 2),\n      hasTrailingIcon = _useState8[0],\n      setHasTrailingIcon = _useState8[1];\n\n  var _useState9 = (0,react.useState)(\'close\'),\n      _useState10 = Button_slicedToArray(_useState9, 2),\n      trailingIcon = _useState10[0],\n      setTrailingIcon = _useState10[1];\n\n  var _useState11 = (0,react.useState)(\'plain\'),\n      _useState12 = Button_slicedToArray(_useState11, 2),\n      type = _useState12[0],\n      setType = _useState12[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Button_id,\n    title: Button_title,\n    description: Button_description,\n    links: Button_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Demo",\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: label,\n          label: "Label",\n          outlined: true,\n          onChange: function onChange(_, value) {\n            return setLabel(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: leadingIcon,\n          label: "Leading icon",\n          trailingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: hasLeadingIcon,\n            onChange: function onChange() {\n              return setHasLeadingIcon(function (v) {\n                return !v;\n              });\n            }\n          }),\n          outlined: true,\n          disabled: !hasLeadingIcon,\n          onChange: function onChange(_, value) {\n            return setLeadingIcon(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: trailingIcon,\n          label: "Trailing icon",\n          trailingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: hasTrailingIcon,\n            onChange: function onChange() {\n              return setHasTrailingIcon(function (v) {\n                return !v;\n              });\n            }\n          }),\n          outlined: true,\n          disabled: !hasTrailingIcon,\n          onChange: function onChange(_, value) {\n            return setTrailingIcon(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Type",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'plain\',\n              label: \'Plain\'\n            }, {\n              value: \'outlined\',\n              label: \'Outlined\'\n            }, {\n              value: \'unelevated\',\n              label: \'Unelevated\'\n            }, {\n              value: \'raised\',\n              label: \'Raised\'\n            }],\n            value: type,\n            onChange: setType\n          })\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        leadingIcon: hasLeadingIcon ? leadingIcon : undefined,\n        trailingIcon: hasTrailingIcon ? trailingIcon : undefined,\n        outlined: type === \'outlined\' || undefined,\n        unelevated: type === \'unelevated\' || undefined,\n        raised: type === \'raised\' || undefined,\n        children: label\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Card/index.jsx\nfunction Card_slicedToArray(arr, i) { return Card_arrayWithHoles(arr) || Card_iterableToArrayLimit(arr, i) || Card_unsupportedIterableToArray(arr, i) || Card_nonIterableRest(); }\n\nfunction Card_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Card_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Card_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Card_arrayLikeToArray(o, minLen); }\n\nfunction Card_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Card_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Card_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar Card_id = \'card\';\nvar pageTitle = \'Card\';\nvar Card_description = \'Cards contain content and actions about a single subject.\';\nvar Card_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-card\',\n  guide: \'https://material.io/components/cards\'\n};\n\'\';\nfunction CardPage() {\n  var _useState = (0,react.useState)(true),\n      _useState2 = Card_slicedToArray(_useState, 2),\n      hasTitle = _useState2[0],\n      setHasTitle = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'Title\'),\n      _useState4 = Card_slicedToArray(_useState3, 2),\n      title = _useState4[0],\n      setTitle = _useState4[1];\n\n  var _useState5 = (0,react.useState)(true),\n      _useState6 = Card_slicedToArray(_useState5, 2),\n      hasSubtitle = _useState6[0],\n      setHasSubtitle = _useState6[1];\n\n  var _useState7 = (0,react.useState)(\'Subtitle\'),\n      _useState8 = Card_slicedToArray(_useState7, 2),\n      subtitle = _useState8[0],\n      setSubtitle = _useState8[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Card_id,\n    title: pageTitle,\n    description: Card_description,\n    links: Card_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: title,\n          label: "Title",\n          trailingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: hasTitle,\n            onChange: function onChange() {\n              return setHasTitle(function (v) {\n                return !v;\n              });\n            }\n          }),\n          outlined: true,\n          disabled: !hasTitle,\n          onChange: function onChange(_, value) {\n            return setTitle(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: subtitle,\n          label: "Subtitle",\n          trailingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: hasSubtitle,\n            onChange: function onChange() {\n              return setHasSubtitle(function (v) {\n                return !v;\n              });\n            }\n          }),\n          outlined: true,\n          disabled: !hasSubtitle,\n          onChange: function onChange(_, value) {\n            return setSubtitle(value);\n          }\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(card_Card, {\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(card_Card.Header, {\n          overline: "Overline",\n          title: hasTitle ? title : undefined,\n          subtitle: hasSubtitle ? subtitle : undefined\n        })\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Checkbox/index.jsx\nfunction Checkbox_slicedToArray(arr, i) { return Checkbox_arrayWithHoles(arr) || Checkbox_iterableToArrayLimit(arr, i) || Checkbox_unsupportedIterableToArray(arr, i) || Checkbox_nonIterableRest(); }\n\nfunction Checkbox_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Checkbox_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Checkbox_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Checkbox_arrayLikeToArray(o, minLen); }\n\nfunction Checkbox_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Checkbox_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Checkbox_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\nvar Checkbox_id = \'checkbox\';\nvar Checkbox_title = \'Checkbox\';\nvar Checkbox_description = \'Checkboxes allow the user to select multiple options from a set.\';\nvar Checkbox_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-checkbox\',\n  guide: \'https://material.io/components/checkboxes\'\n};\nfunction CheckboxPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = Checkbox_slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useState3 = (0,react.useState)(true),\n      _useState4 = Checkbox_slicedToArray(_useState3, 2),\n      controlled = _useState4[0],\n      setControlled = _useState4[1];\n\n  var _useState5 = (0,react.useState)(),\n      _useState6 = Checkbox_slicedToArray(_useState5, 2),\n      indeterminate = _useState6[0],\n      setIndeterminate = _useState6[1];\n\n  var _useState7 = (0,react.useState)(),\n      _useState8 = Checkbox_slicedToArray(_useState7, 2),\n      disabled = _useState8[0],\n      setDisabled = _useState8[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Checkbox_id,\n    title: Checkbox_title,\n    description: Checkbox_description,\n    links: Checkbox_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {\n        checked: controlled ? checked : undefined,\n        defaultChecked: !controlled ? false : undefined,\n        indeterminate: indeterminate,\n        disabled: disabled,\n        onChange: function onChange() {\n          return setChecked(function (v) {\n            return !v;\n          });\n        }\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Chips/index.jsx\nfunction Chips_slicedToArray(arr, i) { return Chips_arrayWithHoles(arr) || Chips_iterableToArrayLimit(arr, i) || Chips_unsupportedIterableToArray(arr, i) || Chips_nonIterableRest(); }\n\nfunction Chips_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Chips_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Chips_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Chips_arrayLikeToArray(o, minLen); }\n\nfunction Chips_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Chips_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Chips_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar Chips_id = \'chips\';\nvar Chips_title = \'Chips\';\nvar Chips_description = \'Chips are compact elements that allow users to enter information, select a choice, filter content, or trigger an action.\';\nvar Chips_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-chips\',\n  guide: \'https://material.io/components/chips\'\n};\nfunction ChipsPage() {\n  var _useState = (0,react.useState)(\'foo\'),\n      _useState2 = Chips_slicedToArray(_useState, 2),\n      choiceChip = _useState2[0],\n      setChoiceChips = _useState2[1];\n\n  var _useState3 = (0,react.useState)([\'foo\']),\n      _useState4 = Chips_slicedToArray(_useState3, 2),\n      filterChips = _useState4[0],\n      setFilterChips = _useState4[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Chips_id,\n    title: Chips_title,\n    description: Chips_description,\n    links: Chips_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic chips",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(chips_ChipSet, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Chips with icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(chips_ChipSet, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Foo",\n          icon: "star"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Bar",\n          icon: "star"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Baz",\n          icon: "star"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Chips with trailing icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(chips_ChipSet, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Foo",\n          trailingIcon: "delete"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Bar",\n          trailingIcon: "delete"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Baz",\n          trailingIcon: "delete"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Chips with avatars",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(chips_ChipSet, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Foo",\n          avatar: /*#__PURE__*/(0,jsx_runtime.jsx)(avatar_Avatar, {\n            image: "https://placeimg.com/128/128/people",\n            size: "small"\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Bar",\n          avatar: /*#__PURE__*/(0,jsx_runtime.jsx)(avatar_Avatar, {\n            image: "https://placeimg.com/128/128/people",\n            size: "small"\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          text: "Baz",\n          avatar: /*#__PURE__*/(0,jsx_runtime.jsx)(avatar_Avatar, {\n            image: "https://placeimg.com/128/128/people",\n            size: "small"\n          })\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Choice chips",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(chips_ChipSet, {\n        value: choiceChip,\n        onChange: function onChange(value) {\n          return setChoiceChips(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          value: "foo",\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          value: "bar",\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          value: "baz",\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Filter chips",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(chips_ChipSet, {\n        value: filterChips,\n        onChange: function onChange(value) {\n          return setFilterChips(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          value: "foo",\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          value: "bar",\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(chips_Chip, {\n          value: "baz",\n          text: "Baz"\n        })]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/CircularProgress/index.jsx\nfunction CircularProgress_slicedToArray(arr, i) { return CircularProgress_arrayWithHoles(arr) || CircularProgress_iterableToArrayLimit(arr, i) || CircularProgress_unsupportedIterableToArray(arr, i) || CircularProgress_nonIterableRest(); }\n\nfunction CircularProgress_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction CircularProgress_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CircularProgress_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CircularProgress_arrayLikeToArray(o, minLen); }\n\nfunction CircularProgress_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction CircularProgress_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction CircularProgress_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar CircularProgress_id = \'circular-progress\';\nvar CircularProgress_title = \'Circular Progress\';\nvar CircularProgress_description = \'Circular progress indicators display progress by animating an indicator along an invisible circular track in a clockwise direction.\';\nvar CircularProgress_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-circular-progress\',\n  guide: \'https://material.io/components/progress-indicators#circular-progress-indicators\'\n};\nfunction CircularProgressPage() {\n  var _useState = (0,react.useState)(42),\n      _useState2 = CircularProgress_slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'medium\'),\n      _useState4 = CircularProgress_slicedToArray(_useState3, 2),\n      size = _useState4[0],\n      setSize = _useState4[1];\n\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = CircularProgress_slicedToArray(_useState5, 2),\n      indeterminate = _useState6[0],\n      setIndeterminate = _useState6[1];\n\n  var _useState7 = (0,react.useState)(false),\n      _useState8 = CircularProgress_slicedToArray(_useState7, 2),\n      colorful = _useState8[0],\n      setColorful = _useState8[1];\n\n  var _useState9 = (0,react.useState)(false),\n      _useState10 = CircularProgress_slicedToArray(_useState9, 2),\n      closed = _useState10[0],\n      setClosed = _useState10[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: CircularProgress_id,\n    title: CircularProgress_title,\n    description: CircularProgress_description,\n    links: CircularProgress_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: value,\n          label: "Value",\n          outlined: true,\n          onChange: function onChange(_, value) {\n            return setValue(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Size",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'small\',\n              label: \'Small\'\n            }, {\n              value: \'medium\',\n              label: \'Medium\'\n            }, {\n              value: \'large\',\n              label: \'Large\'\n            }],\n            value: size,\n            onChange: setSize\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Indeterminate",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: indeterminate,\n            onChange: function onChange() {\n              return setIndeterminate(function (v) {\n                return !v;\n              });\n            }\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Colorful",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: colorful,\n            onChange: function onChange() {\n              return setColorful(function (v) {\n                return !v;\n              });\n            }\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Closed",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: closed,\n            onChange: function onChange() {\n              return setClosed(function (v) {\n                return !v;\n              });\n            }\n          })\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(circular_progress_CircularProgress, {\n        value: indeterminate ? undefined : value,\n        size: size,\n        indeterminate: indeterminate || undefined,\n        colorful: colorful || undefined,\n        closed: closed || undefined\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/DataTable/index.jsx\nfunction DataTable_slicedToArray(arr, i) { return DataTable_arrayWithHoles(arr) || DataTable_iterableToArrayLimit(arr, i) || DataTable_unsupportedIterableToArray(arr, i) || DataTable_nonIterableRest(); }\n\nfunction DataTable_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction DataTable_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return DataTable_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DataTable_arrayLikeToArray(o, minLen); }\n\nfunction DataTable_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction DataTable_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction DataTable_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar DataTable_id = \'data-table\';\nvar DataTable_title = \'Data Table\';\nvar DataTable_description = \'Data tables display sets of data across rows and columns.\';\nvar DataTable_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-data-table\',\n  guide: \'https://material.io/components/data-tables\'\n};\nvar table = [[\'Frozen yogurt\', 24, 4.0, \'Super tasty\'], [\'Ice cream sandwich\', 37, 4.33333333333, \'I like ice cream more\'], [\'Eclair\', 24, 6.0, \'New filing flavor\']];\nfunction DataTablePage() {\n  var _useState = (0,react.useState)(table),\n      _useState2 = DataTable_slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = (0,react.useState)(0),\n      _useState4 = DataTable_slicedToArray(_useState3, 2),\n      sort = _useState4[0],\n      setSort = _useState4[1];\n\n  var handleSort = (0,react.useCallback)(function () {\n    setSort(function (sort) {\n      if (sort === -1) {\n        setData(function (data) {\n          return data.slice().sort(function (a, b) {\n            return a[1] - b[1];\n          });\n        });\n        setSort(1);\n      } else {\n        setData(function (data) {\n          return data.slice().sort(function (a, b) {\n            return b[1] - a[1];\n          });\n        });\n        setSort(-1);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: DataTable_id,\n    title: DataTable_title,\n    description: DataTable_description,\n    links: DataTable_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Sortable data table",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(data_table_DataTable, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.Header, {\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)(data_table_DataTable.HeaderRow, {\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.HeaderCell, {\n              children: "Dessert"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.HeaderCell, {\n              numeric: true,\n              sort: sort,\n              onSort: handleSort,\n              children: "Carbs (g)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.HeaderCell, {\n              numeric: true,\n              children: "Protein (g)"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.HeaderCell, {\n              children: "Comments"\n            })]\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.Content, {\n          children: data.map(function (row, index) {\n            return /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.Row, {\n              children: row.map(function (value, index) {\n                return /*#__PURE__*/(0,jsx_runtime.jsx)(data_table_DataTable.Cell, {\n                  scope: index === 0 ? \'row\' : undefined,\n                  numeric: typeof value === \'number\' || undefined,\n                  children: value\n                }, index);\n              })\n            }, index);\n          })\n        })]\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Dialog/index.jsx\nfunction Dialog_slicedToArray(arr, i) { return Dialog_arrayWithHoles(arr) || Dialog_iterableToArrayLimit(arr, i) || Dialog_unsupportedIterableToArray(arr, i) || Dialog_nonIterableRest(); }\n\nfunction Dialog_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Dialog_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Dialog_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Dialog_arrayLikeToArray(o, minLen); }\n\nfunction Dialog_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Dialog_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Dialog_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar Dialog_id = \'dialog\';\nvar Dialog_title = \'Dialog\';\nvar Dialog_description = \'Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\';\nvar Dialog_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-dialog\',\n  guide: \'https://material.io/components/dialogs\'\n};\nvar scrollableContent = "\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt earum quibusdam dolor hic accusamus, deserunt libero? Deleniti ratione libero, eveniet neque aliquam repellat dicta obcaecati atque, sequi voluptatem explicabo beatae!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis animi vel cupiditate eveniet? Laudantium recusandae illo minus saepe itaque dolores fugiat, perferendis nostrum! Assumenda fugiat fuga deserunt omnis odit dicta!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus accusantium a quisquam in repudiandae et ullam cum dignissimos exercitationem, blanditiis perspiciatis alias hic vel, laudantium aliquam omnis recusandae nemo animi.\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt earum quibusdam dolor hic accusamus, deserunt libero? Deleniti ratione libero, eveniet neque aliquam repellat dicta obcaecati atque, sequi voluptatem explicabo beatae!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis animi vel cupiditate eveniet? Laudantium recusandae illo minus saepe itaque dolores fugiat, perferendis nostrum! Assumenda fugiat fuga deserunt omnis odit dicta!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus accusantium a quisquam in repudiandae et ullam cum dignissimos exercitationem, blanditiis perspiciatis alias hic vel, laudantium aliquam omnis recusandae nemo animi.\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt earum quibusdam dolor hic accusamus, deserunt libero? Deleniti ratione libero, eveniet neque aliquam repellat dicta obcaecati atque, sequi voluptatem explicabo beatae!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis animi vel cupiditate eveniet? Laudantium recusandae illo minus saepe itaque dolores fugiat, perferendis nostrum! Assumenda fugiat fuga deserunt omnis odit dicta!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus accusantium a quisquam in repudiandae et ullam cum dignissimos exercitationem, blanditiis perspiciatis alias hic vel, laudantium aliquam omnis recusandae nemo animi.\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt earum quibusdam dolor hic accusamus, deserunt libero? Deleniti ratione libero, eveniet neque aliquam repellat dicta obcaecati atque, sequi voluptatem explicabo beatae!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis animi vel cupiditate eveniet? Laudantium recusandae illo minus saepe itaque dolores fugiat, perferendis nostrum! Assumenda fugiat fuga deserunt omnis odit dicta!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus accusantium a quisquam in repudiandae et ullam cum dignissimos exercitationem, blanditiis perspiciatis alias hic vel, laudantium aliquam omnis recusandae nemo animi.\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt earum quibusdam dolor hic accusamus, deserunt libero? Deleniti ratione libero, eveniet neque aliquam repellat dicta obcaecati atque, sequi voluptatem explicabo beatae!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis animi vel cupiditate eveniet? Laudantium recusandae illo minus saepe itaque dolores fugiat, perferendis nostrum! Assumenda fugiat fuga deserunt omnis odit dicta!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus accusantium a quisquam in repudiandae et ullam cum dignissimos exercitationem, blanditiis perspiciatis alias hic vel, laudantium aliquam omnis recusandae nemo animi.\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt earum quibusdam dolor hic accusamus, deserunt libero? Deleniti ratione libero, eveniet neque aliquam repellat dicta obcaecati atque, sequi voluptatem explicabo beatae!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis animi vel cupiditate eveniet? Laudantium recusandae illo minus saepe itaque dolores fugiat, perferendis nostrum! Assumenda fugiat fuga deserunt omnis odit dicta!\\n\\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Minus accusantium a quisquam in repudiandae et ullam cum dignissimos exercitationem, blanditiis perspiciatis alias hic vel, laudantium aliquam omnis recusandae nemo animi.\\n";\nfunction DialogPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = Dialog_slicedToArray(_useState, 2),\n      isBasicOpen = _useState2[0],\n      setBasicOpen = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = Dialog_slicedToArray(_useState3, 2),\n      isConfirmationOpen = _useState4[0],\n      setConfirmationOpen = _useState4[1];\n\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = Dialog_slicedToArray(_useState5, 2),\n      isStackingOpen = _useState6[0],\n      setStackingOpen = _useState6[1];\n\n  var _useState7 = (0,react.useState)(false),\n      _useState8 = Dialog_slicedToArray(_useState7, 2),\n      isScrollableOpen = _useState8[0],\n      setScrollableOpen = _useState8[1];\n\n  var _useState9 = (0,react.useState)(false),\n      _useState10 = Dialog_slicedToArray(_useState9, 2),\n      isFullscreenOpen = _useState10[0],\n      setFullscreenOpen = _useState10[1];\n\n  var _useState11 = (0,react.useState)(false),\n      _useState12 = Dialog_slicedToArray(_useState11, 2),\n      isFloatingSheetOpen = _useState12[0],\n      setFloatingSheetOpen = _useState12[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Dialog_id,\n    title: Dialog_title,\n    description: Dialog_description,\n    links: Dialog_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic dialog",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setBasicOpen(function (v) {\n            return !v;\n          });\n        },\n        children: "Open"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_Dialog, {\n        title: "Title",\n        content: "Content",\n        open: isBasicOpen,\n        onClose: function onClose() {\n          return setBasicOpen(function (v) {\n            return !v;\n          });\n        }\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Confirmation dialog",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setConfirmationOpen(function (v) {\n            return !v;\n          });\n        },\n        children: "Open"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_Dialog, {\n        title: "Title",\n        content: "Are you sure?",\n        open: isConfirmationOpen,\n        persistent: true,\n        actions: [/*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          onClick: function onClick() {\n            return setConfirmationOpen(function (v) {\n              return !v;\n            });\n          },\n          children: "Close"\n        }, "close"), /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          children: "Confirm"\n        }, "confirm")],\n        onClose: function onClose() {\n          return setConfirmationOpen(function (v) {\n            return !v;\n          });\n        }\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Dialog with stacking buttons",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setStackingOpen(function (v) {\n            return !v;\n          });\n        },\n        children: "Open"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_Dialog, {\n        title: "Title",\n        content: "Content",\n        open: isStackingOpen,\n        autoStackButtons: true,\n        actions: [/*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          onClick: function onClick() {\n            return setStackingOpen(function (v) {\n              return !v;\n            });\n          },\n          children: "A very very very very very long button"\n        }, "close"), /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          children: "A very very very very very long button"\n        }, "confirm")],\n        onClose: function onClose() {\n          return setStackingOpen(function (v) {\n            return !v;\n          });\n        }\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Scrollable dialog",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setScrollableOpen(function (v) {\n            return !v;\n          });\n        },\n        children: "Open"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_Dialog, {\n        title: "Title",\n        open: isScrollableOpen,\n        actions: [/*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          onClick: function onClick() {\n            return setScrollableOpen(function (v) {\n              return !v;\n            });\n          },\n          children: "Close"\n        }, "close")],\n        onClose: function onClose() {\n          return setScrollableOpen(function (v) {\n            return !v;\n          });\n        },\n        children: scrollableContent\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Fullscreen dialog",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setFullscreenOpen(function (v) {\n            return !v;\n          });\n        },\n        children: "Open"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_Dialog, {\n        title: "Fullscreen Dialog",\n        open: isFullscreenOpen,\n        fullscreen: true,\n        actions: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          onClick: function onClick() {\n            return setFullscreenOpen(function (v) {\n              return !v;\n            });\n          },\n          children: "Close"\n        }, "close"),\n        onClose: function onClose() {\n          return setFullscreenOpen(function (v) {\n            return !v;\n          });\n        },\n        children: scrollableContent\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Floating sheet",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setFloatingSheetOpen(true);\n        },\n        children: "Open"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(dialog_Dialog, {\n        open: isFloatingSheetOpen,\n        sheet: true,\n        onClose: function onClose() {\n          return setFloatingSheetOpen(false);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("h3", {\n          children: "Sheets"\n        }), "There are no action buttons. Any HTML content can go here. Title is also defined through content."]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Drawer/index.jsx\nfunction Drawer_slicedToArray(arr, i) { return Drawer_arrayWithHoles(arr) || Drawer_iterableToArrayLimit(arr, i) || Drawer_unsupportedIterableToArray(arr, i) || Drawer_nonIterableRest(); }\n\nfunction Drawer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Drawer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Drawer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Drawer_arrayLikeToArray(o, minLen); }\n\nfunction Drawer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Drawer_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Drawer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar Drawer_id = \'drawer\';\nvar Drawer_title = \'Drawer\';\nvar Drawer_description = \'Navigation drawers provide access to destinations in your app.\';\nvar Drawer_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-drawer\',\n  guide: \'https://material.io/components/navigation-drawer\'\n};\nfunction DrawerPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = Drawer_slicedToArray(_useState, 2),\n      isDismissibleOpen = _useState2[0],\n      setDismissibleOpen = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = Drawer_slicedToArray(_useState3, 2),\n      isModalOpen = _useState4[0],\n      setModalOpen = _useState4[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Drawer_id,\n    title: Drawer_title,\n    description: Drawer_description,\n    links: Drawer_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Permanent drawer",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer, {\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer.Header, {\n          title: "Title"\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Dismissible drawer",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        label: "Toggle",\n        onClick: function onClick() {\n          return setDismissibleOpen(function (v) {\n            return !v;\n          });\n        }\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer, {\n        open: isDismissibleOpen,\n        dismissible: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer.Header, {\n          title: "Title"\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Modal drawer",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        label: "Toggle",\n        onClick: function onClick() {\n          return setModalOpen(function (v) {\n            return !v;\n          });\n        }\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer, {\n        open: isModalOpen,\n        onClose: function onClose() {\n          return setModalOpen(function (v) {\n            return !v;\n          });\n        },\n        modal: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer.Header, {\n          title: "Title"\n        })\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Elevation/index.jsx\nfunction Elevation_slicedToArray(arr, i) { return Elevation_arrayWithHoles(arr) || Elevation_iterableToArrayLimit(arr, i) || Elevation_unsupportedIterableToArray(arr, i) || Elevation_nonIterableRest(); }\n\nfunction Elevation_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Elevation_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Elevation_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Elevation_arrayLikeToArray(o, minLen); }\n\nfunction Elevation_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Elevation_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Elevation_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar Elevation_id = \'elevation\';\nvar Elevation_title = \'Elevation\';\nvar Elevation_description = \'Elevation is the relative distance between two surfaces along the z-axis.\';\nvar Elevation_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-elevation\',\n  guide: \'https://material.io/design/environment/elevation\'\n};\nfunction ElevationPage() {\n  var _useState = (0,react.useState)(0),\n      _useState2 = Elevation_slicedToArray(_useState, 2),\n      z = _useState2[0],\n      setZ = _useState2[1];\n\n  var handleChange = (0,react.useCallback)(function (value) {\n    setZ(value);\n  }, []);\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Elevation_id,\n    title: Elevation_title,\n    description: Elevation_description,\n    links: Elevation_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Slider, {\n        value: z,\n        min: "0",\n        max: "24",\n        step: "1",\n        discrete: true,\n        tickMarks: true,\n        onChange: handleChange\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(elevation_Elevation, {\n        z: z\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/FAB/index.jsx\nfunction FAB_slicedToArray(arr, i) { return FAB_arrayWithHoles(arr) || FAB_iterableToArrayLimit(arr, i) || FAB_unsupportedIterableToArray(arr, i) || FAB_nonIterableRest(); }\n\nfunction FAB_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction FAB_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FAB_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FAB_arrayLikeToArray(o, minLen); }\n\nfunction FAB_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction FAB_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction FAB_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar FAB_id = \'fab\';\nvar FAB_title = \'FAB\';\nvar FAB_description = \'A floating action button (FAB) represents the primary action of a screen.\';\nvar FAB_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-fab\',\n  guide: \'https://material.io/components/buttons-floating-action-button\'\n};\nfunction FABPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = FAB_slicedToArray(_useState, 2),\n      isExited = _useState2[0],\n      setExited = _useState2[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: FAB_id,\n    title: FAB_title,\n    description: FAB_description,\n    links: FAB_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic FAB",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(fab_FAB, {\n        icon: "star"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Mini FAB",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(fab_FAB, {\n        icon: "star",\n        mini: true\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Extended FAB",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(fab_FAB, {\n        icon: "star",\n        label: "Star"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Extended FAB with a trailing icon",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(fab_FAB, {\n        label: "Star",\n        trailingIcon: "star"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Animated FAB",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        label: "Toggle",\n        onClick: function onClick() {\n          return setExited(function (v) {\n            return !v;\n          });\n        }\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(fab_FAB, {\n        icon: "star",\n        exited: isExited\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/FormField/index.jsx\n\n\n\n\n\n\nvar FormField_id = \'form-field\';\nvar FormField_title = \'Form Field\';\nvar FormField_description = \'Form Field aligns a form field (for example, a checkbox) with its label and makes it RTL-aware.\';\nvar FormField_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-form-field\'\n};\nfunction FormFieldPage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: FormField_id,\n    title: FormField_title,\n    description: FormField_description,\n    links: FormField_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic form field",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Label",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {})\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Form field that goes before the element",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Label",\n        alignEnd: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {})\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "No wrap form field",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Label",\n        nowrap: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {})\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Form field with space between",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Label",\n        spaceBetween: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {})\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Block form field",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Label",\n        block: true,\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {})\n      })\n    })]\n  });\n}\n// EXTERNAL MODULE: ./node_modules/marked/lib/marked.js\nvar marked = __webpack_require__(84);\nvar marked_default = /*#__PURE__*/__webpack_require__.n(marked);\n;// CONCATENATED MODULE: ./docs/src/utils/markdown.js\n\n\nmarked_default().setOptions({\n  highlight: highlight,\n  langPrefix: \'hljs language-\'\n});\n/* harmony default export */ const markdown = ((marked_default()));\n;// CONCATENATED MODULE: ./package.json\nconst package_namespaceObject = JSON.parse(\'{"i8":"1.0.0-beta.9"}\');\n;// CONCATENATED MODULE: ./README.md\nconst README_namespaceObject = "# MDC React\\r\\n\\r\\n[Material Components Web](https://github.com/material-components/material-components-web) implemented in React.\\r\\n\\r\\n## Setup\\r\\n\\r\\nInstall the library using npm:\\r\\n\\r\\n```sh\\r\\nnpm i mdc-react\\r\\n```\\r\\n\\r\\nIf you plan on using the Sass files, you\'ll also need to install `sass`:\\r\\n\\r\\n```sh\\r\\nnpm i -D sass\\r\\n```\\r\\n\\r\\n> **NOTE**: MDC React (as well as MDC Web) uses the new [Sass Module System](https://sass-lang.com/blog/the-module-system-is-launched). Unfortunately at this time the `node-sass` implementation does not support it. Please use the `sass` library.\\r\\n\\r\\n### Icons\\r\\n\\r\\nTo use [Material Icons](https://fonts.google.com/icons?icon.set=Material+Icons) include them in your HTML:\\r\\n\\r\\n```html\\r\\n<link href=\\"https://fonts.googleapis.com/css2?family=Material+Icons\\" rel=\\"stylesheet\\">\\r\\n```\\r\\n\\r\\n### Symbols (NEW)\\r\\n\\r\\nTo use [Material Symbols](https://fonts.google.com/icons?icon.set=Material+Symbols) include them in your HTML:\\r\\n\\r\\n```html\\r\\n<link href=\\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined\\" rel=\\"stylesheet\\">\\r\\n```\\r\\n\\r\\nThe above snippet includes the default configuration for each <a href=\\"https://fonts.google.com/knowledge/glossary/axis_in_variable_fonts\\" target=\\"_blank\\" class=\\"external\\">axis</a>, with <a href=\\"https://fonts.google.com/knowledge/glossary/weight_axis\\" target=\\"_blank\\" class=\\"external\\">weight</a> at 400, <a href=\\"https://fonts.google.com/knowledge/glossary/optical_size_axis\\" target=\\"_blank\\" class=\\"external\\">optical size</a> at 48, <a href=\\"https://fonts.google.com/knowledge/glossary/grade_axis\\" target=\\"_blank\\" class=\\"external\\">grade</a> at 0 and <a href=\\"https://fonts.google.com/knowledge/glossary/fill_axis\\" target=\\"_blank\\" class=\\"external\\">fill</a> (also 0.)\\r\\n\\r\\n> To configure the symbols follow the [developer guide](https://developers.google.com/fonts/docs/material_symbols).\\r\\n\\r\\n## Usage\\r\\n\\r\\n### JS\\r\\n\\r\\nTo use the components just import what you need from the library:\\r\\n\\r\\n```jsx\\r\\nimport { Button } from \'mdc-react\';\\r\\n\\r\\nconst App = () => {\\r\\n    return (\\r\\n        <div>\\r\\n            <Button>Click me!</Button>\\r\\n        </div>\\r\\n    );\\r\\n};\\r\\n```\\r\\n\\r\\nAlternatively you can import only the components you need:\\r\\n\\r\\n```jsx\\r\\nimport Button from \'mdc-react/button\';\\r\\nimport Typography from \'mdc-react/typography\';\\r\\n\\r\\nconst App = () => {\\r\\n    return (\\r\\n        <div>\\r\\n            <Typography>Hello world!</Typography>\\r\\n            <Button>Click me!</Button>\\r\\n        </div>\\r\\n    );\\r\\n};\\r\\n```\\r\\n\\r\\n### Sass\\r\\n\\r\\nYou can use all the styles:\\r\\n\\r\\n```scss\\r\\n@use \'path-to-node_modules/mdc-react\';\\r\\n```\\r\\n\\r\\nor only the ones you need:\\r\\n\\r\\n```scss\\r\\n@use \'path-to-node_modules/mdc-react/src/button\';\\r\\n@use \'path-to-node_modules/mdc-react/src/typography\';\\r\\n```";\n;// CONCATENATED MODULE: ./docs/src/pages/Home/index.jsx\n\n\n\n\n\n\n\n\nvar html = markdown(README_namespaceObject);\nfunction HomePage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: "home",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n      type: "overline",\n      children: package_namespaceObject.i8\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("article", {\n      className: "markdown",\n      dangerouslySetInnerHTML: {\n        __html: html\n      }\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Icon/index.jsx\nfunction Icon_slicedToArray(arr, i) { return Icon_arrayWithHoles(arr) || Icon_iterableToArrayLimit(arr, i) || Icon_unsupportedIterableToArray(arr, i) || Icon_nonIterableRest(); }\n\nfunction Icon_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Icon_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Icon_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Icon_arrayLikeToArray(o, minLen); }\n\nfunction Icon_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Icon_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Icon_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\nvar Icon_id = \'icon\';\nvar Icon_title = \'Icon\';\nvar Icon_description = \'Material design system icons are simple, modern, friendly, and sometimes quirky. Each icon is created using our design guidelines to depict in simple and minimal forms the universal concepts used commonly throughout a UI.\';\nvar Icon_links = {\n  docs: \'https://developers.google.com/fonts/docs/material_icons\',\n  guide: \'https://material.io/design/iconography\'\n};\nfunction IconPage() {\n  var _useState = (0,react.useState)(\'flag\'),\n      _useState2 = Icon_slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'\'),\n      _useState4 = Icon_slicedToArray(_useState3, 2),\n      size = _useState4[0],\n      setSize = _useState4[1];\n\n  var _useState5 = (0,react.useState)(\'\'),\n      _useState6 = Icon_slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var _useState7 = (0,react.useState)(\'\'),\n      _useState8 = Icon_slicedToArray(_useState7, 2),\n      tone = _useState8[0],\n      setTone = _useState8[1];\n\n  var _useState9 = (0,react.useState)(false),\n      _useState10 = Icon_slicedToArray(_useState9, 2),\n      inactive = _useState10[0],\n      setInactive = _useState10[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Icon_id,\n    title: Icon_title,\n    description: Icon_description,\n    links: Icon_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Demo",\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: name,\n          label: "Label",\n          outlined: true,\n          onChange: function onChange(_, value) {\n            return setName(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Type",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'filled\',\n              label: \'Filled\'\n            }, {\n              value: \'outlined\',\n              label: \'Outlined\'\n            }, {\n              value: \'round\',\n              label: \'Round\'\n            }, {\n              value: \'sharp\',\n              label: \'Sharp\'\n            }, {\n              value: \'two-tone\',\n              label: \'Two Tone\'\n            }],\n            value: type,\n            onChange: setType\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Size",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'smaller\',\n              label: \'Smaller\'\n            }, {\n              value: \'small\',\n              label: \'Small\'\n            }, {\n              value: \'medium\',\n              label: \'Medium\'\n            }, {\n              value: \'large\',\n              label: \'Large\'\n            }, {\n              value: \'larger\',\n              label: \'Larger\'\n            }],\n            value: size,\n            onChange: setSize\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Tone",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'\',\n              label: \'None\'\n            }, {\n              value: \'light\',\n              label: \'Light\'\n            }, {\n              value: \'dark\',\n              label: \'Dark\'\n            }],\n            value: tone,\n            onChange: setTone\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Inactive",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: inactive,\n            onChange: function onChange() {\n              return setInactive(function (v) {\n                return !v;\n              });\n            }\n          })\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_Icon, {\n        name: name,\n        type: type,\n        size: size,\n        light: tone === \'light\',\n        dark: tone === \'dark\',\n        inactive: inactive\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/IconButton/index.jsx\nfunction IconButton_slicedToArray(arr, i) { return IconButton_arrayWithHoles(arr) || IconButton_iterableToArrayLimit(arr, i) || IconButton_unsupportedIterableToArray(arr, i) || IconButton_nonIterableRest(); }\n\nfunction IconButton_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction IconButton_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return IconButton_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return IconButton_arrayLikeToArray(o, minLen); }\n\nfunction IconButton_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction IconButton_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction IconButton_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar IconButton_id = \'icon-button\';\nvar IconButton_title = \'Icon Button\';\nvar IconButton_description = \'Icon buttons allow users to take actions, and make choices, with a single tap.\';\nvar IconButton_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-icon-button\',\n  guide: \'https://material.io/components/buttons\'\n};\nfunction IconButtonPage() {\n  var _useState = (0,react.useState)(true),\n      _useState2 = IconButton_slicedToArray(_useState, 2),\n      isOn = _useState2[0],\n      setOn = _useState2[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: IconButton_id,\n    title: IconButton_title,\n    description: IconButton_description,\n    links: IconButton_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic icon button",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        icon: "flag"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Toggling icon button",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        icon: isOn ? \'favorite\' : \'favorite_outlined\',\n        onClick: function onClick() {\n          return setOn(function (v) {\n            return !v;\n          });\n        }\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "With a symbol",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        icon: /*#__PURE__*/(0,jsx_runtime.jsx)(symbol_Symbol, {\n          children: "flag"\n        })\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/ImageList/index.jsx\nfunction pages_ImageList_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction pages_ImageList_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { pages_ImageList_ownKeys(Object(source), true).forEach(function (key) { pages_ImageList_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { pages_ImageList_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction pages_ImageList_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar ImageList_id = \'image-list\';\nvar ImageList_title = \'Image List\';\nvar ImageList_description = \'Image lists display a collection of images in an organized grid.\';\nvar ImageList_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-image-list\',\n  guide: \'https://material.io/components/image-lists\'\n};\n\n\n\n\n\nvar standardItems = new Array(15).fill(1).map(function () {\n  return {\n    imageSrc: \'https://placeimg.com/360/360/any\',\n    label: \'Text Label\'\n  };\n});\nvar masonryItems = new Array(15).fill(1).map(function () {\n  return {\n    imageSrc: "https://placeimg.com/".concat(Math.random() > 0.5 ? \'480/360\' : \'360/480\', "/any"),\n    label: \'Text Label\'\n  };\n});\nfunction ImageListPage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: ImageList_id,\n    title: ImageList_title,\n    description: ImageList_description,\n    links: ImageList_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      id: "standard-image-list",\n      title: "Standard Image List",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList, {\n        children: standardItems.map(function (item, index) {\n          return /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList.Item, pages_ImageList_objectSpread({}, item), index);\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      id: "standard-image-list",\n      title: "Standard Image List with Text Protection",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList, {\n        withTextProtection: true,\n        children: standardItems.map(function (item, index) {\n          return /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList.Item, pages_ImageList_objectSpread({}, item), index);\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      id: "masonry-image-list",\n      title: "Masonry Image List",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList, {\n        masonry: true,\n        children: masonryItems.map(function (item, index) {\n          return /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList.Item, pages_ImageList_objectSpread({}, item), index);\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      id: "masonry-image-list",\n      title: "Masonry Image List with Text Protection",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList, {\n        masonry: true,\n        withTextProtection: true,\n        children: masonryItems.map(function (item, index) {\n          return /*#__PURE__*/(0,jsx_runtime.jsx)(image_list_ImageList.Item, pages_ImageList_objectSpread({}, item), index);\n        })\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/LayoutGrid/index.jsx\n\n\n\n\n\n\nvar LayoutGrid_id = \'layout-grid\';\nvar LayoutGrid_title = \'Layout Grid\';\nvar LayoutGrid_description = \'Material design’s responsive UI is based on a 12-column grid layout.\';\nvar LayoutGrid_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-layout-grid\',\n  guide: \'https://material.io/design/layout/responsive-layout-grid.html\'\n};\nfunction LayoutGridPage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: LayoutGrid_id,\n    title: LayoutGrid_title,\n    description: LayoutGrid_description,\n    links: LayoutGrid_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic grid",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(layout_grid_LayoutGrid, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {\n          span: "6"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {\n          span: "3"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {\n          span: "2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {\n          span: "1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {\n          span: "3"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {\n          span: "1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {\n          span: "8"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Nested grid",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(layout_grid_LayoutGrid, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(layout_grid_LayoutGrid.Cell, {\n          grid: true,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {}), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {}), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {})]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {}), /*#__PURE__*/(0,jsx_runtime.jsx)(layout_grid_LayoutGrid.Cell, {})]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/LinearProgress/index.jsx\nfunction LinearProgress_slicedToArray(arr, i) { return LinearProgress_arrayWithHoles(arr) || LinearProgress_iterableToArrayLimit(arr, i) || LinearProgress_unsupportedIterableToArray(arr, i) || LinearProgress_nonIterableRest(); }\n\nfunction LinearProgress_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction LinearProgress_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return LinearProgress_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LinearProgress_arrayLikeToArray(o, minLen); }\n\nfunction LinearProgress_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction LinearProgress_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction LinearProgress_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar LinearProgress_id = \'linear-progress\';\nvar LinearProgress_title = \'Linear Progress\';\nvar LinearProgress_description = \'Progress indicators display the length of a process or express an unspecified wait time.\';\nvar LinearProgress_links = {\n  docs: \'\',\n  guide: \'\'\n};\nfunction LinearProgressPage() {\n  var _useState = (0,react.useState)(true),\n      _useState2 = LinearProgress_slicedToArray(_useState, 2),\n      isClosed = _useState2[0],\n      setClosed = _useState2[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: LinearProgress_id,\n    title: LinearProgress_title,\n    description: LinearProgress_description,\n    links: LinearProgress_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic linear progress",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(linear_progress_LinearProgress, {\n        value: "42"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Linear progress with a buffer",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(linear_progress_LinearProgress, {\n        value: "42",\n        buffer: "84"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Indeterminate linear progress",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(linear_progress_LinearProgress, {\n        indeterminate: true\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Closed linear progress",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setClosed(function (v) {\n            return !v;\n          });\n        },\n        children: "Toggle"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(linear_progress_LinearProgress, {\n        closed: isClosed,\n        value: "42"\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/List/index.jsx\n\n\n\n\n\nvar List_id = \'list\';\nvar List_title = \'List\';\nvar List_description = \'Lists present multiple line items vertically as a single continuous element.\';\nvar List_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-list\',\n  guide: \'https://material.io/components/lists\'\n};\nfunction ListPage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: List_id,\n    title: List_title,\n    description: List_description,\n    links: List_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Single-line list",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(Demo, {\n      title: "Two-line list",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          primaryText: "Item 1",\n          secondaryText: "Secondary text"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          primaryText: "Item 2",\n          secondaryText: "Secondary text"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          primaryText: "Item 3",\n          secondaryText: "Secondary text"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          overlineText: "Overline",\n          primaryText: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          overlineText: "Overline",\n          primaryText: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          overlineText: "Overline",\n          primaryText: "Item 3"\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Three-line list",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          overlineText: "Overline",\n          primaryText: "Item 1",\n          secondaryText: "Secondary text"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          overlineText: "Overline",\n          primaryText: "Item 2",\n          secondaryText: "Secondary text"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          overlineText: "Overline",\n          primaryText: "Item 3",\n          secondaryText: "Secondary text"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          icon: "star",\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          icon: "star",\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          icon: "star",\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with images",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          image: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/56/56/any"\n          }),\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          image: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/56/56/any"\n          }),\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          image: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/56/56/any"\n          }),\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with thumbnails",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          thumbnail: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/40/40/people"\n          }),\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          thumbnail: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/40/40/people"\n          }),\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          thumbnail: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/40/40/people"\n          }),\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with videos",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          video: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/100/56/people"\n          }),\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          video: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/100/56/people"\n          }),\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          video: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://placeimg.com/100/56/people"\n          }),\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with checkboxes",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingCheckbox: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {\n            defaultChecked: false\n          }),\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingCheckbox: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {\n            defaultChecked: false\n          }),\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingCheckbox: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {\n            defaultChecked: false\n          }),\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with radios",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingRadio: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {}),\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingRadio: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n            checked: true\n          }),\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingRadio: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {}),\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with switches",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingSwitch: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {}),\n          text: "Item 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingSwitch: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            checked: true\n          }),\n          text: "Item 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          leadingSwitch: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {}),\n          text: "Item 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with trailing icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 1",\n          trailingIcon: "info"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 2",\n          trailingIcon: "info"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 3",\n          trailingIcon: "info"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with trailing meta",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 1",\n          meta: "Meta"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 2",\n          meta: "Meta"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 3",\n          meta: "Meta"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with trailing checkboxes",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 1",\n          trailingCheckbox: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {})\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 2",\n          trailingCheckbox: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {\n            checked: true\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 3",\n          trailingCheckbox: /*#__PURE__*/(0,jsx_runtime.jsx)(checkbox_Checkbox, {})\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with trailing radios",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 1",\n          trailingRadio: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {})\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 2",\n          trailingRadio: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n            checked: true\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 3",\n          trailingRadio: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {})\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "List with trailing switches",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(list_List, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 1",\n          trailingSwitch: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {})\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 2",\n          trailingSwitch: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: true\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(list_ListItem, {\n          text: "Item 3",\n          trailingSwitch: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {})\n        })]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Menu/index.jsx\nfunction pages_Menu_slicedToArray(arr, i) { return pages_Menu_arrayWithHoles(arr) || pages_Menu_iterableToArrayLimit(arr, i) || pages_Menu_unsupportedIterableToArray(arr, i) || pages_Menu_nonIterableRest(); }\n\nfunction pages_Menu_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction pages_Menu_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return pages_Menu_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return pages_Menu_arrayLikeToArray(o, minLen); }\n\nfunction pages_Menu_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction pages_Menu_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction pages_Menu_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\nvar Menu_id = \'menu\';\nvar Menu_title = \'Menu\';\nvar Menu_description = \'Menus display a list of choices on temporary surfaces.\';\nvar Menu_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-menu\',\n  guide: \'https://material.io/components/menus\'\n};\nfunction MenuPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = pages_Menu_slicedToArray(_useState, 2),\n      isBasicOpen = _useState2[0],\n      setBasicOpen = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = pages_Menu_slicedToArray(_useState3, 2),\n      isQuickOpen = _useState4[0],\n      setQuickOpen = _useState4[1];\n\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = pages_Menu_slicedToArray(_useState5, 2),\n      isPersistentOpen = _useState6[0],\n      setPersistentOpen = _useState6[1];\n\n  var _useState7 = (0,react.useState)(false),\n      _useState8 = pages_Menu_slicedToArray(_useState7, 2),\n      isAnchoredOpen = _useState8[0],\n      setAnchoredOpen = _useState8[1];\n\n  var _useState9 = (0,react.useState)(menu_Menu.Origin.TOP_LEFT),\n      _useState10 = pages_Menu_slicedToArray(_useState9, 2),\n      anchorPosition = _useState10[0],\n      setAnchorPosition = _useState10[1];\n\n  var _useState11 = (0,react.useState)(menu_Menu.Origin.TOP_LEFT),\n      _useState12 = pages_Menu_slicedToArray(_useState11, 2),\n      anchorOrigin = _useState12[0],\n      setAnchorOrigin = _useState12[1];\n\n  var _useState13 = (0,react.useState)(menu_Menu.Origin.TOP_LEFT),\n      _useState14 = pages_Menu_slicedToArray(_useState13, 2),\n      transformOrigin = _useState14[0],\n      setTransformOrigin = _useState14[1];\n\n  var _useState15 = (0,react.useState)(false),\n      _useState16 = pages_Menu_slicedToArray(_useState15, 2),\n      isModalOpen = _useState16[0],\n      setModalOpen = _useState16[1];\n\n  var _useState17 = (0,react.useState)(false),\n      _useState18 = pages_Menu_slicedToArray(_useState17, 2),\n      isDialogOpen = _useState18[0],\n      setDialogOpen = _useState18[1];\n\n  var handleAnchorPositionChange = (0,react.useCallback)(function (event, value) {\n    setAnchorPosition(value);\n  }, []);\n  var handleAnchorOriginChange = (0,react.useCallback)(function (event, value) {\n    setAnchorOrigin(value);\n  }, []);\n  var handleTransformOriginChange = (0,react.useCallback)(function (event, value) {\n    setTransformOrigin(value);\n  }, []);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Menu_id,\n    title: Menu_title,\n    description: Menu_description,\n    links: Menu_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic menu",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(menu_Menu, {\n        anchor: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          label: "Open",\n          outlined: true,\n          onClick: function onClick() {\n            return setBasicOpen(true);\n          }\n        }),\n        open: isBasicOpen,\n        onClose: function onClose() {\n          setBasicOpen(false);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Quick menu",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(menu_Menu, {\n        anchor: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          label: "Open",\n          outlined: true,\n          onClick: function onClick() {\n            return setQuickOpen(true);\n          }\n        }),\n        open: isQuickOpen,\n        quick: true,\n        onClose: function onClose() {\n          setQuickOpen(false);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Persistent menu",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(menu_Menu, {\n        anchor: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          label: "Open",\n          outlined: true,\n          onClick: function onClick() {\n            return setPersistentOpen(function (v) {\n              return !v;\n            });\n          }\n        }),\n        open: isPersistentOpen,\n        persistent: true,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Foo",\n          onClick: function onClick() {\n            return setPersistentOpen(false);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Bar",\n          onClick: function onClick() {\n            return setPersistentOpen(false);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Baz",\n          onClick: function onClick() {\n            return setPersistentOpen(false);\n          }\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      id: "menu-origin",\n      className: "origin--".concat(anchorPosition.replace(\' \', \'-\')),\n      title: "Menu origin",\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(FieldSet, {\n          legend: "Anchor position",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Top left",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.TOP_LEFT,\n              checked: anchorPosition === menu_Menu.Origin.TOP_LEFT,\n              onChange: handleAnchorPositionChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Top right",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.TOP_RIGHT,\n              checked: anchorPosition === menu_Menu.Origin.TOP_RIGHT,\n              onChange: handleAnchorPositionChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Bottom left",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.BOTTOM_LEFT,\n              checked: anchorPosition === menu_Menu.Origin.BOTTOM_LEFT,\n              onChange: handleAnchorPositionChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Bottom right",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.BOTTOM_RIGHT,\n              checked: anchorPosition === menu_Menu.Origin.BOTTOM_RIGHT,\n              onChange: handleAnchorPositionChange\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(FieldSet, {\n          legend: "Anchor origin",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Top left",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.TOP_LEFT,\n              checked: anchorOrigin === menu_Menu.Origin.TOP_LEFT,\n              onChange: handleAnchorOriginChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Top right",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.TOP_RIGHT,\n              checked: anchorOrigin === menu_Menu.Origin.TOP_RIGHT,\n              onChange: handleAnchorOriginChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Bottom left",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.BOTTOM_LEFT,\n              checked: anchorOrigin === menu_Menu.Origin.BOTTOM_LEFT,\n              onChange: handleAnchorOriginChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Bottom right",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.BOTTOM_RIGHT,\n              checked: anchorOrigin === menu_Menu.Origin.BOTTOM_RIGHT,\n              onChange: handleAnchorOriginChange\n            })\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(FieldSet, {\n          legend: "Transform origin",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Top left",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.TOP_LEFT,\n              checked: transformOrigin === menu_Menu.Origin.TOP_LEFT,\n              onChange: handleTransformOriginChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Top right",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.TOP_RIGHT,\n              checked: transformOrigin === menu_Menu.Origin.TOP_RIGHT,\n              onChange: handleTransformOriginChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Bottom left",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.BOTTOM_LEFT,\n              checked: transformOrigin === menu_Menu.Origin.BOTTOM_LEFT,\n              onChange: handleTransformOriginChange\n            })\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n            label: "Bottom right",\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n              value: menu_Menu.Origin.BOTTOM_RIGHT,\n              checked: transformOrigin === menu_Menu.Origin.BOTTOM_RIGHT,\n              onChange: handleTransformOriginChange\n            })\n          })]\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(menu_Menu, {\n        anchor: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          label: isPersistentOpen ? \'Close\' : \'Open\',\n          outlined: true,\n          onClick: function onClick() {\n            return setAnchoredOpen(function (v) {\n              return !v;\n            });\n          }\n        }),\n        anchorOrigin: anchorOrigin,\n        transformOrigin: transformOrigin,\n        open: isAnchoredOpen,\n        onClose: function onClose() {\n          setAnchoredOpen(false);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Modal menu",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        onClick: function onClick() {\n          return setDialogOpen(function (v) {\n            return !v;\n          });\n        },\n        children: "Open Dialog"\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_Dialog, {\n        title: "Dialog",\n        open: isDialogOpen,\n        onClose: function onClose() {\n          return setDialogOpen(function (v) {\n            return !v;\n          });\n        },\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(dialog_Dialog.Content, {\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)(menu_Menu, {\n            anchor: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n              label: isPersistentOpen ? \'Close\' : \'Open\',\n              outlined: true,\n              onClick: function onClick() {\n                return setModalOpen(function (v) {\n                  return !v;\n                });\n              }\n            }),\n            open: isModalOpen,\n            modal: true,\n            onClose: function onClose() {\n              setModalOpen(false);\n            },\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n              text: "Foo"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n              text: "Bar"\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(menu_Menu.Item, {\n              text: "Baz"\n            })]\n          })\n        })\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Radio/index.jsx\nfunction Radio_slicedToArray(arr, i) { return Radio_arrayWithHoles(arr) || Radio_iterableToArrayLimit(arr, i) || Radio_unsupportedIterableToArray(arr, i) || Radio_nonIterableRest(); }\n\nfunction Radio_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Radio_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Radio_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Radio_arrayLikeToArray(o, minLen); }\n\nfunction Radio_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Radio_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Radio_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar Radio_id = \'radio\';\nvar Radio_title = \'Radio\';\nvar Radio_description = \'Radio buttons allow users to select one option from a set.\';\nvar Radio_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-radio\',\n  guide: \'https://material.io/components/radio-buttons\'\n};\nfunction RadioPage() {\n  var _useState = (0,react.useState)(\'yes\'),\n      _useState2 = Radio_slicedToArray(_useState, 2),\n      value1 = _useState2[0],\n      setValue1 = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'yes\'),\n      _useState4 = Radio_slicedToArray(_useState3, 2),\n      value2 = _useState4[0],\n      setValue2 = _useState4[1];\n\n  var handleChange1 = (0,react.useCallback)(function (event, value) {\n    setValue1(value);\n  }, []);\n  var handleChange2 = (0,react.useCallback)(function (event, value) {\n    setValue2(value);\n  }, []);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Radio_id,\n    title: Radio_title,\n    description: Radio_description,\n    links: Radio_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(Demo, {\n      title: "Basic radio",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Yes",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n          name: "answer1",\n          value: "yes",\n          checked: value1 === \'yes\',\n          onChange: handleChange1\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "No",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n          name: "answer1",\n          value: "no",\n          checked: value1 === \'no\',\n          onChange: handleChange1\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Maybe",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n          name: "answer1",\n          value: "maybe",\n          checked: value1 === \'maybe\',\n          onChange: handleChange1\n        })\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(Demo, {\n      title: "Disabled radio",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Yes",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n          name: "answer2",\n          value: "yes",\n          checked: value2 === \'yes\',\n          onChange: handleChange2\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "No",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n          name: "answer2",\n          value: "no",\n          checked: value2 === \'no\',\n          onChange: handleChange2\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n        label: "Maybe",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(radio_Radio, {\n          name: "answer2",\n          value: "maybe",\n          checked: value2 === \'maybe\',\n          disabled: true,\n          onChange: handleChange2\n        })\n      })]\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Ripple/index.jsx\n\n\n\n\nfunction Ripple_RadioPage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    title: "Ripple",\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic ripple",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(elevation_Elevation, {\n        z: "5",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(ripple_RippleSurface, {\n          style: {\n            height: \'100px\'\n          }\n        })\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/SegmentedButton/index.jsx\nfunction SegmentedButton_slicedToArray(arr, i) { return SegmentedButton_arrayWithHoles(arr) || SegmentedButton_iterableToArrayLimit(arr, i) || SegmentedButton_unsupportedIterableToArray(arr, i) || SegmentedButton_nonIterableRest(); }\n\nfunction SegmentedButton_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction SegmentedButton_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return SegmentedButton_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return SegmentedButton_arrayLikeToArray(o, minLen); }\n\nfunction SegmentedButton_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction SegmentedButton_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction SegmentedButton_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar SegmentedButton_id = \'segmented-button\';\nvar SegmentedButton_title = \'Segmented Button\';\nvar SegmentedButton_description = \'Segmented buttons allow users to toggle the selected states of grouped buttons.\';\nvar SegmentedButton_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-segmented-button\',\n  guide: \'https://material.io/components/buttons#toggle-button\'\n};\nfunction SegmentedButtonPage() {\n  var _useState = (0,react.useState)(\'star\'),\n      _useState2 = SegmentedButton_slicedToArray(_useState, 2),\n      value1 = _useState2[0],\n      setValue1 = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'star\'),\n      _useState4 = SegmentedButton_slicedToArray(_useState3, 2),\n      value2 = _useState4[0],\n      setValue2 = _useState4[1];\n\n  var _useState5 = (0,react.useState)(\'star\'),\n      _useState6 = SegmentedButton_slicedToArray(_useState5, 2),\n      value3 = _useState6[0],\n      setValue3 = _useState6[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: SegmentedButton_id,\n    title: SegmentedButton_title,\n    description: SegmentedButton_description,\n    links: SegmentedButton_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(segmented_button_SegmentedButton, {\n        value: value1,\n        onChange: setValue1,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n          value: "star",\n          label: "star"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n          value: "favorite",\n          label: "favorite"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(segmented_button_SegmentedButton, {\n        value: value2,\n        onChange: setValue2,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n          value: "star",\n          icon: "star"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n          value: "favorite",\n          icon: "favorite"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text with Icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(segmented_button_SegmentedButton, {\n        value: value3,\n        onChange: setValue3,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n          value: "star",\n          icon: "star",\n          label: "star"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n          value: "favorite",\n          icon: "favorite",\n          label: "favorite"\n        })]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Select/index.jsx\nfunction pages_Select_slicedToArray(arr, i) { return pages_Select_arrayWithHoles(arr) || pages_Select_iterableToArrayLimit(arr, i) || pages_Select_unsupportedIterableToArray(arr, i) || pages_Select_nonIterableRest(); }\n\nfunction pages_Select_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction pages_Select_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return pages_Select_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return pages_Select_arrayLikeToArray(o, minLen); }\n\nfunction pages_Select_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction pages_Select_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction pages_Select_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar Select_id = \'select\';\nvar Select_title = \'Select\';\nvar Select_description = \'Segmented buttons allow users to toggle the selected states of grouped buttons.\';\nvar Select_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-select\'\n};\nfunction SelectPage() {\n  var _useState = (0,react.useState)(),\n      _useState2 = pages_Select_slicedToArray(_useState, 2),\n      filled = _useState2[0],\n      setFilled = _useState2[1];\n\n  var _useState3 = (0,react.useState)(),\n      _useState4 = pages_Select_slicedToArray(_useState3, 2),\n      outlined = _useState4[0],\n      setOutlined = _useState4[1];\n\n  var _useState5 = (0,react.useState)(\'foo\'),\n      _useState6 = pages_Select_slicedToArray(_useState5, 2),\n      preselected = _useState6[0],\n      setPreselected = _useState6[1];\n\n  var _useState7 = (0,react.useState)([]),\n      _useState8 = pages_Select_slicedToArray(_useState7, 2),\n      multiple = _useState8[0],\n      setMultiple = _useState8[1];\n\n  var _useState9 = (0,react.useState)(),\n      _useState10 = pages_Select_slicedToArray(_useState9, 2),\n      icon = _useState10[0],\n      setIcon = _useState10[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Select_id,\n    title: Select_title,\n    description: Select_description,\n    links: Select_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Filled select",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(select_Select, {\n        label: "Choose",\n        value: filled,\n        filled: true,\n        onChange: function onChange(event, value) {\n          return setFilled(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "foo",\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "bar",\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "baz",\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Outlined select",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(select_Select, {\n        label: "Choose",\n        value: outlined,\n        outlined: true,\n        onChange: function onChange(event, value) {\n          return setOutlined(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "foo",\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "bar",\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "baz",\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Preselected select",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(select_Select, {\n        label: "Choose",\n        value: preselected,\n        filled: true,\n        onChange: function onChange(event, value) {\n          return setPreselected(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "foo",\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "bar",\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "baz",\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Multiple select",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(select_Select, {\n        label: "Choose",\n        value: multiple,\n        filled: true,\n        onChange: function onChange(event, value) {\n          return setMultiple(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "foo",\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "bar",\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "baz",\n          text: "Baz"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Select with an icon",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(select_Select, {\n        label: "Choose",\n        value: icon,\n        icon: "star",\n        filled: true,\n        onChange: function onChange(event, value) {\n          return setIcon(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "foo",\n          text: "Foo"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "bar",\n          text: "Bar"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(select_Select.Option, {\n          value: "baz",\n          text: "Baz"\n        })]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/SideSheet/index.jsx\nfunction SideSheet_slicedToArray(arr, i) { return SideSheet_arrayWithHoles(arr) || SideSheet_iterableToArrayLimit(arr, i) || SideSheet_unsupportedIterableToArray(arr, i) || SideSheet_nonIterableRest(); }\n\nfunction SideSheet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction SideSheet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return SideSheet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return SideSheet_arrayLikeToArray(o, minLen); }\n\nfunction SideSheet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction SideSheet_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction SideSheet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar SideSheet_id = \'side-sheet\';\nvar SideSheet_title = \'Side Sheet\';\nvar SideSheet_description = \'Side sheets are surfaces containing supplementary content that are anchored to the left or right edge of the screen.\';\nvar SideSheet_links = {\n  guide: \'https://material.io/components/sheets-side\'\n};\nfunction SideSheetPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = SideSheet_slicedToArray(_useState, 2),\n      isDismissibleOpen = _useState2[0],\n      setDismissibleOpen = _useState2[1];\n\n  var _useState3 = (0,react.useState)(false),\n      _useState4 = SideSheet_slicedToArray(_useState3, 2),\n      isModalOpen = _useState4[0],\n      setModalOpen = _useState4[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: SideSheet_id,\n    title: SideSheet_title,\n    description: SideSheet_description,\n    links: SideSheet_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic side sheet",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(side_sheet_SideSheet, {\n        title: "Title",\n        children: "Content"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Dismissible side sheet",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        label: "Toggle",\n        outlined: true,\n        onClick: function onClick() {\n          return setDismissibleOpen(function (v) {\n            return !v;\n          });\n        }\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(side_sheet_SideSheet, {\n        title: "Title",\n        closeIcon: "close",\n        open: isDismissibleOpen,\n        dismissible: true,\n        onClose: function onClose() {\n          return setDismissibleOpen(false);\n        },\n        children: "Content"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Modal side sheet",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        label: "Open",\n        outlined: true,\n        onClick: function onClick() {\n          return setModalOpen(true);\n        }\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(side_sheet_SideSheet, {\n        title: "Title",\n        closeIcon: "close",\n        open: isModalOpen,\n        modal: true,\n        onClose: function onClose() {\n          return setModalOpen(false);\n        },\n        children: "Content"\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Slider/index.jsx\nfunction pages_Slider_slicedToArray(arr, i) { return pages_Slider_arrayWithHoles(arr) || pages_Slider_iterableToArrayLimit(arr, i) || pages_Slider_unsupportedIterableToArray(arr, i) || pages_Slider_nonIterableRest(); }\n\nfunction pages_Slider_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction pages_Slider_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return pages_Slider_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return pages_Slider_arrayLikeToArray(o, minLen); }\n\nfunction pages_Slider_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction pages_Slider_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction pages_Slider_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar Slider_id = \'slider\';\nvar Slider_title = \'Slider\';\nvar Slider_description = \'Sliders allow users to make selections from a range of values.\';\nvar Slider_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider\',\n  guide: \'https://material.io/components/sliders\'\n};\nfunction SliderPage() {\n  var _useState = (0,react.useState)(50),\n      _useState2 = pages_Slider_slicedToArray(_useState, 2),\n      value1 = _useState2[0],\n      setValue1 = _useState2[1];\n\n  var _useState3 = (0,react.useState)(50),\n      _useState4 = pages_Slider_slicedToArray(_useState3, 2),\n      value2 = _useState4[0],\n      setValue2 = _useState4[1];\n\n  var _useState5 = (0,react.useState)(50),\n      _useState6 = pages_Slider_slicedToArray(_useState5, 2),\n      value3 = _useState6[0],\n      setValue3 = _useState6[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Slider_id,\n    title: Slider_title,\n    description: Slider_description,\n    links: Slider_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Continuous slider",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Slider, {\n        value: value1,\n        onChange: setValue1\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Discrete slider",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Slider, {\n        value: value2,\n        step: "10",\n        discrete: true,\n        onChange: setValue2\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Discrete slider with tick marks",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Slider, {\n        value: value3,\n        step: "10",\n        discrete: true,\n        tickMarks: true,\n        onChange: setValue3\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Disabled slider",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Slider, {\n        value: 42,\n        disabled: true\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Snackbar/index.jsx\nfunction Snackbar_slicedToArray(arr, i) { return Snackbar_arrayWithHoles(arr) || Snackbar_iterableToArrayLimit(arr, i) || Snackbar_unsupportedIterableToArray(arr, i) || Snackbar_nonIterableRest(); }\n\nfunction Snackbar_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Snackbar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Snackbar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Snackbar_arrayLikeToArray(o, minLen); }\n\nfunction Snackbar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Snackbar_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Snackbar_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar Snackbar_id = \'snackbar\';\nvar Snackbar_title = \'Snackbar\';\nvar Snackbar_description = \'Snackbars provide brief messages about app processes at the bottom of the screen.\';\nvar Snackbar_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-snackbar\',\n  guide: \'https://material.io/components/snackbars\'\n};\nfunction SnackbarPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = Snackbar_slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = (0,react.useState)(5000),\n      _useState4 = Snackbar_slicedToArray(_useState3, 2),\n      timeout = _useState4[0],\n      setTimeout = _useState4[1];\n\n  var _useState5 = (0,react.useState)(false),\n      _useState6 = Snackbar_slicedToArray(_useState5, 2),\n      hasAction = _useState6[0],\n      setHasAction = _useState6[1];\n\n  var _useState7 = (0,react.useState)(false),\n      _useState8 = Snackbar_slicedToArray(_useState7, 2),\n      isLeading = _useState8[0],\n      setLeading = _useState8[1];\n\n  var _useState9 = (0,react.useState)(false),\n      _useState10 = Snackbar_slicedToArray(_useState9, 2),\n      isStacked = _useState10[0],\n      setStacked = _useState10[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Snackbar_id,\n    title: Snackbar_title,\n    description: Snackbar_description,\n    links: Snackbar_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Demo",\n      setup: /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n        label: "Show",\n        outlined: true,\n        onClick: function onClick() {\n          return setOpen(true);\n        }\n      }),\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Elements",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n              label: "Action",\n              selected: hasAction,\n              onClick: function onClick() {\n                return setHasAction(function (v) {\n                  return !v;\n                });\n              }\n            })\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Variants",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)(segmented_button_SegmentedButton, {\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n              label: "Leading",\n              selected: isLeading,\n              onClick: function onClick() {\n                return setLeading(function (v) {\n                  return !v;\n                });\n              }\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton.Segment, {\n              label: "Stacked",\n              selected: isStacked,\n              onClick: function onClick() {\n                return setStacked(function (v) {\n                  return !v;\n                });\n              }\n            })]\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          label: "Timeout",\n          value: timeout,\n          suffix: "ms",\n          outlined: true,\n          onChange: function onChange(_, value) {\n            return setTimeout(value);\n          }\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(snackbar_Snackbar, {\n        open: isOpen,\n        timeout: timeout,\n        label: "Message",\n        action: hasAction ? /*#__PURE__*/(0,jsx_runtime.jsx)(button_Button, {\n          children: "Action"\n        }) : undefined,\n        leading: isLeading || undefined,\n        stacked: isStacked || undefined,\n        onClose: function onClose() {\n          return setOpen(undefined);\n        }\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Switch/index.jsx\nfunction Switch_slicedToArray(arr, i) { return Switch_arrayWithHoles(arr) || Switch_iterableToArrayLimit(arr, i) || Switch_unsupportedIterableToArray(arr, i) || Switch_nonIterableRest(); }\n\nfunction Switch_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Switch_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Switch_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Switch_arrayLikeToArray(o, minLen); }\n\nfunction Switch_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Switch_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Switch_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\nvar Switch_id = \'switch\';\nvar Switch_title = \'Switch\';\nvar Switch_description = \'Switches toggle the state of a single item on or off.\';\nvar Switch_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-switch\',\n  guide: \'https://material.io/components/switches\'\n};\nfunction SwitchPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = Switch_slicedToArray(_useState, 2),\n      isSelected = _useState2[0],\n      setSelected = _useState2[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Switch_id,\n    title: Switch_title,\n    description: Switch_description,\n    links: Switch_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic switch",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n        selected: isSelected,\n        onChange: function onChange() {\n          return setSelected(function (v) {\n            return !v;\n          });\n        }\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Disabled switch",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n        disabled: true\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Symbol/index.jsx\nfunction Symbol_slicedToArray(arr, i) { return Symbol_arrayWithHoles(arr) || Symbol_iterableToArrayLimit(arr, i) || Symbol_unsupportedIterableToArray(arr, i) || Symbol_nonIterableRest(); }\n\nfunction Symbol_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Symbol_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Symbol_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Symbol_arrayLikeToArray(o, minLen); }\n\nfunction Symbol_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Symbol_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Symbol_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\nvar Symbol_id = \'symbol\';\nvar Symbol_title = \'Symbol\';\nvar Symbol_description = \'Material Symbols are our newest icons, consolidating over 2,500 glyphs in a single font file with a wide range of design variants. Symbols are available in three styles and four adjustable variable font axes (fill, weight, grade, and optical size).\';\nvar Symbol_links = {\n  docs: \'https://developers.google.com/fonts/docs/material_symbols\',\n  guide: \'https://material.io/design/iconography\'\n};\nfunction SymbolPage() {\n  var _useState = (0,react.useState)(\'flag\'),\n      _useState2 = Symbol_slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = (0,react.useState)(\'\'),\n      _useState4 = Symbol_slicedToArray(_useState3, 2),\n      size = _useState4[0],\n      setSize = _useState4[1];\n\n  var _useState5 = (0,react.useState)(\'outlined\'),\n      _useState6 = Symbol_slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var _useState7 = (0,react.useState)(\'\'),\n      _useState8 = Symbol_slicedToArray(_useState7, 2),\n      tone = _useState8[0],\n      setTone = _useState8[1];\n\n  var _useState9 = (0,react.useState)(300),\n      _useState10 = Symbol_slicedToArray(_useState9, 2),\n      weight = _useState10[0],\n      setWeight = _useState10[1];\n\n  var _useState11 = (0,react.useState)(0),\n      _useState12 = Symbol_slicedToArray(_useState11, 2),\n      grade = _useState12[0],\n      setGrade = _useState12[1];\n\n  var _useState13 = (0,react.useState)(false),\n      _useState14 = Symbol_slicedToArray(_useState13, 2),\n      filled = _useState14[0],\n      setFilled = _useState14[1];\n\n  var _useState15 = (0,react.useState)(false),\n      _useState16 = Symbol_slicedToArray(_useState15, 2),\n      inactive = _useState16[0],\n      setInactive = _useState16[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Symbol_id,\n    title: Symbol_title,\n    description: Symbol_description,\n    links: Symbol_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      settings: /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n          value: name,\n          label: "Label",\n          outlined: true,\n          onChange: function onChange(_, value) {\n            return setName(value);\n          }\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Type",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'outlined\',\n              label: \'Outlined\'\n            }, {\n              value: \'rounded\',\n              label: \'Rounded\'\n            }, {\n              value: \'sharp\',\n              label: \'Sharp\'\n            }],\n            value: type,\n            onChange: setType\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Filled",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: filled,\n            onChange: function onChange() {\n              return setFilled(function (v) {\n                return !v;\n              });\n            }\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Size",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'smaller\',\n              label: \'Smaller\'\n            }, {\n              value: \'small\',\n              label: \'Small\'\n            }, {\n              value: \'medium\',\n              label: \'Medium\'\n            }, {\n              value: \'large\',\n              label: \'Large\'\n            }, {\n              value: \'larger\',\n              label: \'Larger\'\n            }],\n            value: size,\n            onChange: setSize\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Weight",\n          block: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(slider_Slider, {\n            value: weight,\n            min: "100",\n            max: "700",\n            step: "100",\n            discrete: true,\n            tickMarks: true,\n            onChange: setWeight\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Grade",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: -25,\n              label: \'Low\'\n            }, {\n              value: 0,\n              label: \'Normal\'\n            }, {\n              value: 200,\n              label: \'High\'\n            }],\n            value: grade,\n            onChange: setGrade\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(FieldSet, {\n          legend: "Tone",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(segmented_button_SegmentedButton, {\n            segments: [{\n              value: \'\',\n              label: \'None\'\n            }, {\n              value: \'light\',\n              label: \'Light\'\n            }, {\n              value: \'dark\',\n              label: \'Dark\'\n            }],\n            value: tone,\n            onChange: setTone\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(form_field_FormField, {\n          label: "Inactive",\n          alignEnd: true,\n          spaceBetween: true,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(switch_Switch, {\n            selected: inactive,\n            onChange: function onChange() {\n              return setInactive(function (v) {\n                return !v;\n              });\n            }\n          })\n        })]\n      }),\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(symbol_Symbol, {\n        name: name,\n        type: type,\n        size: size,\n        weight: weight,\n        grade: grade,\n        filled: filled,\n        light: tone === \'light\',\n        dark: tone === \'dark\',\n        inactive: inactive\n      })\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Tabs/index.jsx\nfunction Tabs_slicedToArray(arr, i) { return Tabs_arrayWithHoles(arr) || Tabs_iterableToArrayLimit(arr, i) || Tabs_unsupportedIterableToArray(arr, i) || Tabs_nonIterableRest(); }\n\nfunction Tabs_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Tabs_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Tabs_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Tabs_arrayLikeToArray(o, minLen); }\n\nfunction Tabs_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Tabs_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction Tabs_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar Tabs_id = \'tabs\';\nvar Tabs_title = \'Tabs\';\nvar Tabs_description = \'Tabs organize content across different screens, data sets, and other interactions.\';\nvar Tabs_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-tab-bar\',\n  guide: \'https://material.io/components/tabs\'\n};\nfunction Tabs_SwitchPage() {\n  var _useState = (0,react.useState)(0),\n      _useState2 = Tabs_slicedToArray(_useState, 2),\n      basic = _useState2[0],\n      setBasic = _useState2[1];\n\n  var _useState3 = (0,react.useState)(0),\n      _useState4 = Tabs_slicedToArray(_useState3, 2),\n      minWidth = _useState4[0],\n      setMinWidth = _useState4[1];\n\n  var _useState5 = (0,react.useState)(0),\n      _useState6 = Tabs_slicedToArray(_useState5, 2),\n      minWidthIndicator = _useState6[0],\n      setMinWidthIndicator = _useState6[1];\n\n  var _useState7 = (0,react.useState)(0),\n      _useState8 = Tabs_slicedToArray(_useState7, 2),\n      minWidthWithMinWidthIndicator = _useState8[0],\n      setMinWidthWithMinWidthIndicator = _useState8[1];\n\n  var _useState9 = (0,react.useState)(0),\n      _useState10 = Tabs_slicedToArray(_useState9, 2),\n      fade = _useState10[0],\n      setFade = _useState10[1];\n\n  var _useState11 = (0,react.useState)(0),\n      _useState12 = Tabs_slicedToArray(_useState11, 2),\n      icons = _useState12[0],\n      setIcons = _useState12[1];\n\n  var _useState13 = (0,react.useState)(0),\n      _useState14 = Tabs_slicedToArray(_useState13, 2),\n      stackedIcons = _useState14[0],\n      setStackedIcons = _useState14[1];\n\n  var _useState15 = (0,react.useState)(0),\n      _useState16 = Tabs_slicedToArray(_useState15, 2),\n      onlyIcons = _useState16[0],\n      setOnlyIcons = _useState16[1];\n\n  var _useState17 = (0,react.useState)(0),\n      _useState18 = Tabs_slicedToArray(_useState17, 2),\n      iconIndicator = _useState18[0],\n      setIconIndicator = _useState18[1];\n\n  var _useState19 = (0,react.useState)(0),\n      _useState20 = Tabs_slicedToArray(_useState19, 2),\n      scroll = _useState20[0],\n      setScroll = _useState20[1];\n\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Tabs_id,\n    title: Tabs_title,\n    description: Tabs_description,\n    links: Tabs_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic tabs",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: basic,\n        onChange: function onChange(value) {\n          return setBasic(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Min width tabs",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: minWidth,\n        minWidth: true,\n        onChange: function onChange(value) {\n          return setMinWidth(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Tabs with min width indicator",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: minWidthIndicator,\n        minWidthIndicator: true,\n        onChange: function onChange(value) {\n          return setMinWidthIndicator(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Min width tabs with min width indicator",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: minWidthWithMinWidthIndicator,\n        minWidth: true,\n        minWidthIndicator: true,\n        onChange: function onChange(value) {\n          return setMinWidthWithMinWidthIndicator(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Tabs with fading indicator",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: fade,\n        fade: true,\n        onChange: function onChange(value) {\n          return setFade(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Tabs with icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: icons,\n        onChange: function onChange(value) {\n          return setIcons(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "star",\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "favorite",\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "settings",\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Tabs with stacked icons",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: stackedIcons,\n        stacked: true,\n        onChange: function onChange(value) {\n          return setStackedIcons(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "star",\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "favorite",\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "settings",\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Tabs with icons only",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: onlyIcons,\n        indicatorIcon: "star",\n        onChange: function onChange(value) {\n          return setOnlyIcons(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "star"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "favorite"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          icon: "settings"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Tabs with icon indicator",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: iconIndicator,\n        onChange: function onChange(value) {\n          return setIconIndicator(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 3"\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Scrolling tabs",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n        value: scroll,\n        onChange: function onChange(value) {\n          return setScroll(value);\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 1"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 2"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 3"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 4"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 5"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 6"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 7"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 8"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 9"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 10"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 11"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 12"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 13"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 14"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n          label: "Tab 15"\n        })]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/TextField/index.jsx\nfunction pages_TextField_slicedToArray(arr, i) { return pages_TextField_arrayWithHoles(arr) || pages_TextField_iterableToArrayLimit(arr, i) || pages_TextField_unsupportedIterableToArray(arr, i) || pages_TextField_nonIterableRest(); }\n\nfunction pages_TextField_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction pages_TextField_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return pages_TextField_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return pages_TextField_arrayLikeToArray(o, minLen); }\n\nfunction pages_TextField_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction pages_TextField_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction pages_TextField_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nvar TextField_id = \'text-field\';\nvar TextField_title = \'Text Field\';\nvar TextField_description = \'Text fields let users enter and edit text.\';\nvar TextField_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield\',\n  guide: \'https://material.io/components/text-fields\'\n};\nfunction TypographyPage() {\n  var _useState = (0,react.useState)(\'filled\'),\n      _useState2 = pages_TextField_slicedToArray(_useState, 2),\n      type = _useState2[0],\n      setType = _useState2[1];\n\n  var isFilled = type === \'filled\' || undefined;\n  var isOutlined = type === \'outlined\' || undefined;\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: TextField_id,\n    title: TextField_title,\n    description: TextField_description,\n    links: TextField_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(tabs_TabBar, {\n      value: type,\n      onChange: setType,\n      minWidth: true,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n        value: "filled",\n        label: "Filled"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(tabs_Tab, {\n        value: "outlined",\n        label: "Outlined"\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic text field",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with a label",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Textarea",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        textarea: true,\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Autoresizable textarea",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        textarea: true,\n        autoResize: true,\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Pre-filled text field",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "Some text",\n        label: "Label",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "With helper text",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        helperText: "Helper text",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "With persistent helper text",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        persistentHelperText: "Helper text",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with validation message",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        required: true,\n        validationMessage: "Validation message",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with a character counter",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        maxLength: 10,\n        characterCounter: true,\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with an internal character counter",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        maxLength: 120,\n        filled: isFilled,\n        outlined: isOutlined,\n        textarea: true,\n        characterCounter: "internal"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with a prefix",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        prefix: "@",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with a suffix",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        label: "Label",\n        suffix: "$",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with a leading icon",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        leadingIcon: "star",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Text field with a trailing icon",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(text_field_TextField, {\n        defaultValue: "",\n        trailingIcon: "edit",\n        filled: isFilled,\n        outlined: isOutlined\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Tooltip/index.jsx\n\n\n\n\n\n\nvar Tooltip_id = \'tooltip\';\nvar Tooltip_title = \'Tooltip\';\nvar Tooltip_description = \'Tooltips display informative text when users hover over, focus on, or tap an element.\';\nvar Tooltip_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-tooltip\',\n  guide: \'https://material.io/components/tooltips\'\n};\nfunction TooltipPage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: Tooltip_id,\n    title: Tooltip_title,\n    description: Tooltip_description,\n    links: Tooltip_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Basic tooltip",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(tooltip_Tooltip, {\n        label: "Star",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n          icon: "star"\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Multiline tooltip",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(tooltip_Tooltip, {\n        label: "This is a star icon button, you should click on it",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n          icon: "star"\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      title: "Rich tooltip",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(tooltip_RichTooltip, {\n        title: "Title",\n        content: "Default rich tooltips are shown when users hover over or focus on their anchor element. They remain shown when users focus/hover over the contents of the rich tooltip, but becomes hidden if the users focus/hover outside of the anchor element or the tooltip contents. If the user clicks within the contents of the tooltip, the tooltip will also be hidden.",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n          icon: "star"\n        })\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/TopAppBar/index.jsx\nfunction pages_TopAppBar_slicedToArray(arr, i) { return pages_TopAppBar_arrayWithHoles(arr) || pages_TopAppBar_iterableToArrayLimit(arr, i) || pages_TopAppBar_unsupportedIterableToArray(arr, i) || pages_TopAppBar_nonIterableRest(); }\n\nfunction pages_TopAppBar_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction pages_TopAppBar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return pages_TopAppBar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return pages_TopAppBar_arrayLikeToArray(o, minLen); }\n\nfunction pages_TopAppBar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction pages_TopAppBar_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction pages_TopAppBar_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nvar TopAppBar_id = \'top-app-bar\';\nvar TopAppBar_title = \'Top App Bar\';\nvar TopAppBar_description = \'The top app bar displays information and actions relating to the current screen.\';\nvar TopAppBar_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-top-app-bar\',\n  guide: \'https://material.io/components/app-bars-top\'\n};\nfunction TopAppBarPage() {\n  var _useState = (0,react.useState)(false),\n      _useState2 = pages_TopAppBar_slicedToArray(_useState, 2),\n      isCollapsed = _useState2[0],\n      setCollapsed = _useState2[1];\n\n  var actionItems = [/*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n    icon: "add"\n  }, "add"), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n    icon: "edit"\n  }, "edit"), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n    icon: "delete"\n  }, "delete")];\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(Page, {\n    id: TopAppBar_id,\n    title: TopAppBar_title,\n    description: TopAppBar_description,\n    links: TopAppBar_links,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(top_app_bar_TopAppBar, {\n        title: "Basic",\n        navigationIcon: "menu",\n        actionItems: actionItems\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(top_app_bar_TopAppBar, {\n        title: "Dense",\n        navigationIcon: "menu",\n        actionItems: actionItems,\n        dense: true\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(top_app_bar_TopAppBar, {\n        title: "Prominent",\n        navigationIcon: "menu",\n        actionItems: actionItems,\n        prominent: true\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(Demo, {\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(top_app_bar_TopAppBar, {\n        title: "Short",\n        navigationIcon: "menu",\n        "short": true,\n        collapsed: isCollapsed,\n        onNavigationIconClick: function onNavigationIconClick() {\n          return setCollapsed(function (v) {\n            return !v;\n          });\n        }\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/Typography/index.jsx\n\n\n\n\n\n\nvar Typography_id = \'typography\';\nvar Typography_title = \'Typography\';\nvar Typography_description = \'Typography expresses hierarchy and brand presence.\';\nvar Typography_links = {\n  docs: \'https://github.com/material-components/material-components-web/tree/master/packages/mdc-typography\',\n  guide: \'https://material.io/design/typography\'\n};\nfunction Typography_TypographyPage() {\n  return /*#__PURE__*/(0,jsx_runtime.jsx)(Page, {\n    id: Typography_id,\n    title: Typography_title,\n    description: Typography_description,\n    links: Typography_links,\n    children: /*#__PURE__*/(0,jsx_runtime.jsxs)(Demo, {\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "headline1",\n        noMargin: true,\n        children: "Headline 1"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "headline2",\n        noMargin: true,\n        children: "Headline 2"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "headline3",\n        noMargin: true,\n        children: "Headline 3"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "headline4",\n        noMargin: true,\n        children: "Headline 4"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "headline5",\n        noMargin: true,\n        children: "Headline 5"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "headline6",\n        noMargin: true,\n        children: "Headline 6"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "subtitle1",\n        noMargin: true,\n        children: "Subtitle 1"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "subtitle2",\n        noMargin: true,\n        children: "Subtitle 2"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "body1",\n        noMargin: true,\n        children: "Body 1"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "body2",\n        noMargin: true,\n        children: "Body 2"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "caption",\n        children: "Caption"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "button",\n        children: "Button"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(typography_Typography, {\n        type: "overline",\n        children: "Overline"\n      })]\n    })\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/pages/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./docs/src/routes.js\n\n/* harmony default export */ const routes = ([{\n  title: \'Avatar\',\n  url: \'/avatar\',\n  component: AvatarPage,\n  icon: \'account_circle\'\n}, {\n  title: \'Badge\',\n  url: \'/badge\',\n  component: BadgePage,\n  icon: \'mark_email_unread\'\n}, {\n  title: \'Banner\',\n  url: \'/banner\',\n  component: Banner_BadgePage,\n  icon: \'error_outline\',\n  imageUrl: \'https://lh3.googleusercontent.com/tOZdWbfWtIc5GHTWsW0Daqj5I6lCCrUN8-YuEVjSn87JNN6x6PEjfmne-gpBo4jHBI4gqLmi0kLVpubF41ZT2mM8glkLzo2iWgK_-jY=w760-h380\'\n}, {\n  title: \'Button\',\n  url: \'/button\',\n  component: ButtonPage,\n  icon: \'crop_7_5\',\n  imageUrl: \'https://lh3.googleusercontent.com/GHRz-5S00u7WkRGl8iUm8ezoR6eoB2NJztu-trJv3raMDvpSACeQ5O0KOoAG7SRHJNDM_mT04Hei1NwjTN-ZsIFms_bsQ4zxRyxdQQ=w760-h380\'\n}, {\n  title: \'Card\',\n  url: \'/card\',\n  component: CardPage,\n  icon: \'wysiwyg\',\n  imageUrl: \'https://lh3.googleusercontent.com/FyE3qjGwwnoeMgiyOuIxdxTQQM9Cr0ftNakOXOA8cp137rKN09BFHraERm1NPUFBTGxVgchkdl6UABc11ZcJDML4ui466W2BFIxc9Q=w760-h380\'\n}, {\n  title: \'Checkbox\',\n  url: \'/checkbox\',\n  component: CheckboxPage,\n  icon: \'check_box\'\n}, {\n  title: \'Chips\',\n  url: \'/chips\',\n  component: ChipsPage,\n  icon: \'label\'\n}, {\n  title: \'Circular Progress\',\n  url: \'/circular-progress\',\n  component: CircularProgressPage,\n  icon: \'circle\'\n}, {\n  title: \'DataTable\',\n  url: \'/data-table\',\n  component: DataTablePage,\n  icon: \'table_chart\'\n}, {\n  title: \'Dialog\',\n  url: \'/dialog\',\n  component: DialogPage,\n  icon: \'video_label\'\n}, {\n  title: \'Drawer\',\n  url: \'/drawer\',\n  component: DrawerPage,\n  icon: \'view_quilt\'\n}, {\n  title: \'Elevation\',\n  url: \'/elevation\',\n  component: ElevationPage,\n  icon: \'layers\'\n}, {\n  title: \'FAB\',\n  url: \'/fab\',\n  component: FABPage,\n  icon: \'add_circle\',\n  imageUrl: \'https://lh3.googleusercontent.com/T8dlYzaaU2SV86x6lqNMjlHcrFdKv85QMW1UnJShGwklRQyuUqZIklOjnEuqrZzF1h84ohrzz2ITajbT9IdljofNFmP5csEq6G7W=w760-h380\'\n}, {\n  title: \'Form Field\',\n  url: \'/form-field\',\n  component: FormFieldPage,\n  icon: \'short_text\'\n}, {\n  title: \'Icon\',\n  url: \'/icon\',\n  component: IconPage,\n  icon: \'category\'\n}, {\n  title: \'Icon Button\',\n  url: \'/icon-button\',\n  component: IconButtonPage,\n  icon: \'info\'\n}, {\n  title: \'Image List\',\n  url: \'/image-list\',\n  component: ImageListPage,\n  icon: \'dashboard\'\n}, {\n  title: \'Layout Grid\',\n  url: \'/layout-grid\',\n  component: LayoutGridPage,\n  icon: \'calendar_view_month\'\n}, {\n  title: \'Linear Progress\',\n  url: \'/linear-progress\',\n  component: LinearProgressPage,\n  icon: \'horizontal_rule\'\n}, {\n  title: \'List\',\n  url: \'/list\',\n  component: ListPage,\n  icon: \'format_list_bulleted\'\n}, {\n  title: \'Menu\',\n  url: \'/menu\',\n  component: MenuPage,\n  icon: \'list_alt\'\n}, {\n  title: \'Radio\',\n  url: \'/radio\',\n  component: RadioPage,\n  icon: \'radio_button_checked\'\n}, {\n  title: \'Ripple\',\n  url: \'/ripple\',\n  component: Ripple_RadioPage,\n  icon: \'ads_click\'\n}, {\n  title: \'Segmented Button\',\n  url: \'/segmented-button\',\n  icon: \'linear_scale\',\n  component: SegmentedButtonPage,\n  imageUrl: \'\'\n}, {\n  title: \'Select\',\n  url: \'/select\',\n  component: SelectPage,\n  icon: \'ballot\',\n  imageUrl: \'\'\n}, {\n  title: \'Side Sheet\',\n  url: \'/side-sheet\',\n  component: SideSheetPage,\n  icon: \'view_sidebar\',\n  imageUrl: \'\'\n}, {\n  title: \'Slider\',\n  url: \'/slider\',\n  component: SliderPage,\n  icon: \'commit\',\n  imageUrl: \'https://lh3.googleusercontent.com/w6nNeLcjpXypo2U6_gvunUesgTNOAqzEzb5ZzxxT4AyGH_M_L_EHrybg9sJNg78BDHyeCPIQCe3Hk2sTglU0EQe7cOBsqUMFicq1lg=w760-h380\'\n}, {\n  title: \'Snackbar\',\n  url: \'/snackbar\',\n  component: SnackbarPage,\n  icon: \'call_to_action\',\n  imageUrl: \'https://lh3.googleusercontent.com/fGgZPDOszTD-2ReAC85l5op7wCE3uvnPta13Aib2bSlzN8LXoNYlDG6fY5DY1qKqbLTbGGlx9VgahUDdjDgdjq8sJNqoIY4-GPxKRA=w760-h380\'\n}, {\n  title: \'Switch\',\n  url: \'/switch\',\n  component: SwitchPage,\n  icon: \'toggle_on\'\n}, {\n  title: \'Symbol\',\n  url: \'/symbol\',\n  component: SymbolPage,\n  icon: \'category\'\n}, {\n  title: \'Tabs\',\n  url: \'/tabs\',\n  component: Tabs_SwitchPage,\n  icon: \'tab\',\n  imageUrl: \'https://lh3.googleusercontent.com/AYFp2VmMn9nslx18M6Es9C57S7p3zkiQVLl3PHvMu-OpbvK1FlLJN2MHfFNZfmfMCk1drCw84FKebz5STJ7QN69IHhH9WF1Kklir=w760-h380\'\n}, {\n  title: \'Text Field\',\n  url: \'/text-field\',\n  component: TypographyPage,\n  icon: \'text_fields\',\n  imageUrl: \'https://lh3.googleusercontent.com/Lxb_jZfXkASZ1DCzNhyS3IG7mIsPhBVmaX20Hn7XnwpS_Po9wQIC-5rEwUsYlb5TkgMjqI45-j1w4i4WM4wSlA-b0qKtmJ69hV0j=w760-h380\'\n}, {\n  title: \'Tooltip\',\n  url: \'/tooltip\',\n  component: TooltipPage,\n  icon: \'filter_frames\',\n  imageUrl: \'https://lh3.googleusercontent.com/Asm1KHPsUD-GDDglcItzvl2LKWsyrMzKMrWDA5siHaF7PAvngniS57PMZTHFsDHkHsjT9dPWC5tEpRBG7i5syZ7sbRiRpL9oE84F=w760-h380\'\n}, {\n  title: \'Top App Bar\',\n  url: \'/top-app-bar\',\n  component: TopAppBarPage,\n  icon: \'view_compact\',\n  imageUrl: \'https://lh3.googleusercontent.com/eot96a-qjAr0QypKKf-6qSJGQQqW086-GV2vv0D9F358-VFiJSWifg6-q38vbI_JsxCPnbJNzjCH12OFDXJBzScB3h__HXLwKWkjYA=w760-h380\'\n}, {\n  title: \'Typography\',\n  url: \'/typography\',\n  component: Typography_TypographyPage,\n  icon: \'title\'\n}]);\n;// CONCATENATED MODULE: ./docs/src/App.jsx\n\n\n\n\n\n\n\n\nfunction App() {\n  (0,react.useEffect)(function () {\n    var activeNavItem = document.querySelector(\'.app-drawer .mdc-list-item--activated\');\n\n    if (activeNavItem) {\n      activeNavItem.scrollIntoView({\n        behavior: \'smooth\',\n        block: \'center\'\n      });\n    }\n  }, []);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: "app mdc-typography mdc-theme--dark",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(top_app_bar_TopAppBar, {\n      className: "app-top-bar",\n      navigationIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        icon: /*#__PURE__*/(0,jsx_runtime.jsx)(Link, {\n          to: "/",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)("img", {\n            src: "https://material-components.github.io/material-components-web-catalog/static/media/ic_component_24px_white.svg",\n            alt: ""\n          })\n        })\n      }),\n      title: /*#__PURE__*/(0,jsx_runtime.jsx)(Link, {\n        to: "/",\n        className: "app-home-link",\n        children: "MDC React"\n      }),\n      actionItems: [/*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        element: "a",\n        href: "https://github.com/olegpolyakov/mdc-react",\n        target: "_blank",\n        icon: "code",\n        title: "Code"\n      }, "code"), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        element: "a",\n        href: "https://github.com/olegpolyakov/mdc-react/issues",\n        target: "_blank",\n        icon: "bug_report",\n        title: "Issues"\n      }, "issues"), /*#__PURE__*/(0,jsx_runtime.jsx)(icon_button_IconButton, {\n        element: "a",\n        href: "https://github.com/olegpolyakov/mdc-react/discussions",\n        target: "_blank",\n        icon: "forum",\n        title: "Discussions"\n      }, "discussions")]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer, {\n      className: "app-drawer",\n      dismissible: true,\n      open: true,\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(drawer_Drawer.Content, {\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(list_List, {\n          element: "nav",\n          children: routes.map(function (route) {\n            return /*#__PURE__*/(0,jsx_runtime.jsx)(list_List.Item, {\n              component: NavLink,\n              to: route.url,\n              leadingIcon: /*#__PURE__*/(0,jsx_runtime.jsx)(icon_Icon, {\n                type: "outlined",\n                children: route.icon\n              }),\n              primaryText: route.title,\n              activeClassName: "mdc-list-item--activated"\n            }, route.url);\n          })\n        })\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("main", {\n      className: "app-content mdc-drawer-app-content",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(Switch, {\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(Route, {\n          exact: true,\n          path: "/",\n          component: HomePage\n        }), routes.map(function (route) {\n          return /*#__PURE__*/(0,jsx_runtime.jsx)(Route, {\n            path: route.url,\n            exact: route.exact,\n            component: route.component\n          }, route.url);\n        })]\n      })\n    })]\n  });\n}\n;// CONCATENATED MODULE: ./docs/src/index.js\n\n\n\n\n\nvar basename = {"WEBPACK_BUNDLE":true,"WEBPACK_BUILD":true,"production":true}.production ? \'mdc-react\' : undefined;\n(0,react_dom.render)( /*#__PURE__*/(0,jsx_runtime.jsx)(BrowserRouter, {\n  basename: basename,\n  children: /*#__PURE__*/(0,jsx_runtime.jsx)(App, {})\n}), document.querySelector(\'#root\'));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///929\n')},184:(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQjs7QUFFaEI7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSyxLQUE2QjtBQUNsQztBQUNBO0FBQ0EsR0FBRyxTQUFTLElBQTRFO0FBQ3hGO0FBQ0EsRUFBRSxpQ0FBcUIsRUFBRSxtQ0FBRTtBQUMzQjtBQUNBLEdBQUc7QUFBQSxrR0FBQztBQUNKLEdBQUcsS0FBSyxFQUVOO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21kYy1yZWFjdC8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzRkMjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gIENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGlmIChhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aWYgKGFyZy50b1N0cmluZyA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykge1xuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///184\n")},679:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar reactIs = __webpack_require__(864);\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxHQUFVOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixpQkFBaUI7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanM/ZGE2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///679\n")},826:module=>{eval("module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21kYy1yZWFjdC8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2UzZGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///826\n")},84:function(module){eval("/**\n * marked - a markdown parser\n * Copyright (c) 2011-2021, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n})(this, (function () { 'use strict';\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (it) return (it = it.call(o)).next.bind(it);\n\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var defaults$5 = {exports: {}};\n\n  function getDefaults$1() {\n    return {\n      baseUrl: null,\n      breaks: false,\n      extensions: null,\n      gfm: true,\n      headerIds: true,\n      headerPrefix: '',\n      highlight: null,\n      langPrefix: 'language-',\n      mangle: true,\n      pedantic: false,\n      renderer: null,\n      sanitize: false,\n      sanitizer: null,\n      silent: false,\n      smartLists: false,\n      smartypants: false,\n      tokenizer: null,\n      walkTokens: null,\n      xhtml: false\n    };\n  }\n\n  function changeDefaults$1(newDefaults) {\n    defaults$5.exports.defaults = newDefaults;\n  }\n\n  defaults$5.exports = {\n    defaults: getDefaults$1(),\n    getDefaults: getDefaults$1,\n    changeDefaults: changeDefaults$1\n  };\n\n  /**\n   * Helpers\n   */\n  var escapeTest = /[&<>\"']/;\n  var escapeReplace = /[&<>\"']/g;\n  var escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\n  var escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n  var escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  var getEscapeReplacement = function getEscapeReplacement(ch) {\n    return escapeReplacements[ch];\n  };\n\n  function escape$2(html, encode) {\n    if (encode) {\n      if (escapeTest.test(html)) {\n        return html.replace(escapeReplace, getEscapeReplacement);\n      }\n    } else {\n      if (escapeTestNoEncode.test(html)) {\n        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n      }\n    }\n\n    return html;\n  }\n\n  var unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n  function unescape$1(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, function (_, n) {\n      n = n.toLowerCase();\n      if (n === 'colon') return ':';\n\n      if (n.charAt(0) === '#') {\n        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n      }\n\n      return '';\n    });\n  }\n\n  var caret = /(^|[^\\[])\\^/g;\n\n  function edit$1(regex, opt) {\n    regex = regex.source || regex;\n    opt = opt || '';\n    var obj = {\n      replace: function replace(name, val) {\n        val = val.source || val;\n        val = val.replace(caret, '$1');\n        regex = regex.replace(name, val);\n        return obj;\n      },\n      getRegex: function getRegex() {\n        return new RegExp(regex, opt);\n      }\n    };\n    return obj;\n  }\n\n  var nonWordAndColonTest = /[^\\w:]/g;\n  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n  function cleanUrl$1(sanitize, base, href) {\n    if (sanitize) {\n      var prot;\n\n      try {\n        prot = decodeURIComponent(unescape$1(href)).replace(nonWordAndColonTest, '').toLowerCase();\n      } catch (e) {\n        return null;\n      }\n\n      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n        return null;\n      }\n    }\n\n    if (base && !originIndependentUrl.test(href)) {\n      href = resolveUrl(base, href);\n    }\n\n    try {\n      href = encodeURI(href).replace(/%25/g, '%');\n    } catch (e) {\n      return null;\n    }\n\n    return href;\n  }\n\n  var baseUrls = {};\n  var justDomain = /^[^:]+:\\/*[^/]*$/;\n  var protocol = /^([^:]+:)[\\s\\S]*$/;\n  var domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n  function resolveUrl(base, href) {\n    if (!baseUrls[' ' + base]) {\n      // we can ignore everything in base after the last slash of its path component,\n      // but we might need to add _that_\n      // https://tools.ietf.org/html/rfc3986#section-3\n      if (justDomain.test(base)) {\n        baseUrls[' ' + base] = base + '/';\n      } else {\n        baseUrls[' ' + base] = rtrim$1(base, '/', true);\n      }\n    }\n\n    base = baseUrls[' ' + base];\n    var relativeBase = base.indexOf(':') === -1;\n\n    if (href.substring(0, 2) === '//') {\n      if (relativeBase) {\n        return href;\n      }\n\n      return base.replace(protocol, '$1') + href;\n    } else if (href.charAt(0) === '/') {\n      if (relativeBase) {\n        return href;\n      }\n\n      return base.replace(domain, '$1') + href;\n    } else {\n      return base + href;\n    }\n  }\n\n  var noopTest$1 = {\n    exec: function noopTest() {}\n  };\n\n  function merge$2(obj) {\n    var i = 1,\n        target,\n        key;\n\n    for (; i < arguments.length; i++) {\n      target = arguments[i];\n\n      for (key in target) {\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\n          obj[key] = target[key];\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  function splitCells$1(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n      var escaped = false,\n          curr = offset;\n\n      while (--curr >= 0 && str[curr] === '\\\\') {\n        escaped = !escaped;\n      }\n\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n        cells = row.split(/ \\|/);\n    var i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\n    if (!cells[0].trim()) {\n      cells.shift();\n    }\n\n    if (!cells[cells.length - 1].trim()) {\n      cells.pop();\n    }\n\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) {\n        cells.push('');\n      }\n    }\n\n    for (; i < cells.length; i++) {\n      // leading or trailing whitespace is ignored per the gfm spec\n      cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n\n    return cells;\n  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n  // /c*$/ is vulnerable to REDOS.\n  // invert: Remove suffix of non-c chars instead. Default falsey.\n\n\n  function rtrim$1(str, c, invert) {\n    var l = str.length;\n\n    if (l === 0) {\n      return '';\n    } // Length of suffix matching the invert condition.\n\n\n    var suffLen = 0; // Step left until we fail to match the invert condition.\n\n    while (suffLen < l) {\n      var currChar = str.charAt(l - suffLen - 1);\n\n      if (currChar === c && !invert) {\n        suffLen++;\n      } else if (currChar !== c && invert) {\n        suffLen++;\n      } else {\n        break;\n      }\n    }\n\n    return str.substr(0, l - suffLen);\n  }\n\n  function findClosingBracket$1(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n      return -1;\n    }\n\n    var l = str.length;\n    var level = 0,\n        i = 0;\n\n    for (; i < l; i++) {\n      if (str[i] === '\\\\') {\n        i++;\n      } else if (str[i] === b[0]) {\n        level++;\n      } else if (str[i] === b[1]) {\n        level--;\n\n        if (level < 0) {\n          return i;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  function checkSanitizeDeprecation$1(opt) {\n    if (opt && opt.sanitize && !opt.silent) {\n      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n    }\n  } // copied from https://stackoverflow.com/a/5450113/806777\n\n\n  function repeatString$1(pattern, count) {\n    if (count < 1) {\n      return '';\n    }\n\n    var result = '';\n\n    while (count > 1) {\n      if (count & 1) {\n        result += pattern;\n      }\n\n      count >>= 1;\n      pattern += pattern;\n    }\n\n    return result + pattern;\n  }\n\n  var helpers = {\n    escape: escape$2,\n    unescape: unescape$1,\n    edit: edit$1,\n    cleanUrl: cleanUrl$1,\n    resolveUrl: resolveUrl,\n    noopTest: noopTest$1,\n    merge: merge$2,\n    splitCells: splitCells$1,\n    rtrim: rtrim$1,\n    findClosingBracket: findClosingBracket$1,\n    checkSanitizeDeprecation: checkSanitizeDeprecation$1,\n    repeatString: repeatString$1\n  };\n\n  var defaults$4 = defaults$5.exports.defaults;\n  var rtrim = helpers.rtrim,\n      splitCells = helpers.splitCells,\n      _escape = helpers.escape,\n      findClosingBracket = helpers.findClosingBracket;\n\n  function outputLink(cap, link, raw, lexer) {\n    var href = link.href;\n    var title = link.title ? _escape(link.title) : null;\n    var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n    if (cap[0].charAt(0) !== '!') {\n      lexer.state.inLink = true;\n      var token = {\n        type: 'link',\n        raw: raw,\n        href: href,\n        title: title,\n        text: text,\n        tokens: lexer.inlineTokens(text, [])\n      };\n      lexer.state.inLink = false;\n      return token;\n    } else {\n      return {\n        type: 'image',\n        raw: raw,\n        href: href,\n        title: title,\n        text: _escape(text)\n      };\n    }\n  }\n\n  function indentCodeCompensation(raw, text) {\n    var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n    if (matchIndentToCode === null) {\n      return text;\n    }\n\n    var indentToCode = matchIndentToCode[1];\n    return text.split('\\n').map(function (node) {\n      var matchIndentInNode = node.match(/^\\s+/);\n\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      var indentInNode = matchIndentInNode[0];\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    }).join('\\n');\n  }\n  /**\n   * Tokenizer\n   */\n\n\n  var Tokenizer_1 = /*#__PURE__*/function () {\n    function Tokenizer(options) {\n      this.options = options || defaults$4;\n    }\n\n    var _proto = Tokenizer.prototype;\n\n    _proto.space = function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n\n      if (cap) {\n        if (cap[0].length > 1) {\n          return {\n            type: 'space',\n            raw: cap[0]\n          };\n        }\n\n        return {\n          raw: '\\n'\n        };\n      }\n    };\n\n    _proto.code = function code(src) {\n      var cap = this.rules.block.code.exec(src);\n\n      if (cap) {\n        var text = cap[0].replace(/^ {1,4}/gm, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    };\n\n    _proto.fences = function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '');\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim() : cap[2],\n          text: text\n        };\n      }\n    };\n\n    _proto.heading = function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n\n      if (cap) {\n        var text = cap[2].trim(); // remove trailing #s\n\n        if (/#$/.test(text)) {\n          var trimmed = rtrim(text, '#');\n\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || / $/.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n\n        var token = {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    };\n\n    _proto.hr = function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: cap[0]\n        };\n      }\n    };\n\n    _proto.blockquote = function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n\n      if (cap) {\n        var text = cap[0].replace(/^ *> ?/gm, '');\n        return {\n          type: 'blockquote',\n          raw: cap[0],\n          tokens: this.lexer.blockTokens(text, []),\n          text: text\n        };\n      }\n    };\n\n    _proto.list = function list(src) {\n      var cap = this.rules.block.list.exec(src);\n\n      if (cap) {\n        var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, lines, itemContents;\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\" + bull.slice(-1) : \"\\\\\" + bull;\n\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        } // Get next list item\n\n\n        var itemRegex = new RegExp(\"^( {0,3}\" + bull + \")((?: [^\\\\n]*| *)(?:\\\\n[^\\\\n]*)*(?:\\\\n|$))\"); // Get each top-level item\n\n        while (src) {\n          if (this.rules.block.hr.test(src)) {\n            // End list if we encounter an HR (possibly move into itemRegex?)\n            break;\n          }\n\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n\n          lines = cap[2].split('\\n');\n\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = lines[0].trimLeft();\n          } else {\n            indent = cap[2].search(/[^ ]/); // Find first non-space char\n\n            indent = cap[1].length + (indent > 4 ? 1 : indent); // intented code blocks after 4 spaces; indent is always 1\n\n            itemContents = lines[0].slice(indent - cap[1].length);\n          }\n\n          blankLine = false;\n          raw = cap[0];\n\n          if (!lines[0] && /^ *$/.test(lines[1])) {\n            // items begin with at most one blank line\n            raw = cap[1] + lines.slice(0, 2).join('\\n') + '\\n';\n            list.loose = true;\n            lines = [];\n          }\n\n          var nextBulletRegex = new RegExp(\"^ {0,\" + Math.min(3, indent - 1) + \"}(?:[*+-]|\\\\d{1,9}[.)])\");\n\n          for (i = 1; i < lines.length; i++) {\n            line = lines[i];\n\n            if (this.options.pedantic) {\n              // Re-align to follow commonmark nesting rules\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            } // End list item if found start of new bullet\n\n\n            if (nextBulletRegex.test(line)) {\n              raw = cap[1] + lines.slice(0, i).join('\\n') + '\\n';\n              break;\n            } // Until we encounter a blank line, item contents do not need indentation\n\n\n            if (!blankLine) {\n              if (!line.trim()) {\n                // Check if current line is empty\n                blankLine = true;\n              } // Dedent if possible\n\n\n              if (line.search(/[^ ]/) >= indent) {\n                itemContents += '\\n' + line.slice(indent);\n              } else {\n                itemContents += '\\n' + line;\n              }\n\n              continue;\n            } // Dedent this line\n\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) {\n              itemContents += '\\n' + line.slice(indent);\n              continue;\n            } else {\n              // Line was not properly indented; end of this item\n              raw = cap[1] + lines.slice(0, i).join('\\n') + '\\n';\n              break;\n            }\n          }\n\n          if (!list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              list.loose = true;\n            } else if (/\\n *\\n *$/.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          } // Check for task list items\n\n\n          if (this.options.gfm) {\n            istask = /^\\[[ xX]\\] /.exec(itemContents);\n\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n            }\n          }\n\n          list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents\n          });\n          list.raw += raw;\n          src = src.slice(raw.length);\n        } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\n\n        list.items[list.items.length - 1].raw = raw.trimRight();\n        list.items[list.items.length - 1].text = itemContents.trimRight();\n        list.raw = list.raw.trimRight();\n        var l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first\n\n        for (i = 0; i < l; i++) {\n          this.lexer.state.top = false;\n          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n          if (list.items[i].tokens.some(function (t) {\n            return t.type === 'space';\n          })) {\n            list.loose = true;\n            list.items[i].loose = true;\n          }\n        }\n\n        return list;\n      }\n    };\n\n    _proto.html = function html(src) {\n      var cap = this.rules.block.html.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'html',\n          raw: cap[0],\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: cap[0]\n        };\n\n        if (this.options.sanitize) {\n          token.type = 'paragraph';\n          token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);\n          token.tokens = [];\n          this.lexer.inline(token.text, token.tokens);\n        }\n\n        return token;\n      }\n    };\n\n    _proto.def = function def(src) {\n      var cap = this.rules.block.def.exec(src);\n\n      if (cap) {\n        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n        return {\n          type: 'def',\n          tag: tag,\n          raw: cap[0],\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n    };\n\n    _proto.table = function table(src) {\n      var cap = this.rules.block.table.exec(src);\n\n      if (cap) {\n        var item = {\n          type: 'table',\n          header: splitCells(cap[1]).map(function (c) {\n            return {\n              text: c\n            };\n          }),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          rows: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n        };\n\n        if (item.header.length === item.align.length) {\n          item.raw = cap[0];\n          var l = item.align.length;\n          var i, j, k, row;\n\n          for (i = 0; i < l; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n\n          l = item.rows.length;\n\n          for (i = 0; i < l; i++) {\n            item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {\n              return {\n                text: c\n              };\n            });\n          } // parse child tokens inside headers and cells\n          // header child tokens\n\n\n          l = item.header.length;\n\n          for (j = 0; j < l; j++) {\n            item.header[j].tokens = [];\n            this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n          } // cell child tokens\n\n\n          l = item.rows.length;\n\n          for (j = 0; j < l; j++) {\n            row = item.rows[j];\n\n            for (k = 0; k < row.length; k++) {\n              row[k].tokens = [];\n              this.lexer.inlineTokens(row[k].text, row[k].tokens);\n            }\n          }\n\n          return item;\n        }\n      }\n    };\n\n    _proto.lheading = function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    };\n\n    _proto.paragraph = function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'paragraph',\n          raw: cap[0],\n          text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1],\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    };\n\n    _proto.text = function text(src) {\n      var cap = this.rules.block.text.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    };\n\n    _proto.escape = function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: _escape(cap[1])\n        };\n      }\n    };\n\n    _proto.tag = function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n\n      if (cap) {\n        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n\n        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n\n        return {\n          type: this.options.sanitize ? 'text' : 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\n        };\n      }\n    };\n\n    _proto.link = function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!/>$/.test(trimmedUrl)) {\n            return;\n          } // ending angle bracket cannot be escaped\n\n\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n\n        var href = cap[2];\n        var title = '';\n\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n          if (link) {\n            href = link[1];\n            title = link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n\n        href = href.trim();\n\n        if (/^</.test(href)) {\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n          title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n        }, cap[0], this.lexer);\n      }\n    };\n\n    _proto.reflink = function reflink(src, links) {\n      var cap;\n\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = links[link.toLowerCase()];\n\n        if (!link || !link.href) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n\n        return outputLink(cap, link, cap[0], this.lexer);\n      }\n    };\n\n    _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {\n      if (prevChar === void 0) {\n        prevChar = '';\n      }\n\n      var match = this.rules.inline.emStrong.lDelim.exec(src);\n      if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\n      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDD\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/)) return;\n      var nextChar = match[1] || match[2] || '';\n\n      if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n        var lLength = match[0].length - 1;\n        var rDelim,\n            rLength,\n            delimTotal = lLength,\n            midDelimTotal = 0;\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n        endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\n\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n\n          rLength = rDelim.length;\n\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n          // Remove extra characters. *a*** -> *a*\n\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***\n\n          if (Math.min(lLength, rLength) % 2) {\n            var _text = src.slice(1, lLength + match.index + rLength);\n\n            return {\n              type: 'em',\n              raw: src.slice(0, lLength + match.index + rLength + 1),\n              text: _text,\n              tokens: this.lexer.inlineTokens(_text, [])\n            };\n          } // Create 'strong' if smallest delimiter has even char count. **a***\n\n\n          var text = src.slice(2, lLength + match.index + rLength - 1);\n          return {\n            type: 'strong',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text: text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n      }\n    };\n\n    _proto.codespan = function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n\n      if (cap) {\n        var text = cap[2].replace(/\\n/g, ' ');\n        var hasNonSpaceChars = /[^ ]/.test(text);\n        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n\n        text = _escape(text, true);\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    };\n\n    _proto.br = function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    };\n\n    _proto.del = function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2], [])\n        };\n      }\n    };\n\n    _proto.autolink = function autolink(src, mangle) {\n      var cap = this.rules.inline.autolink.exec(src);\n\n      if (cap) {\n        var text, href;\n\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n          href = 'mailto:' + text;\n        } else {\n          text = _escape(cap[1]);\n          href = text;\n        }\n\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    };\n\n    _proto.url = function url(src, mangle) {\n      var cap;\n\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n\n          text = _escape(cap[0]);\n\n          if (cap[1] === 'www.') {\n            href = 'http://' + text;\n          } else {\n            href = text;\n          }\n        }\n\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    };\n\n    _proto.inlineText = function inlineText(src, smartypants) {\n      var cap = this.rules.inline.text.exec(src);\n\n      if (cap) {\n        var text;\n\n        if (this.lexer.state.inRawBlock) {\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\n        } else {\n          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n        }\n\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: text\n        };\n      }\n    };\n\n    return Tokenizer;\n  }();\n\n  var noopTest = helpers.noopTest,\n      edit = helpers.edit,\n      merge$1 = helpers.merge;\n  /**\n   * Block-Level Grammar\n   */\n\n  var block$1 = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n    def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n  };\n  block$1._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\n  block$1._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\n  block$1.def = edit(block$1.def).replace('label', block$1._label).replace('title', block$1._title).getRegex();\n  block$1.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n  block$1.listItemStart = edit(/^( *)(bull) */).replace('bull', block$1.bullet).getRegex();\n  block$1.list = edit(block$1.list).replace(/bull/g, block$1.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block$1.def.source + ')').getRegex();\n  block$1._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\n  block$1._comment = /\x3c!--(?!-?>)[\\s\\S]*?(?:--\x3e|$)/;\n  block$1.html = edit(block$1.html, 'i').replace('comment', block$1._comment).replace('tag', block$1._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\n  block$1.paragraph = edit(block$1._paragraph).replace('hr', block$1.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block$1._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n  block$1.blockquote = edit(block$1.blockquote).replace('paragraph', block$1.paragraph).getRegex();\n  /**\n   * Normal Block Grammar\n   */\n\n  block$1.normal = merge$1({}, block$1);\n  /**\n   * GFM Block Grammar\n   */\n\n  block$1.gfm = merge$1({}, block$1.normal, {\n    table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n\n  });\n  block$1.gfm.table = edit(block$1.gfm.table).replace('hr', block$1.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block$1._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n  /**\n   * Pedantic grammar (original John Gruber's loose markdown specification)\n   */\n\n  block$1.pedantic = merge$1({}, block$1.normal, {\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block$1._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    // fences not supported\n    paragraph: edit(block$1.normal._paragraph).replace('hr', block$1.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block$1.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n  });\n  /**\n   * Inline-Level Grammar\n   */\n\n  var inline$1 = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    // CDATA section\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n    nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n      lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n      //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n      //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n      rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n      rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^([\\spunctuation])/\n  }; // list of punctuation marks from CommonMark spec\n  // without * and _ to handle the different emphasis markers * and _\n\n  inline$1._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\n  inline$1.punctuation = edit(inline$1.punctuation).replace(/punctuation/g, inline$1._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\n  inline$1.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n  inline$1.escapedEmSt = /\\\\\\*|\\\\_/g;\n  inline$1._comment = edit(block$1._comment).replace('(?:--\x3e|$)', '--\x3e').getRegex();\n  inline$1.emStrong.lDelim = edit(inline$1.emStrong.lDelim).replace(/punct/g, inline$1._punctuation).getRegex();\n  inline$1.emStrong.rDelimAst = edit(inline$1.emStrong.rDelimAst, 'g').replace(/punct/g, inline$1._punctuation).getRegex();\n  inline$1.emStrong.rDelimUnd = edit(inline$1.emStrong.rDelimUnd, 'g').replace(/punct/g, inline$1._punctuation).getRegex();\n  inline$1._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n  inline$1._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\n  inline$1._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\n  inline$1.autolink = edit(inline$1.autolink).replace('scheme', inline$1._scheme).replace('email', inline$1._email).getRegex();\n  inline$1._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n  inline$1.tag = edit(inline$1.tag).replace('comment', inline$1._comment).replace('attribute', inline$1._attribute).getRegex();\n  inline$1._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n  inline$1._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\n  inline$1._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n  inline$1.link = edit(inline$1.link).replace('label', inline$1._label).replace('href', inline$1._href).replace('title', inline$1._title).getRegex();\n  inline$1.reflink = edit(inline$1.reflink).replace('label', inline$1._label).getRegex();\n  inline$1.reflinkSearch = edit(inline$1.reflinkSearch, 'g').replace('reflink', inline$1.reflink).replace('nolink', inline$1.nolink).getRegex();\n  /**\n   * Normal Inline Grammar\n   */\n\n  inline$1.normal = merge$1({}, inline$1);\n  /**\n   * Pedantic Inline Grammar\n   */\n\n  inline$1.pedantic = merge$1({}, inline$1.normal, {\n    strong: {\n      start: /^__|\\*\\*/,\n      middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n      endAst: /\\*\\*(?!\\*)/g,\n      endUnd: /__(?!_)/g\n    },\n    em: {\n      start: /^_|\\*/,\n      middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n      endAst: /\\*(?!\\*)/g,\n      endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline$1._label).getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline$1._label).getRegex()\n  });\n  /**\n   * GFM Inline Grammar\n   */\n\n  inline$1.gfm = merge$1({}, inline$1.normal, {\n    escape: edit(inline$1.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n  });\n  inline$1.gfm.url = edit(inline$1.gfm.url, 'i').replace('email', inline$1.gfm._extended_email).getRegex();\n  /**\n   * GFM + Line Breaks Inline Grammar\n   */\n\n  inline$1.breaks = merge$1({}, inline$1.gfm, {\n    br: edit(inline$1.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline$1.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n  });\n  var rules = {\n    block: block$1,\n    inline: inline$1\n  };\n\n  var Tokenizer$1 = Tokenizer_1;\n  var defaults$3 = defaults$5.exports.defaults;\n  var block = rules.block,\n      inline = rules.inline;\n  var repeatString = helpers.repeatString;\n  /**\n   * smartypants text replacement\n   */\n\n  function smartypants(text) {\n    return text // em-dashes\n    .replace(/---/g, \"\\u2014\") // en-dashes\n    .replace(/--/g, \"\\u2013\") // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes\n    .replace(/'/g, \"\\u2019\") // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles\n    .replace(/\"/g, \"\\u201D\") // ellipses\n    .replace(/\\.{3}/g, \"\\u2026\");\n  }\n  /**\n   * mangle email addresses\n   */\n\n\n  function mangle(text) {\n    var out = '',\n        i,\n        ch;\n    var l = text.length;\n\n    for (i = 0; i < l; i++) {\n      ch = text.charCodeAt(i);\n\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16);\n      }\n\n      out += '&#' + ch + ';';\n    }\n\n    return out;\n  }\n  /**\n   * Block Lexer\n   */\n\n\n  var Lexer_1 = /*#__PURE__*/function () {\n    function Lexer(options) {\n      this.tokens = [];\n      this.tokens.links = Object.create(null);\n      this.options = options || defaults$3;\n      this.options.tokenizer = this.options.tokenizer || new Tokenizer$1();\n      this.tokenizer = this.options.tokenizer;\n      this.tokenizer.options = this.options;\n      this.tokenizer.lexer = this;\n      this.inlineQueue = [];\n      this.state = {\n        inLink: false,\n        inRawBlock: false,\n        top: true\n      };\n      var rules = {\n        block: block.normal,\n        inline: inline.normal\n      };\n\n      if (this.options.pedantic) {\n        rules.block = block.pedantic;\n        rules.inline = inline.pedantic;\n      } else if (this.options.gfm) {\n        rules.block = block.gfm;\n\n        if (this.options.breaks) {\n          rules.inline = inline.breaks;\n        } else {\n          rules.inline = inline.gfm;\n        }\n      }\n\n      this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n\n\n    /**\n     * Static Lex Method\n     */\n    Lexer.lex = function lex(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    ;\n\n    Lexer.lexInline = function lexInline(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    ;\n\n    var _proto = Lexer.prototype;\n\n    _proto.lex = function lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ');\n      this.blockTokens(src, this.tokens);\n      var next;\n\n      while (next = this.inlineQueue.shift()) {\n        this.inlineTokens(next.src, next.tokens);\n      }\n\n      return this.tokens;\n    }\n    /**\n     * Lexing\n     */\n    ;\n\n    _proto.blockTokens = function blockTokens(src, tokens) {\n      var _this = this;\n\n      if (tokens === void 0) {\n        tokens = [];\n      }\n\n      if (this.options.pedantic) {\n        src = src.replace(/^ +$/gm, '');\n      }\n\n      var token, lastToken, cutSrc, lastParagraphClipped;\n\n      while (src) {\n        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n\n          return false;\n        })) {\n          continue;\n        } // newline\n\n\n        if (token = this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n\n          if (token.type) {\n            tokens.push(token);\n          }\n\n          continue;\n        } // code\n\n\n        if (token = this.tokenizer.code(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        } // fences\n\n\n        if (token = this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // heading\n\n\n        if (token = this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // hr\n\n\n        if (token = this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // blockquote\n\n\n        if (token = this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // list\n\n\n        if (token = this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // html\n\n\n        if (token = this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // def\n\n\n        if (token = this.tokenizer.def(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.raw;\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else if (!this.tokens.links[token.tag]) {\n            this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n\n          continue;\n        } // table (gfm)\n\n\n        if (token = this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // lheading\n\n\n        if (token = this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // top-level paragraph\n        // prevent paragraph consuming extensions by clipping 'src' to extension start\n\n\n        cutSrc = src;\n\n        if (this.options.extensions && this.options.extensions.startBlock) {\n          (function () {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart = void 0;\n\n            _this.options.extensions.startBlock.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: this\n              }, tempSrc);\n\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          })();\n        }\n\n        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastParagraphClipped && lastToken.type === 'paragraph') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n\n          lastParagraphClipped = cutSrc.length !== src.length;\n          src = src.substring(token.raw.length);\n          continue;\n        } // text\n\n\n        if (token = this.tokenizer.text(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        }\n\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n\n      this.state.top = true;\n      return tokens;\n    };\n\n    _proto.inline = function inline(src, tokens) {\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n    }\n    /**\n     * Lexing/Compiling\n     */\n    ;\n\n    _proto.inlineTokens = function inlineTokens(src, tokens) {\n      var _this2 = this;\n\n      if (tokens === void 0) {\n        tokens = [];\n      }\n\n      var token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\n\n      var maskedSrc = src;\n      var match;\n      var keepPrevChar, prevChar; // Mask out reflinks\n\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      } // Mask out other blocks\n\n\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      } // Mask out escaped em & strong delimiters\n\n\n      while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      }\n\n      while (src) {\n        if (!keepPrevChar) {\n          prevChar = '';\n        }\n\n        keepPrevChar = false; // extensions\n\n        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this2\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n\n          return false;\n        })) {\n          continue;\n        } // escape\n\n\n        if (token = this.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // tag\n\n\n        if (token = this.tokenizer.tag(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        } // link\n\n\n        if (token = this.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // reflink, nolink\n\n\n        if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        } // em & strong\n\n\n        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // code\n\n\n        if (token = this.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // br\n\n\n        if (token = this.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // del (gfm)\n\n\n        if (token = this.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // autolink\n\n\n        if (token = this.tokenizer.autolink(src, mangle)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // url (gfm)\n\n\n        if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // text\n        // prevent inlineText consuming extensions by clipping 'src' to extension start\n\n\n        cutSrc = src;\n\n        if (this.options.extensions && this.options.extensions.startInline) {\n          (function () {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart = void 0;\n\n            _this2.options.extensions.startInline.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: this\n              }, tempSrc);\n\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          })();\n        }\n\n        if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n          src = src.substring(token.raw.length);\n\n          if (token.raw.slice(-1) !== '_') {\n            // Track prevChar before string of ____ started\n            prevChar = token.raw.slice(-1);\n          }\n\n          keepPrevChar = true;\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        }\n\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n\n      return tokens;\n    };\n\n    _createClass(Lexer, null, [{\n      key: \"rules\",\n      get: function get() {\n        return {\n          block: block,\n          inline: inline\n        };\n      }\n    }]);\n\n    return Lexer;\n  }();\n\n  var defaults$2 = defaults$5.exports.defaults;\n  var cleanUrl = helpers.cleanUrl,\n      escape$1 = helpers.escape;\n  /**\n   * Renderer\n   */\n\n  var Renderer_1 = /*#__PURE__*/function () {\n    function Renderer(options) {\n      this.options = options || defaults$2;\n    }\n\n    var _proto = Renderer.prototype;\n\n    _proto.code = function code(_code, infostring, escaped) {\n      var lang = (infostring || '').match(/\\S*/)[0];\n\n      if (this.options.highlight) {\n        var out = this.options.highlight(_code, lang);\n\n        if (out != null && out !== _code) {\n          escaped = true;\n          _code = out;\n        }\n      }\n\n      _code = _code.replace(/\\n$/, '') + '\\n';\n\n      if (!lang) {\n        return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\n      }\n\n      return '<pre><code class=\"' + this.options.langPrefix + escape$1(lang, true) + '\">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\n    };\n\n    _proto.blockquote = function blockquote(quote) {\n      return '<blockquote>\\n' + quote + '</blockquote>\\n';\n    };\n\n    _proto.html = function html(_html) {\n      return _html;\n    };\n\n    _proto.heading = function heading(text, level, raw, slugger) {\n      if (this.options.headerIds) {\n        return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\n      } // ignore IDs\n\n\n      return '<h' + level + '>' + text + '</h' + level + '>\\n';\n    };\n\n    _proto.hr = function hr() {\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    };\n\n    _proto.list = function list(body, ordered, start) {\n      var type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    };\n\n    _proto.listitem = function listitem(text) {\n      return '<li>' + text + '</li>\\n';\n    };\n\n    _proto.checkbox = function checkbox(checked) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n    };\n\n    _proto.paragraph = function paragraph(text) {\n      return '<p>' + text + '</p>\\n';\n    };\n\n    _proto.table = function table(header, body) {\n      if (body) body = '<tbody>' + body + '</tbody>';\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    };\n\n    _proto.tablerow = function tablerow(content) {\n      return '<tr>\\n' + content + '</tr>\\n';\n    };\n\n    _proto.tablecell = function tablecell(content, flags) {\n      var type = flags.header ? 'th' : 'td';\n      var tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\n      return tag + content + '</' + type + '>\\n';\n    } // span level renderer\n    ;\n\n    _proto.strong = function strong(text) {\n      return '<strong>' + text + '</strong>';\n    };\n\n    _proto.em = function em(text) {\n      return '<em>' + text + '</em>';\n    };\n\n    _proto.codespan = function codespan(text) {\n      return '<code>' + text + '</code>';\n    };\n\n    _proto.br = function br() {\n      return this.options.xhtml ? '<br/>' : '<br>';\n    };\n\n    _proto.del = function del(text) {\n      return '<del>' + text + '</del>';\n    };\n\n    _proto.link = function link(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n      if (href === null) {\n        return text;\n      }\n\n      var out = '<a href=\"' + escape$1(href) + '\"';\n\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n\n      out += '>' + text + '</a>';\n      return out;\n    };\n\n    _proto.image = function image(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n      if (href === null) {\n        return text;\n      }\n\n      var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n\n      out += this.options.xhtml ? '/>' : '>';\n      return out;\n    };\n\n    _proto.text = function text(_text) {\n      return _text;\n    };\n\n    return Renderer;\n  }();\n\n  /**\n   * TextRenderer\n   * returns only the textual part of the token\n   */\n\n  var TextRenderer_1 = /*#__PURE__*/function () {\n    function TextRenderer() {}\n\n    var _proto = TextRenderer.prototype;\n\n    // no need for block level renderers\n    _proto.strong = function strong(text) {\n      return text;\n    };\n\n    _proto.em = function em(text) {\n      return text;\n    };\n\n    _proto.codespan = function codespan(text) {\n      return text;\n    };\n\n    _proto.del = function del(text) {\n      return text;\n    };\n\n    _proto.html = function html(text) {\n      return text;\n    };\n\n    _proto.text = function text(_text) {\n      return _text;\n    };\n\n    _proto.link = function link(href, title, text) {\n      return '' + text;\n    };\n\n    _proto.image = function image(href, title, text) {\n      return '' + text;\n    };\n\n    _proto.br = function br() {\n      return '';\n    };\n\n    return TextRenderer;\n  }();\n\n  /**\n   * Slugger generates header id\n   */\n\n  var Slugger_1 = /*#__PURE__*/function () {\n    function Slugger() {\n      this.seen = {};\n    }\n\n    var _proto = Slugger.prototype;\n\n    _proto.serialize = function serialize(value) {\n      return value.toLowerCase().trim() // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n    }\n    /**\n     * Finds the next safe (unique) slug to use\n     */\n    ;\n\n    _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {\n      var slug = originalSlug;\n      var occurenceAccumulator = 0;\n\n      if (this.seen.hasOwnProperty(slug)) {\n        occurenceAccumulator = this.seen[originalSlug];\n\n        do {\n          occurenceAccumulator++;\n          slug = originalSlug + '-' + occurenceAccumulator;\n        } while (this.seen.hasOwnProperty(slug));\n      }\n\n      if (!isDryRun) {\n        this.seen[originalSlug] = occurenceAccumulator;\n        this.seen[slug] = 0;\n      }\n\n      return slug;\n    }\n    /**\n     * Convert string to unique id\n     * @param {object} options\n     * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n     */\n    ;\n\n    _proto.slug = function slug(value, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var slug = this.serialize(value);\n      return this.getNextSafeSlug(slug, options.dryrun);\n    };\n\n    return Slugger;\n  }();\n\n  var Renderer$1 = Renderer_1;\n  var TextRenderer$1 = TextRenderer_1;\n  var Slugger$1 = Slugger_1;\n  var defaults$1 = defaults$5.exports.defaults;\n  var unescape = helpers.unescape;\n  /**\n   * Parsing & Compiling\n   */\n\n  var Parser_1 = /*#__PURE__*/function () {\n    function Parser(options) {\n      this.options = options || defaults$1;\n      this.options.renderer = this.options.renderer || new Renderer$1();\n      this.renderer = this.options.renderer;\n      this.renderer.options = this.options;\n      this.textRenderer = new TextRenderer$1();\n      this.slugger = new Slugger$1();\n    }\n    /**\n     * Static Parse Method\n     */\n\n\n    Parser.parse = function parse(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    ;\n\n    Parser.parseInline = function parseInline(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    ;\n\n    var _proto = Parser.prototype;\n\n    _proto.parse = function parse(tokens, top) {\n      if (top === void 0) {\n        top = true;\n      }\n\n      var out = '',\n          i,\n          j,\n          k,\n          l2,\n          l3,\n          row,\n          cell,\n          header,\n          body,\n          token,\n          ordered,\n          start,\n          loose,\n          itemBody,\n          item,\n          checked,\n          task,\n          checkbox,\n          ret;\n      var l = tokens.length;\n\n      for (i = 0; i < l; i++) {\n        token = tokens[i]; // Run any renderer extensions\n\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n\n        switch (token.type) {\n          case 'space':\n            {\n              continue;\n            }\n\n          case 'hr':\n            {\n              out += this.renderer.hr();\n              continue;\n            }\n\n          case 'heading':\n            {\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n              continue;\n            }\n\n          case 'code':\n            {\n              out += this.renderer.code(token.text, token.lang, token.escaped);\n              continue;\n            }\n\n          case 'table':\n            {\n              header = ''; // header\n\n              cell = '';\n              l2 = token.header.length;\n\n              for (j = 0; j < l2; j++) {\n                cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                  header: true,\n                  align: token.align[j]\n                });\n              }\n\n              header += this.renderer.tablerow(cell);\n              body = '';\n              l2 = token.rows.length;\n\n              for (j = 0; j < l2; j++) {\n                row = token.rows[j];\n                cell = '';\n                l3 = row.length;\n\n                for (k = 0; k < l3; k++) {\n                  cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                    header: false,\n                    align: token.align[k]\n                  });\n                }\n\n                body += this.renderer.tablerow(cell);\n              }\n\n              out += this.renderer.table(header, body);\n              continue;\n            }\n\n          case 'blockquote':\n            {\n              body = this.parse(token.tokens);\n              out += this.renderer.blockquote(body);\n              continue;\n            }\n\n          case 'list':\n            {\n              ordered = token.ordered;\n              start = token.start;\n              loose = token.loose;\n              l2 = token.items.length;\n              body = '';\n\n              for (j = 0; j < l2; j++) {\n                item = token.items[j];\n                checked = item.checked;\n                task = item.task;\n                itemBody = '';\n\n                if (item.task) {\n                  checkbox = this.renderer.checkbox(checked);\n\n                  if (loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                      }\n                    } else {\n                      item.tokens.unshift({\n                        type: 'text',\n                        text: checkbox\n                      });\n                    }\n                  } else {\n                    itemBody += checkbox;\n                  }\n                }\n\n                itemBody += this.parse(item.tokens, loose);\n                body += this.renderer.listitem(itemBody, task, checked);\n              }\n\n              out += this.renderer.list(body, ordered, start);\n              continue;\n            }\n\n          case 'html':\n            {\n              // TODO parse inline content if parameter markdown=1\n              out += this.renderer.html(token.text);\n              continue;\n            }\n\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\n              continue;\n            }\n\n          case 'text':\n            {\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\n\n              while (i + 1 < l && tokens[i + 1].type === 'text') {\n                token = tokens[++i];\n                body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n              }\n\n              out += top ? this.renderer.paragraph(body) : body;\n              continue;\n            }\n\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    ;\n\n    _proto.parseInline = function parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      var out = '',\n          i,\n          token,\n          ret;\n      var l = tokens.length;\n\n      for (i = 0; i < l; i++) {\n        token = tokens[i]; // Run any renderer extensions\n\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n\n          case 'html':\n            {\n              out += renderer.html(token.text);\n              break;\n            }\n\n          case 'link':\n            {\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'image':\n            {\n              out += renderer.image(token.href, token.title, token.text);\n              break;\n            }\n\n          case 'strong':\n            {\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'em':\n            {\n              out += renderer.em(this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'codespan':\n            {\n              out += renderer.codespan(token.text);\n              break;\n            }\n\n          case 'br':\n            {\n              out += renderer.br();\n              break;\n            }\n\n          case 'del':\n            {\n              out += renderer.del(this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'text':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n\n      return out;\n    };\n\n    return Parser;\n  }();\n\n  var Lexer = Lexer_1;\n  var Parser = Parser_1;\n  var Tokenizer = Tokenizer_1;\n  var Renderer = Renderer_1;\n  var TextRenderer = TextRenderer_1;\n  var Slugger = Slugger_1;\n  var merge = helpers.merge,\n      checkSanitizeDeprecation = helpers.checkSanitizeDeprecation,\n      escape = helpers.escape;\n  var getDefaults = defaults$5.exports.getDefaults,\n      changeDefaults = defaults$5.exports.changeDefaults,\n      defaults = defaults$5.exports.defaults;\n  /**\n   * Marked\n   */\n\n  function marked(src, opt, callback) {\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      throw new Error('marked(): input parameter is undefined or null');\n    }\n\n    if (typeof src !== 'string') {\n      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n    }\n\n    if (typeof opt === 'function') {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n    checkSanitizeDeprecation(opt);\n\n    if (callback) {\n      var highlight = opt.highlight;\n      var tokens;\n\n      try {\n        tokens = Lexer.lex(src, opt);\n      } catch (e) {\n        return callback(e);\n      }\n\n      var done = function done(err) {\n        var out;\n\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              marked.walkTokens(tokens, opt.walkTokens);\n            }\n\n            out = Parser.parse(tokens, opt);\n          } catch (e) {\n            err = e;\n          }\n        }\n\n        opt.highlight = highlight;\n        return err ? callback(err) : callback(null, out);\n      };\n\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n\n      delete opt.highlight;\n      if (!tokens.length) return done();\n      var pending = 0;\n      marked.walkTokens(tokens, function (token) {\n        if (token.type === 'code') {\n          pending++;\n          setTimeout(function () {\n            highlight(token.text, token.lang, function (err, code) {\n              if (err) {\n                return done(err);\n              }\n\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n\n              pending--;\n\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n\n      if (pending === 0) {\n        done();\n      }\n\n      return;\n    }\n\n    try {\n      var _tokens = Lexer.lex(src, opt);\n\n      if (opt.walkTokens) {\n        marked.walkTokens(_tokens, opt.walkTokens);\n      }\n\n      return Parser.parse(_tokens, opt);\n    } catch (e) {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (opt.silent) {\n        return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n      }\n\n      throw e;\n    }\n  }\n  /**\n   * Options\n   */\n\n\n  marked.options = marked.setOptions = function (opt) {\n    merge(marked.defaults, opt);\n    changeDefaults(marked.defaults);\n    return marked;\n  };\n\n  marked.getDefaults = getDefaults;\n  marked.defaults = defaults;\n  /**\n   * Use Extension\n   */\n\n  marked.use = function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var opts = merge.apply(void 0, [{}].concat(args));\n    var extensions = marked.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n    var hasExtensions;\n    args.forEach(function (pack) {\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        hasExtensions = true;\n        pack.extensions.forEach(function (ext) {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n\n          if (ext.renderer) {\n            // Renderer extensions\n            var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function () {\n                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = arguments[_key2];\n                }\n\n                var ret = ext.renderer.apply(this, args);\n\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n\n          if (ext.tokenizer) {\n            // Tokenizer Extensions\n            if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n\n            if (ext.start) {\n              // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n\n          if (ext.childTokens) {\n            // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n      } // ==-- Parse \"overwrite\" extensions --== //\n\n\n      if (pack.renderer) {\n        (function () {\n          var renderer = marked.defaults.renderer || new Renderer();\n\n          var _loop = function _loop(prop) {\n            var prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false\n\n            renderer[prop] = function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n\n              var ret = pack.renderer[prop].apply(renderer, args);\n\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args);\n              }\n\n              return ret;\n            };\n          };\n\n          for (var prop in pack.renderer) {\n            _loop(prop);\n          }\n\n          opts.renderer = renderer;\n        })();\n      }\n\n      if (pack.tokenizer) {\n        (function () {\n          var tokenizer = marked.defaults.tokenizer || new Tokenizer();\n\n          var _loop2 = function _loop2(prop) {\n            var prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false\n\n            tokenizer[prop] = function () {\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args[_key4] = arguments[_key4];\n              }\n\n              var ret = pack.tokenizer[prop].apply(tokenizer, args);\n\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args);\n              }\n\n              return ret;\n            };\n          };\n\n          for (var prop in pack.tokenizer) {\n            _loop2(prop);\n          }\n\n          opts.tokenizer = tokenizer;\n        })();\n      } // ==-- Parse WalkTokens extensions --== //\n\n\n      if (pack.walkTokens) {\n        var walkTokens = marked.defaults.walkTokens;\n\n        opts.walkTokens = function (token) {\n          pack.walkTokens.call(_this, token);\n\n          if (walkTokens) {\n            walkTokens(token);\n          }\n        };\n      }\n\n      if (hasExtensions) {\n        opts.extensions = extensions;\n      }\n\n      marked.setOptions(opts);\n    });\n  };\n  /**\n   * Run callback for every token\n   */\n\n\n  marked.walkTokens = function (tokens, callback) {\n    var _loop3 = function _loop3() {\n      var token = _step.value;\n      callback(token);\n\n      switch (token.type) {\n        case 'table':\n          {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done;) {\n              var cell = _step2.value;\n              marked.walkTokens(cell.tokens, callback);\n            }\n\n            for (var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done;) {\n              var row = _step3.value;\n\n              for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {\n                var _cell = _step4.value;\n                marked.walkTokens(_cell.tokens, callback);\n              }\n            }\n\n            break;\n          }\n\n        case 'list':\n          {\n            marked.walkTokens(token.items, callback);\n            break;\n          }\n\n        default:\n          {\n            if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n              // Walk any extensions\n              marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n                marked.walkTokens(token[childTokens], callback);\n              });\n            } else if (token.tokens) {\n              marked.walkTokens(token.tokens, callback);\n            }\n          }\n      }\n    };\n\n    for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n      _loop3();\n    }\n  };\n  /**\n   * Parse Inline\n   */\n\n\n  marked.parseInline = function (src, opt) {\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      throw new Error('marked.parseInline(): input parameter is undefined or null');\n    }\n\n    if (typeof src !== 'string') {\n      throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n    checkSanitizeDeprecation(opt);\n\n    try {\n      var tokens = Lexer.lexInline(src, opt);\n\n      if (opt.walkTokens) {\n        marked.walkTokens(tokens, opt.walkTokens);\n      }\n\n      return Parser.parseInline(tokens, opt);\n    } catch (e) {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (opt.silent) {\n        return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n      }\n\n      throw e;\n    }\n  };\n  /**\n   * Expose\n   */\n\n\n  marked.Parser = Parser;\n  marked.parser = Parser.parse;\n  marked.Renderer = Renderer;\n  marked.TextRenderer = TextRenderer;\n  marked.Lexer = Lexer;\n  marked.lexer = Lexer.lex;\n  marked.Tokenizer = Tokenizer;\n  marked.Slugger = Slugger;\n  marked.parse = marked;\n  var marked_1 = marked;\n\n  return marked_1;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///84\n")},418:module=>{"use strict";eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixzQkFBc0I7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21kYy1yZWFjdC8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzPzMyMGMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///418\n")},779:(module,__unused_webpack_exports,__webpack_require__)=>{eval("var isarray = __webpack_require__(826)\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///779\n")},703:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = __webpack_require__(414);\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYiwyQkFBMkIsbUJBQU8sQ0FBQyxHQUE0Qjs7QUFFL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanM/ZDdhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///703\n")},697:(module,__unused_webpack_exports,__webpack_require__)=>{eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (false) { var throwOnDirectAccess, ReactIs; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = __webpack_require__(703)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk3LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLEtBQXFDLEVBQUUscUNBTzFDLENBQUM7QUFDRjtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsR0FBNEI7QUFDdkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz9kN2JjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///697\n")},414:module=>{"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL21kYy1yZWFjdC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz81OWIwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///414\n")},448:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\nvar aa=__webpack_require__(294),m=__webpack_require__(418),r=__webpack_require__(840);function y(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(y(227));var ba=new Set,ca={};function da(a,b){ea(a,b);ea(a+"Capture",b)}\nfunction ea(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba.add(b[a])}\nvar fa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ha=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,ia=Object.prototype.hasOwnProperty,\nja={},ka={};function la(a){if(ia.call(ka,a))return!0;if(ia.call(ja,a))return!1;if(ha.test(a))return ka[a]=!0;ja[a]=!0;return!1}function ma(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}\nfunction na(a,b,c,d){if(null===b||"undefined"===typeof b||ma(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function B(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var D={};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1,!1)});\n["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1)});\n["checked","multiple","muted","selected"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1,!1)});["capture","download"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1,!1)});["cols","rows","size","span"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1,!1)});["rowSpan","start"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1,!1)});var oa=/[\\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(oa,\npa);D[b]=new B(b,1,!1,a,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1,!1)});\nD.xlinkHref=new B("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction qa(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;\nif("function"===typeof Symbol&&Symbol.for){var E=Symbol.for;sa=E("react.element");ta=E("react.portal");ua=E("react.fragment");wa=E("react.strict_mode");xa=E("react.profiler");ya=E("react.provider");za=E("react.context");Aa=E("react.forward_ref");Ba=E("react.suspense");Ca=E("react.suspense_list");Da=E("react.memo");Ea=E("react.lazy");Fa=E("react.block");E("react.scope");Ga=E("react.opaque.id");Ha=E("react.debug_trace_mode");Ia=E("react.offscreen");Ja=E("react.legacy_hidden")}\nvar Ka="function"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||"object"!==typeof a)return null;a=Ka&&a[Ka]||a["@@iterator"];return"function"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);Ma=b&&b[1]||""}return"\\n"+Ma+a}var Oa=!1;\nfunction Pa(a,b){if(!a||Oa)return"";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(k){var d=k}Reflect.construct(a,[],b)}else{try{b.call()}catch(k){d=k}a.call(b.prototype)}else{try{throw Error();}catch(k){d=k}a()}}catch(k){if(k&&d&&"string"===typeof k.stack){for(var e=k.stack.split("\\n"),\nf=d.stack.split("\\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return"\\n"+e[g].replace(" at new "," at ");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:"")?Na(a):""}\nfunction Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na("Lazy");case 13:return Na("Suspense");case 19:return Na("SuspenseList");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return""}}\nfunction Ra(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ua:return"Fragment";case ta:return"Portal";case xa:return"Profiler";case wa:return"StrictMode";case Ba:return"Suspense";case Ca:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case za:return(a.displayName||"Context")+".Consumer";case ya:return(a._context.displayName||"Context")+".Provider";case Aa:var b=a.render;b=b.displayName||b.name||"";\nreturn a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function Ta(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}\nfunction Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return m({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function $a(a,b){b=b.checked;null!=b&&qa(a,"checked",b,!1)}\nfunction ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?bb(a,b.type,c):b.hasOwnProperty("defaultValue")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction cb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}\nfunction bb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function db(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function eb(a,b){a=m({children:void 0},b);if(b=db(b.children))a.children=b;return a}\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y(91));return m({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var kb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};\nfunction lb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function mb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?lb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}\nvar nb,ob=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==kb.svg||"innerHTML"in a)a.innerHTML=b;else{nb=nb||document.createElement("div");nb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=["Webkit","ms","Moz","O"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a]})});function sb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(""+b).trim():b+"px"}\nfunction tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=sb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var ub=m({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(y(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(y(62));}}\nfunction wb(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(y(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb()}\nfunction Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb()}}\nfunction Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==\ntypeof c)throw Error(y(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,"passive",{get:function(){Pb=!0}});window.addEventListener("test",Qb,Qb);window.removeEventListener("test",Qb,Qb)}catch(a){Pb=!1}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(n){this.onError(n)}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments)}\nfunction Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null}else throw Error(y(198));Ub||(Ub=!0,Vb=l)}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y(188));}\nfunction bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling}throw Error(y(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(y(189));}}if(c.alternate!==d)throw Error(y(190));}if(3!==c.tag)throw Error(y(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return!0;b=b.return}return!1}var ec,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\nfunction rc(a,b,c,d,e){return{blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case "focusin":case "focusout":kc=null;break;case "dragenter":case "dragleave":lc=null;break;case "mouseover":case "mouseout":mc=null;break;case "pointerover":case "pointerout":nc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":oc.delete(b.pointerId)}}\nfunction tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction uc(a,b,c,d,e){switch(b){case "focusin":return kc=tc(kc,a,b,c,d,e),!0;case "dragenter":return lc=tc(lc,a,b,c,d,e),!0;case "mouseover":return mc=tc(mc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r.unstable_runWithPriority(a.priority,function(){gc(c)})});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift()}return!0}function zc(a,b,c){xc(a)&&c.delete(b)}\nfunction Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift()}null===a.blockedOn&&jc.shift()}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc)}\nfunction Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ac)))}\nfunction Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift()}\nfunction Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec={animationend:Dc("Animation","AnimationEnd"),animationiteration:Dc("Animation","AnimationIteration"),animationstart:Dc("Animation","AnimationStart"),transitionend:Dc("Transition","TransitionEnd")},Fc={},Gc={};\nfa&&(Gc=document.createElement("div").style,"AnimationEvent"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),"TransitionEvent"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}\nvar Ic=Hc("animationend"),Jc=Hc("animationiteration"),Kc=Hc("animationstart"),Lc=Hc("transitionend"),Mc=new Map,Nc=new Map,Oc=["abort","abort",Ic,"animationEnd",Jc,"animationIteration",Kc,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",\n"lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc,"transitionEnd","waiting","waiting"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d])}}var Qc=r.unstable_now;Qc();var F=8;\nfunction Rc(a){if(0!==(1&a))return F=15,1;if(0!==(2&a))return F=14,2;if(0!==(4&a))return F=13,4;var b=24&a;if(0!==b)return F=12,b;if(0!==(a&32))return F=11,32;b=192&a;if(0!==b)return F=10,b;if(0!==(a&256))return F=9,256;b=3584&a;if(0!==b)return F=8,b;if(0!==(a&4096))return F=7,4096;b=4186112&a;if(0!==b)return F=6,b;b=62914560&a;if(0!==b)return F=5,b;if(a&67108864)return F=4,67108864;if(0!==(a&134217728))return F=3,134217728;b=805306368&a;if(0!==b)return F=2,b;if(0!==(1073741824&a))return F=1,1073741824;\nF=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y(358,a));}}\nfunction Uc(a,b){var c=a.pendingLanes;if(0===c)return F=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F):(h&=f,0!==h&&(d=Rc(h),e=F))}else f=c&~g,0!==f?(d=Rc(f),e=F):0!==h&&(d=Rc(h),e=F);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F)return b;F=e}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d)}finally{(Kb=f)||Mb()}}function id(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d))}\nfunction hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else{var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else{if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d)}jd(a,b,d,null,c)}}}}\nfunction yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else{var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null}else f!==e&&(e=null)}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;\nfunction nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in\na)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return"movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m({},sd,{clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",\nSpacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",\n119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=m({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return"keypress"===a.type?od(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===\na.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m({},Ad,{deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=fa&&"CompositionEvent"in window,be=null;fa&&"documentMode"in document&&(be=document.documentMode);var ce=fa&&"TextEvent"in window&&!be,de=fa&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case "keyup":return-1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return!0;default:return!1}}function he(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return"compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if("change"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null)}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));a=re;if(Kb)a(b);else{Kb=!0;try{Gb(a,b)}finally{Kb=!1,Mb()}}}}\nfunction Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae()}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;\nfunction Je(a,b){if(He(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return!1;return!0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Ke(c)}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}\nvar Pe=fa&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nPc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),\n0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc(Oc,2);for(var Ve="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea("onMouseEnter",["mouseout","mouseover"]);\nea("onMouseLeave",["mouseout","mouseover"]);ea("onPointerEnter",["pointerout","pointerover"]);ea("onPointerLeave",["pointerout","pointerover"]);da("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da("onBeforeInput",["compositionend","keypress","textInput","paste"]);da("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));\nfunction Ze(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}\nfunction G(a,b){var c=$e(b),d=a+"__bubble";c.has(d)||(af(b,a,2,!1),c.add(d))}var bf="_reactListening"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null)}))}\nfunction df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;"selectionchange"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if("scroll"!==a)return;e|=2;f=d}var g=$e(f),h=a+"__"+(b?"capture":"bubble");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h))}\nfunction af(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id;break;default:e=hd}c=e.bind(null,b,c,a);e=void 0;!Pb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Nb(function(){var d=f,e=xb(c),g=[];\na:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":x="focus";k=Fd;break;case "focusout":x="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=\nDd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td}var w=0!==(b&4),z=!w&&"scroll"===a,u=w?null!==h?h+"Capture":null:h;w=[];for(var t=d,q;null!==\nt;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}))}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==\nx&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null}else k=null,x=d;if(k!==x){w=Bd;v="onMouseLeave";u="onMouseEnter";t="mouse";if("pointerout"===a||"pointerover"===a)w=Td,v="onPointerLeave",u="onPointerEnter",t="pointer";z=null==k?h:ue(k);q=null==x?h:ue(x);h=new w(v,t+"leave",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+"enter",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=\ngf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u)}w=null}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var J=ve;else if(me(h))if(we)J=Fe;else{J=De;var K=Ce}else(k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne(g,J,c,e);break a}K&&K(a,h,d);"focusout"===a&&(K=h._wrapperState)&&\nK.controlled&&"number"===h.type&&bb(h,"number",h.value)}K=d?ue(d):window;switch(a){case "focusin":if(me(K)||"true"===K.contentEditable)Qe=K,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e)}var Q;if(ae)b:{switch(a){case "compositionstart":var L="onCompositionStart";break b;case "compositionend":L="onCompositionEnd";break b;\ncase "compositionupdate":L="onCompositionUpdate";break b}L=void 0}else ie?ge(a,c)&&(L="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(L="onCompositionStart");L&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==L?"onCompositionEnd"===L&&ie&&(Q=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),K=oe(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he(c),null!==Q&&(L.data=Q))));if(Q=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),0<d.length&&(e=new Ld("onBeforeInput",\n"beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=Q)}se(g,b)})}function ef(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}\nfunction nf(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of="function"===typeof setTimeout?setTimeout:void 0,pf="function"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent="":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=""))}\nfunction rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--}else"/$"===c&&b++}a=a.previousSibling}return null}var tf=0;function uf(a){return{$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,xf="__reactProps$"+vf,ff="__reactContainer$"+vf,yf="__reactEvents$"+vf;\nfunction wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[wf]||a[ff];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y(33));}function Db(a){return a[xf]||null}\nfunction $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return{current:a}}function H(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--)}function I(a,b){Af++;zf[Af]=a.current;a.current=b}var Cf={},M=Bf(Cf),N=Bf(!1),Df=Cf;\nfunction Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H(N);H(M)}function Hf(a,b,c){if(M.current!==Cf)throw Error(y(168));I(M,b);I(N,c)}\nfunction If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y(108,Ra(b)||"Unknown",e));return m({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M.current;I(M,a);I(N,N.current);return!0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H(N),H(M),I(M,a)):H(N);I(N,c)}\nvar Lf=null,Mf=null,Nf=r.unstable_runWithPriority,Of=r.unstable_scheduleCallback,Pf=r.unstable_cancelCallback,Qf=r.unstable_shouldYield,Rf=r.unstable_requestPaint,Sf=r.unstable_now,Tf=r.unstable_getCurrentPriorityLevel,Uf=r.unstable_ImmediatePriority,Vf=r.unstable_UserBlockingPriority,Wf=r.unstable_NormalPriority,Xf=r.unstable_LowPriority,Yf=r.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O=1E4>dg?Sf:function(){return Sf()-dg};\nfunction eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a)}jg()}\nfunction jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null}\nfunction rg(a){var b=mg.current;H(mg);a.type._context._currentValue=b}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null)}\nfunction vg(a,b){if(pg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null}}else og=og.next=b}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}\nfunction yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function zg(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k)}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,\nnext:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if("function"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h="function"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m({},A,h);break a;case 2:wg=!0}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f))}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===\nf)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(y(191,e));e.call(d)}}}var Fg=(new aa.Component).refs;\nfunction Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Kg={isMounted:function(a){return(a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=\nb);Ag(a,e);Jg(a,d,c)}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}\nfunction Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;"object"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Ng(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null)}\nfunction Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||\n(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4)}var Pg=Array.isArray;\nfunction Qg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y(309));var d=c.stateNode}if(!d)throw Error(y(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(y(284));if(!c._owner)throw Error(y(290,a));}return a}\nfunction Rg(a,b){if("textarea"!==a.type)throw Error(y(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b));}\nfunction Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,\nc):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=\nWg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Ug(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,\na.mode,c,null),b.return=a,b;Rg(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c)}return null}function C(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||\nnull,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d)}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===\nn.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if("function"!==typeof l)throw Error(y(150));h=l.call(h);if(null==\nh)throw Error(y(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&\nu.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);\nd=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h)}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=\nWg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y(152,Ra(a.type)||"Component"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);\nfunction dh(a){if(a===$g)throw Error(y(174));return a}function eh(a,b){I(ch,b);I(bh,a);I(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a)}H(ah);I(ah,b)}function fh(){H(ah);H(bh);H(ch)}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I(bh,a),I(ah,c))}function hh(a){bh.current===a&&(H(ah),H(bh))}var P=Bf(0);\nfunction ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var jh=null,kh=null,lh=!1;\nfunction mh(a,b){var c=nh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh(jh,c)}jh=a;kh=rf(b.firstChild)}else a.flags=a.flags&-1025|2,lh=!1,jh=a}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a}\nfunction rh(a){if(a!==jh)return!1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){kh=rf(a.nextSibling);break a}b--}else"$"!==c&&"$!"!==c&&"$?"!==c||b++}a=a.nextSibling}kh=null}}else kh=jh?rf(a.stateNode.nextSibling):null;return!0}\nfunction sh(){kh=jh=null;lh=!1}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R=null,S=null,T=null,yh=!1,zh=!1;function Ah(){throw Error(y(321));}function Bh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Ch(a,b,c,d,e,f){xh=f;R=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y(301));f+=1;T=S=null;b.updateQueue=null;vh.current=Fh;a=c(d,e)}while(zh)}vh.current=Gh;b=null!==S&&null!==S.next;xh=0;T=S=R=null;yh=!1;if(b)throw Error(y(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T?R.memoizedState=T=a:T=T.next=a;return T}\nfunction Ih(){if(null===S){var a=R.alternate;a=null!==a?a.memoizedState:null}else a=S.next;var b=null===T?R.memoizedState:T.next;if(null!==b)T=b,S=a;else{if(null===a)throw Error(y(310));S=a;a={memoizedState:S.memoizedState,baseState:S.baseState,baseQueue:S.baseQueue,queue:S.queue,next:null};null===T?R.memoizedState=T=a:T=T.next=a}return T}function Jh(a,b){return"function"===typeof b?b(a):b}\nfunction Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=S,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else{var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,\neagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R.lanes|=l;Dg|=l}k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y(350));}\nfunction Nh(a,b,c,d){var e=U;if(null===e)throw Error(y(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=\ne.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes}catch(q){c(function(){throw q;})}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}\nfunction Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R,a);return[b.memoizedState,a]}\nfunction Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R.updateQueue;null===b?(b={lastEffect:null},R.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d)}\nfunction Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S){var g=S.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R.flags|=a;e.memoizedState=Rh(1|b,c,f,d)}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}\nfunction $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}\nfunction di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0)});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b()}finally{wh.transition=c}})}\nfunction Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R||null!==g&&g===R)zh=yh=!0;else{if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d)}}\nvar Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,\nb,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R,a);return[d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;\nwh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return[a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c("r:"+(tf++).toString(36)));throw Error(y(355));}),c=Qh(b)[1];0===(R.mode&2)&&(R.flags|=516,Rh(5,function(){c("r:"+(tf++).toString(36))},\nvoid 0,null));return b}b="r:"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d)}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,d,e);return b.child}\nfunction ii(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode||"unstable-defer-without-hiding"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi(a,b,e,c);return b.child}\nfunction oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128}function li(a,b,c,d,e){var f=Ff(c)?Df:M.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,c,e);return b.child}\nfunction pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b)}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A="function"===typeof n||"function"===typeof g.getSnapshotBeforeUpdate;A||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&\n"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N.current||wg?("function"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===\ntypeof g.componentDidMount&&(b.flags|=4)):("function"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4),d=!1)}else{g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n="function"===typeof C||\n"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N.current||wg?("function"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||\nh===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1)}return qi(a,b,c,d,f,e)}\nfunction qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo)}\nvar si={dehydrated:null,retryLane:0};\nfunction ti(a,b,c){var d=b.pendingProps,e=P.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I(P,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if("number"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},\nb.memoizedState=si,b.lanes=33554432,a;c=vi({mode:"visible",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:\n{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:"hidden",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}\nfunction xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:"visible",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}\nfunction wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:"hidden",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b)}\nfunction zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f)}\nfunction Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi(a,b,d.children,c);d=P.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else{if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(P,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}zi(b,!0,c,null,f,b.lastEffect);break;case "together":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}return null}var Bi,Ci,Di,Ei;\nBi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Ci=function(){};\nDi=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "option":e=eb(a,e);d=eb(a,d);f=[];break;case "select":e=m({},e,{value:void 0});d=m({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=jf)}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===\nl){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]="")}else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||\n(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,c)),c=k;else"dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ca.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&G("scroll",a),f||h===k||(f=[])):"object"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k))}c&&(f=f||[]).push("style",\nc);var l=f;if(b.updateQueue=l)b.flags|=4}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4)};function Fi(a,b){if(!lh)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H(N);H(M);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else{if(!d){if(null===\nb.stateNode)throw Error(y(166));return null}a=dh(ah.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case "dialog":G("cancel",d);G("close",d);break;case "iframe":case "object":case "embed":G("load",d);break;case "video":case "audio":for(a=0;a<Xe.length;a++)G(Xe[a],d);break;case "source":G("error",d);break;case "img":case "image":case "link":G("error",d);G("load",d);break;case "details":G("toggle",d);break;case "input":Za(d,f);G("invalid",d);break;case "select":d._wrapperState=\n{wasMultiple:!!f.multiple};G("invalid",d);break;case "textarea":hb(d,f),G("invalid",d)}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],"children"===g?"string"===typeof e?d.textContent!==e&&(a=["children",e]):"number"===typeof e&&d.textContent!==""+e&&(a=["children",""+e]):ca.hasOwnProperty(g)&&null!=e&&"onScroll"===g&&G("scroll",d));switch(c){case "input":Va(d);cb(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=\njf)}d=a;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case "dialog":G("cancel",a);G("close",a);\ne=d;break;case "iframe":case "object":case "embed":G("load",a);e=d;break;case "video":case "audio":for(e=0;e<Xe.length;e++)G(Xe[e],a);e=d;break;case "source":G("error",a);e=d;break;case "img":case "image":case "link":G("error",a);G("load",a);e=d;break;case "details":G("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);G("invalid",a);break;case "option":e=eb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=m({},d,{value:void 0});G("invalid",a);break;case "textarea":hb(a,d);e=\ngb(a,d);G("invalid",a);break;default:e=d}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?tb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):"children"===f?"string"===typeof k?("textarea"!==c||""!==k)&&pb(a,k):"number"===typeof k&&pb(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ca.hasOwnProperty(f)?null!=k&&"onScroll"===f&&G("scroll",a):null!=k&&qa(a,f,k,g))}switch(c){case "input":Va(a);cb(a,d,!1);\nbreak;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof e.onClick&&(a.onclick=jf)}mf(c,d)&&(b.flags|=4)}null!==b.ref&&(b.flags|=128)}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(y(166));\nc=dh(ch.current);dh(ah.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d)}return null;case 13:H(P);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P.current&1))0===V&&(V=3);else{if(0===V||3===V)V=\n4;null===U||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U,W)}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H(P);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else{if(0!==V||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);\nnull===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,\nf.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I(P,P.current&1|2);return b.child}a=a.sibling}null!==d.tail&&O()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432)}else{if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&"hidden"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=\n64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g)}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O(),c.sibling=null,b=P.current,I(P,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&"unstable-defer-without-hiding"!==d.mode&&(b.flags|=4),null}throw Error(y(156,b.tag));}\nfunction Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H(N);H(M);uh();b=a.flags;if(0!==(b&64))throw Error(y(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H(P),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H(P),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}\nfunction Mi(a,b){try{var c="",d=b;do c+=Qa(d),d=d.return;while(d);var e=c}catch(f){e="\\nError generating stack: "+f.message+"\\n"+f.stack}return{value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Oi="function"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b)};return c}\nfunction Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}var Ui="function"===typeof WeakSet?WeakSet:Set;\nfunction Vi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Wi(a,c)}else b.current=null}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y(163));}\nfunction Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d()}a=a.next}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,\nb.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Eg(c,b,a)}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));\nreturn;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y(163));}\nfunction aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,"function"===typeof d.setProperty?d.setProperty("display","none","important"):d.display="none";else{d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null;d.style.display=sb("display",e)}}else if(6===c.tag)c.stateNode.nodeValue=b?"":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===\na)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return}c.sibling.return=c.return;c=c.sibling}}\nfunction bj(a,b){if(Mf&&"function"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b)}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else{d=b;try{e()}catch(f){Wi(d,f)}}c=c.next}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if("function"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount()}catch(f){Wi(b,\nf)}break;case 5:Vi(b);break;case 4:cj(a,b)}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return}throw Error(y(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y(161));}c.flags&16&&(pb(b,""),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===\nc.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b)}\nfunction gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling}\nfunction hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling}\nfunction cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return}d=!0}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else{if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return}k.sibling.return=k.return;k=k.sibling}f?(g=e,h=c.stateNode,\n8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode)}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1)}c.sibling.return=c.return;c=c.sibling}}\nfunction ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;"input"===a&&"radio"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=\n2){var g=f[e],h=f[e+1];"style"===g?tb(c,h):"dangerouslySetInnerHTML"===g?ob(c,h):"children"===g?pb(c,h):qa(c,g,h,b)}switch(a){case "input":ab(c,d);break;case "textarea":ib(c,d);break;case "select":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(y(162));b.stateNode.nodeValue=\nb.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X=0,U=null,Y=null,W=0,qj=0,rj=Bf(0),V=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O()+500}var Z=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X&48)?O():-1!==Fj?Fj:Fj=O()}\nfunction Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}\nfunction Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U&&(Hi|=b,4===V&&Ii(a,W));var d=eg();1===b?0!==(X&8)&&0===(X&48)?Lj(a):(Mj(a,c),0===X&&(wj(),ig())):(0===(X&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}\nfunction Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F;f[h]=10<=n?l+250:6<=n?l+5E3:-1}}else l<=b&&(a.expiredLanes|=k);g&=~k}d=Uc(a,a===U?W:0);b=F;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else{if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c)}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),\nc=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c}}\nfunction Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X&48))throw Error(y(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U?W:0);if(0===c)return null;var d=c;var e=X;X|=16;var f=Pj();if(U!==a||W!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h)}while(1);qg();oj.current=f;X=e;null!==Y?d=0:(U=null,W=0,d=V);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O()),b;a.finishedWork=\na.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f}c=e;c=O()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>\nc?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y(329));}}Mj(a,O());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d}}\nfunction Lj(a){if(0!==(X&48))throw Error(y(327));Oj();if(a===U&&0!==(a.expiredLanes&W)){var b=W;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b))}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O());return null}\nfunction Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O())})}ig()}function Wj(a,b){var c=X;X|=1;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function Xj(a,b){var c=X;X&=-2;X|=8;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function ni(a,b){I(rj,qj);qj|=b;tj|=b}function Ki(){qj=rj.current;H(rj)}\nfunction Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H(N);H(M);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H(P);break;case 19:H(P);break;case 10:rg(d);break;case 23:case 24:Ki()}c=c.return}U=a;Y=Tg(a.current,null);W=qj=tj=b;V=0;sj=null;uj=Hi=Dg=0}\nfunction Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}yh=!1}xh=0;T=S=R=null;zh=!1;pj.current=null;if(null===c||null===c.return){V=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):\n(h.updateQueue=null,h.memoizedState=null)}var A=0!==(P.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else{var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else{var t=zg(-1,1);t.tag=2;Ag(h,t)}h.lanes|=1;break a}k=\nvoid 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v)}p.flags|=4096;p.lanes=b;break a}p=p.return}while(null!==p);k=Error((Ra(h.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==V&&(V=2);k=Mi(k,h);p=\ng;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&("function"===typeof K.getDerivedStateFromError||null!==Q&&"function"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return}while(null!==p)}Zj(c)}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}\nfunction Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X;X|=16;var d=Pj();U===a&&W===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e)}while(1);qg();X=c;oj.current=d;if(null!==Y)throw Error(y(261));U=null;W=0;return V}function ak(){for(;null!==Y;)bk(Y)}function Rj(){for(;null!==Y&&!Qf();)bk(Y)}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null}\nfunction Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==\na.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b))}else{c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048)}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===V&&(V=5)}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}\nfunction dk(a,b){do Oj();while(null!==yj);if(0!==(X&48))throw Error(y(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l}null!==\nCj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X;X|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if("selectionStart"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType}catch(va){h=null;\nbreak a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode}w=u}h=-1===A||-1===p?null:{start:A,end:p}}else h=null;h=h||{start:0,end:0}}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z=d;do try{ek()}catch(va){if(null===\nZ)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Ij=null;Z=d;do try{for(g=a;null!==Z;){var t=Z.flags;t&16&&pb(Z.stateNode,"");if(t&128){var q=Z.alternate;if(null!==q){var v=q.ref;null!==v&&("function"===typeof v?v(null):v.current=null)}}switch(t&1038){case 2:fj(Z);Z.flags&=-3;break;case 6:fj(Z);Z.flags&=-3;ij(Z.alternate,Z);break;case 1024:Z.flags&=-1025;break;case 1028:Z.flags&=-1025;ij(Z.alternate,Z);break;case 4:ij(Z.alternate,Z);break;case 8:h=Z;cj(g,h);var J=h.alternate;dj(h);null!==\nJ&&dj(J)}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),"selectionStart"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===\ng.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});"function"===typeof t.focus&&t.focus();for(t=\n0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top}fd=!!kf;lf=kf=null;a.current=c;Z=d;do try{for(t=a;null!==Z;){var K=Z.flags;K&36&&Yi(t,Z.alternate,Z);if(K&128){q=void 0;var Q=Z.ref;if(null!==Q){var L=Z.stateNode;switch(Z.tag){case 5:q=L;break;default:q=L}"function"===typeof Q?Q(q):Q.current=q}}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Z=null;$f();X=e}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z=d;null!==Z;)b=\nZ.nextEffect,Z.nextEffect=null,Z.flags&8&&(K=Z,K.sibling=null,K.stateNode=null),Z=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&"function"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64))}catch(va){}Mj(a,O());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X&8))return null;ig();return null}\nfunction ek(){for(;null!==Z;){var a=Z.alternate;Jj||null===Ij||(0!==(Z.flags&8)?dc(Z,Ij)&&(Jj=!0):13===Z.tag&&mj(a,Z)&&dc(Z,Ij)&&(Jj=!0));var b=Z.flags;0!==(b&256)&&Xi(a,Z);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z=Z.nextEffect}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return!1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}\nfunction fk(){if(null===yj)return!1;var a=yj;yj=null;if(0!==(X&48))throw Error(y(331));var b=X;X|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if("function"===typeof g)try{g()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=\nnull,h.stateNode=null),h=a;X=b;ig();return!0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b))}\nfunction Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if("function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a)}catch(f){}break}}c=c.return}}\nfunction Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U===a&&(W&c)===c&&(4===V||3===V&&(W&62914560)===W&&500>O()-jj?Qj(a,0):uj|=c);Mj(a,b)}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c))}var ck;\nck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else{ug=!1;switch(b.tag){case 3:ri(b);sh();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I(P,P.current&1);b=hi(a,b,c);return null!==\nb?b.sibling:null}I(P,P.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I(P,P.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if("object"===\ntypeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c)}else b.tag=0,fi(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);\na=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y(282));\nd=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh(),b=hi(a,b,c);else{e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling}else fi(a,b,d,c),sh();b=b.child}return b;case 5:return gh(b),null===a&&\nph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi(a,b,b.pendingProps,c),b.child;case 8:return fi(a,b,b.pendingProps.children,\nc),b.child;case 12:return fi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=\nk.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}fi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,\nf.unstable_observedBits),d=d(e),b.flags|=1,fi(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y(156,b.tag));\n};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction hk(a){if("function"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}\nfunction Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Vg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)ji(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if("object"===\ntypeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y(130,null==a?a:typeof a,""));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}\nfunction Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null}\nfunction kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ta,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}\nfunction lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(y(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==\nd&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b)}function pk(){return null}\nfunction qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e)}this._internalRoot=c}\nqk.prototype.render=function(a){lk(a,this._internalRoot,null,null)};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null})};function rk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}\nfunction sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}\nfunction tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a)}}lk(b,g,a,e)}else{f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a)}}Xj(function(){lk(b,g,a,e)})}return mk(g)}ec=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4)}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864)}};\ngc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c)}};hc=function(a,b){return b()};\nyb=function(a,b,c){switch(b){case "input":ab(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+\'][type="radio"]\');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y(90));Wa(d);ab(d,e)}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Wj;\nHb=function(a,b,c,d,e){var f=X;X|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X=f,0===X&&(wj(),ig())}};Ib=function(){0===(X&49)&&(Vj(),Oj())};Jb=function(a,b){var c=X;X|=2;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};\nvar xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||\npk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vk;exports.createPortal=uk;\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(y(188));throw Error(y(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a,b){var c=X;if(0!==(c&48))return a(b);X|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X=c,ig()}};exports.hydrate=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!0,c)};\nexports.render=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!rk(a))throw Error(y(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null})}),!0):!1};exports.unstable_batchedUpdates=Wj;exports.unstable_createPortal=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!rk(c))throw Error(y(200));if(null==a||void 0===a._reactInternals)throw Error(y(38));return tk(a,b,c,!1,d)};exports.version="17.0.2";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///448\n')},935:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(448);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQXFDLEVBQUUsRUFTMUM7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLElBQXFDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLEVBQUUseUNBQTZEO0FBQy9ELEVBQUUsS0FBSyxFQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWRjLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcz84YmM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///935\n")},921:(__unused_webpack_module,exports)=>{"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?\nSymbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;\nfunction z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYjtBQUNBLGNBQWMsa0NBQWtDLGlCQUFpQixVQUFVLDBCQUEwQixtREFBbUQsa0NBQWtDLDRDQUE0QyxrQkFBa0Isa0JBQWtCLGNBQWMsZ0JBQWdCLGlCQUFpQixHQUFHLHNCQUFzQixHQUFHLHVCQUF1QixHQUFHLHVCQUF1QixHQUFHLGVBQWUsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsR0FBRyxZQUFZLEdBQUcsWUFBWSxHQUFHLGNBQWM7QUFDL2UsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsZ0JBQWdCLEdBQUcsbUJBQW1CLGFBQWEsdUJBQXVCLHdCQUF3QixHQUFHLHlCQUF5QixhQUFhLGlCQUFpQix5QkFBeUIsYUFBYSxpQkFBaUIsaUJBQWlCLGFBQWEscURBQXFELG9CQUFvQixhQUFhLGlCQUFpQixrQkFBa0IsYUFBYSxpQkFBaUIsY0FBYyxhQUFhO0FBQzNjLGNBQWMsYUFBYSxpQkFBaUIsZ0JBQWdCLGFBQWEsaUJBQWlCLGtCQUFrQixhQUFhLGlCQUFpQixvQkFBb0IsYUFBYSxpQkFBaUIsa0JBQWtCLGFBQWE7QUFDM04sMEJBQTBCLGFBQWEsNlFBQTZRLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzP2E5M2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///921\n')},864:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(921);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBNEQ7QUFDOUQsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NGNlYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///864\n")},251:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n__webpack_require__(418);var f=__webpack_require__(294),g=60103;exports.Fragment=60107;if("function"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element");exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=""+k);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYSxtQkFBTyxDQUFDLEdBQWUsRUFBRSxNQUFNLG1CQUFPLENBQUMsR0FBTyxVQUFVLGdCQUFnQixPQUFPLDJDQUEyQyxpQkFBaUIscUJBQXFCLGdCQUFnQixxQkFBcUIsa0hBQWtIO0FBQ3BVLGtCQUFrQixVQUFVLGVBQWUscUJBQXFCLDZCQUE2QiwwQkFBMEIsMERBQTBELDRFQUE0RSxPQUFPLHdEQUF3RCxXQUFXLEdBQUcsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL21kYy1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanM/ZDMxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3JlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxnPTYwMTAzO2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIGg9U3ltYm9sLmZvcjtnPWgoXCJyZWFjdC5lbGVtZW50XCIpO2V4cG9ydHMuRnJhZ21lbnQ9aChcInJlYWN0LmZyYWdtZW50XCIpfXZhciBtPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGspe3ZhciBiLGQ9e30sZT1udWxsLGw9bnVsbDt2b2lkIDAhPT1rJiYoZT1cIlwiK2spO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGw9YS5yZWYpO2ZvcihiIGluIGEpbi5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmcsdHlwZTpjLGtleTplLHJlZjpsLHByb3BzOmQsX293bmVyOm0uY3VycmVudH19ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///251\n')},408:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar l=__webpack_require__(418),n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;\nif("function"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w("react.element");p=w("react.portal");exports.Fragment=w("react.fragment");exports.StrictMode=w("react.strict_mode");exports.Profiler=w("react.profiler");q=w("react.provider");r=w("react.context");t=w("react.forward_ref");exports.Suspense=w("react.suspense");u=w("react.memo");v=w("react.lazy")}var x="function"===typeof Symbol&&Symbol.iterator;\nfunction y(a){if(null===a||"object"!==typeof a)return null;a=x&&a[x]||a["@@iterator"];return"function"===typeof a?a:null}function z(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}\nvar A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,"setState")};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};\nfunction D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return{$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}\nfunction K(a,b){return{$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return"object"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={"=":"=0",":":"=2"};return"$"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\\/+/g;function N(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}\nfunction O(a,b,c,e,d){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case n:case p:h=!0}}if(h)return h=a,d=d(h),a=""===e?"."+N(h,0):e,Array.isArray(d)?(c="",null!=a&&(c=a.replace(M,"$&/")+"/"),O(d,b,c,"",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?"":(""+d.key).replace(M,"$&/")+"/")+a)),b.push(d)),1;h=0;e=""===e?".":e+":";if(Array.isArray(a))for(var g=\n0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d)}else if(f=y(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if("object"===k)throw b=""+a,Error(z(31,"[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,"","",function(a){return b.call(c,a,d++)});return e}\nfunction Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};\nexports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments)},c)},count:function(a){var b=0;P(a,function(){b++});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g}return{$$typeof:n,type:a.type,\nkey:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:t,render:a}};exports.isValidElement=L;\nexports.lazy=function(a){return{$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return{$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version="17.0.2";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///408\n')},294:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(408);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBeUQ7QUFDM0QsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanM/YWI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///294\n")},893:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(251);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBcUU7QUFDdkUsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanM/OWNhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///893\n")},53:(__unused_webpack_module,exports)=>{"use strict";eval('/** @license React v0.20.2\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}\nif("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0))};g=function(a,b){u=setTimeout(a,b)};h=function(){clearTimeout(u)};exports.unstable_shouldYield=function(){return!1};k=exports.unstable_forceFrameRate=function(){}}else{var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=\nwindow.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=\nE};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null)}catch(b){throw G.postMessage(null),b;}}else A=!1};f=function(a){B=a;A||(A=!0,G.postMessage(null))};g=function(a,b){C=\nx(function(){a(exports.unstable_now())},b)};h=function(){y(C);C=-1}}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}\nfunction K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;\nfunction T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M)}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else{var b=J(M);null!==b&&g(U,b.startTime-a)}}\nfunction V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b)}else K(L);O=J(L)}if(null!==O)var m=!0;else{var n=J(M);null!==n&&g(U,n.startTime-b);m=!1}return m}finally{O=null,P=c,Q=!1}}var W=k;exports.unstable_IdlePriority=5;\nexports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V))};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};\nexports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P}var c=P;P=b;try{return a()}finally{P=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=P;P=a;try{return b()}finally{P=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};\nexports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c}}};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhLFlBQVksdUVBQXVFLGtCQUFrQixvQkFBb0IsWUFBWSxnQkFBZ0IsS0FBSyxxQkFBcUIsb0JBQW9CLFlBQVk7QUFDNU4sb0VBQW9FLCtCQUErQixnQkFBZ0IsNkJBQTZCLFFBQVEsT0FBTyxTQUFTLDJCQUEyQixjQUFjLGtEQUFrRCxnQkFBZ0IsbUJBQW1CLGFBQWEsaUJBQWlCLDRCQUE0QixZQUFZLFVBQVUsRUFBRSwrQkFBK0IsY0FBYyxLQUFLLDhDQUE4QyxpQ0FBaUM7QUFDemYsNEJBQTRCLHNOQUFzTiwwTEFBMEwsNkJBQTZCLDRCQUE0QixZQUFZO0FBQ2pmLEdBQUcsZUFBZSwrQkFBK0IsYUFBYSx1S0FBdUssbUNBQW1DLDZCQUE2QixhQUFhLDZCQUE2QixNQUFNLElBQUksMENBQTBDLFNBQVMsOEJBQThCLFdBQVcsY0FBYyxJQUFJLCtCQUErQixnQkFBZ0I7QUFDdGYsYUFBYSwwQkFBMEIsS0FBSyxhQUFhLEtBQUssTUFBTSxnQkFBZ0IsZUFBZSxVQUFVLFFBQVEsRUFBRSxxQkFBcUIsMENBQTBDLGNBQWMsY0FBYyxPQUFPO0FBQ3pOLGNBQWMsV0FBVyxlQUFlLGNBQWMsVUFBVSxPQUFPLHlCQUF5QixJQUFJLEVBQUUsb0NBQW9DLHFGQUFxRiwrQ0FBK0MsY0FBYyxTQUFTLFlBQVksZ0JBQWdCLDhCQUE4Qix5QkFBeUI7QUFDeFgsY0FBYyxlQUFlLFNBQVMsRUFBRSwwQkFBMEIsZ0VBQWdFLFdBQVcsUUFBUSxjQUFjLEtBQUssS0FBSywrQkFBK0IsS0FBSyxXQUFXO0FBQzVOLGdCQUFnQixLQUFLLGNBQWMsS0FBSyxRQUFRLElBQUksS0FBSyxXQUFXLHNFQUFzRSxFQUFFLGlCQUFpQiwwQkFBMEIsZ0JBQWdCLGtCQUFrQiw2QkFBNkIseUJBQXlCLGtEQUFrRCxLQUFLLFVBQVUsT0FBTyxxQkFBcUIsS0FBSyxXQUFXLDZCQUE2QixLQUFLLFNBQVMsUUFBUSxpQkFBaUIsUUFBUSw2QkFBNkI7QUFDcmUsa0NBQWtDLEdBQUcsNEJBQTRCLEdBQUcsK0JBQStCLEdBQUcsMEJBQTBCLE1BQU0scUNBQXFDLEdBQUcsK0JBQStCLGFBQWEsaUJBQWlCLGtDQUFrQyxZQUFZLG1CQUFtQix3Q0FBd0MsWUFBWSxVQUFVLHFDQUFxQyxZQUFZO0FBQzNaLHFCQUFxQixhQUFhLFVBQVUsNkJBQTZCLE1BQU0sWUFBWSxRQUFRLElBQUksSUFBSSxXQUFXLFFBQVEsTUFBTSwrQkFBK0IsY0FBYyw2QkFBNkIsR0FBRyxnQ0FBZ0MsZUFBZSxVQUFVLHlDQUF5QyxZQUFZLFFBQVEsSUFBSSxJQUFJLFdBQVcsUUFBUTtBQUNsVyxpQ0FBaUMsaUJBQWlCLDZCQUE2QiwrRUFBK0UsVUFBVSxnQkFBZ0IsTUFBTSxhQUFhLE1BQU0sb0JBQW9CLE1BQU0sYUFBYSxNQUFNLGNBQWMsTUFBTSxHQUFHLDZFQUE2RSxpSEFBaUg7QUFDbmQsNkJBQTZCLGFBQWEsUUFBUSxrQkFBa0IsUUFBUSxJQUFJLElBQUksK0JBQStCLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanM/ZmIwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53\n')},840:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(53);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx3Q0FBNkQ7QUFDL0QsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZGMtcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzPzQwMjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///840\n")},390:module=>{eval("var deepFreezeEs6 = {exports: {}};\n\nfunction deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function () {\n            throw new Error('map is read-only');\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function () {\n            throw new Error('set is read-only');\n        };\n    }\n\n    // Freeze self\n    Object.freeze(obj);\n\n    Object.getOwnPropertyNames(obj).forEach(function (name) {\n        var prop = obj[name];\n\n        // Freeze prop if it is an object\n        if (typeof prop == 'object' && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n\n    return obj;\n}\n\ndeepFreezeEs6.exports = deepFreeze;\ndeepFreezeEs6.exports.default = deepFreeze;\n\nvar deepFreeze$1 = deepFreezeEs6.exports;\n\n/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */\n/** @typedef {import('highlight.js').CompiledMode} CompiledMode */\n/** @implements CallbackResponse */\n\nclass Response {\n  /**\n   * @param {CompiledMode} mode\n   */\n  constructor(mode) {\n    // eslint-disable-next-line no-undefined\n    if (mode.data === undefined) mode.data = {};\n\n    this.data = mode.data;\n    this.isMatchIgnored = false;\n  }\n\n  ignoreMatch() {\n    this.isMatchIgnored = true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction escapeHTML(value) {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n}\n\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */\nfunction inherit$1(original, ...objects) {\n  /** @type Record<string,any> */\n  const result = Object.create(null);\n\n  for (const key in original) {\n    result[key] = original[key];\n  }\n  objects.forEach(function(obj) {\n    for (const key in obj) {\n      result[key] = obj[key];\n    }\n  });\n  return /** @type {T} */ (result);\n}\n\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */\n\n/** @typedef {{kind?: string, sublanguage?: boolean}} Node */\n/** @typedef {{walk: (r: Renderer) => void}} Tree */\n/** */\n\nconst SPAN_CLOSE = '</span>';\n\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */\nconst emitsWrappingTags = (node) => {\n  return !!node.kind;\n};\n\n/**\n *\n * @param {string} name\n * @param {{prefix:string}} options\n */\nconst expandScopeName = (name, { prefix }) => {\n  if (name.includes(\".\")) {\n    const pieces = name.split(\".\");\n    return [\n      `${prefix}${pieces.shift()}`,\n      ...(pieces.map((x, i) => `${x}${\"_\".repeat(i + 1)}`))\n    ].join(\" \");\n  }\n  return `${prefix}${name}`;\n};\n\n/** @type {Renderer} */\nclass HTMLRenderer {\n  /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */\n  constructor(parseTree, options) {\n    this.buffer = \"\";\n    this.classPrefix = options.classPrefix;\n    parseTree.walk(this);\n  }\n\n  /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */\n  addText(text) {\n    this.buffer += escapeHTML(text);\n  }\n\n  /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */\n  openNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    let scope = node.kind;\n    if (node.sublanguage) {\n      scope = `language-${scope}`;\n    } else {\n      scope = expandScopeName(scope, { prefix: this.classPrefix });\n    }\n    this.span(scope);\n  }\n\n  /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */\n  closeNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    this.buffer += SPAN_CLOSE;\n  }\n\n  /**\n   * returns the accumulated buffer\n  */\n  value() {\n    return this.buffer;\n  }\n\n  // helpers\n\n  /**\n   * Builds a span element\n   *\n   * @param {string} className */\n  span(className) {\n    this.buffer += `<span class=\"${className}\">`;\n  }\n}\n\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */\n/** @typedef {import('highlight.js').Emitter} Emitter */\n/**  */\n\nclass TokenTree {\n  constructor() {\n    /** @type DataNode */\n    this.rootNode = { children: [] };\n    this.stack = [this.rootNode];\n  }\n\n  get top() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  get root() { return this.rootNode; }\n\n  /** @param {Node} node */\n  add(node) {\n    this.top.children.push(node);\n  }\n\n  /** @param {string} kind */\n  openNode(kind) {\n    /** @type Node */\n    const node = { kind, children: [] };\n    this.add(node);\n    this.stack.push(node);\n  }\n\n  closeNode() {\n    if (this.stack.length > 1) {\n      return this.stack.pop();\n    }\n    // eslint-disable-next-line no-undefined\n    return undefined;\n  }\n\n  closeAllNodes() {\n    while (this.closeNode());\n  }\n\n  toJSON() {\n    return JSON.stringify(this.rootNode, null, 4);\n  }\n\n  /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */\n  walk(builder) {\n    // this does not\n    return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n  }\n\n  /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */\n  static _walk(builder, node) {\n    if (typeof node === \"string\") {\n      builder.addText(node);\n    } else if (node.children) {\n      builder.openNode(node);\n      node.children.forEach((child) => this._walk(builder, child));\n      builder.closeNode(node);\n    }\n    return builder;\n  }\n\n  /**\n   * @param {Node} node\n   */\n  static _collapse(node) {\n    if (typeof node === \"string\") return;\n    if (!node.children) return;\n\n    if (node.children.every(el => typeof el === \"string\")) {\n      // node.text = node.children.join(\"\");\n      // delete node.children;\n      node.children = [node.children.join(\"\")];\n    } else {\n      node.children.forEach((child) => {\n        TokenTree._collapse(child);\n      });\n    }\n  }\n}\n\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addKeyword(text, kind)\n  - addText(text)\n  - addSublanguage(emitter, subLanguageName)\n  - finalize()\n  - openNode(kind)\n  - closeNode()\n  - closeAllNodes()\n  - toHTML()\n\n*/\n\n/**\n * @implements {Emitter}\n */\nclass TokenTreeEmitter extends TokenTree {\n  /**\n   * @param {*} options\n   */\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} kind\n   */\n  addKeyword(text, kind) {\n    if (text === \"\") { return; }\n\n    this.openNode(kind);\n    this.addText(text);\n    this.closeNode();\n  }\n\n  /**\n   * @param {string} text\n   */\n  addText(text) {\n    if (text === \"\") { return; }\n\n    this.add(text);\n  }\n\n  /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */\n  addSublanguage(emitter, name) {\n    /** @type DataNode */\n    const node = emitter.root;\n    node.kind = name;\n    node.sublanguage = true;\n    this.add(node);\n  }\n\n  toHTML() {\n    const renderer = new HTMLRenderer(this, this.options);\n    return renderer.value();\n  }\n\n  finalize() {\n    return true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/**\n * @param {RegExp} re\n * @returns {number}\n */\nfunction countMatchGroups(re) {\n  return (new RegExp(re.toString() + '|')).exec('').length - 1;\n}\n\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */\nfunction startsWith(re, lexeme) {\n  const match = re && re.exec(lexeme);\n  return match && match.index === 0;\n}\n\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\n// an incorrect parse, it additionally matches the following:\n// - [...] elements, where the meaning of parentheses and escapes change\n// - other escape sequences, so we do not misparse escape sequences as\n//   interesting elements\n// - non-matching or lookahead parentheses, which do not capture. These\n//   follow the '(' with a '?'.\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n\n// **INTERNAL** Not intended for outside usage\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {{joinWith: string}} opts\n * @returns {string}\n */\nfunction _rewriteBackreferences(regexps, { joinWith }) {\n  let numCaptures = 0;\n\n  return regexps.map((regex) => {\n    numCaptures += 1;\n    const offset = numCaptures;\n    let re = source(regex);\n    let out = '';\n\n    while (re.length > 0) {\n      const match = BACKREF_RE.exec(re);\n      if (!match) {\n        out += re;\n        break;\n      }\n      out += re.substring(0, match.index);\n      re = re.substring(match.index + match[0].length);\n      if (match[0][0] === '\\\\' && match[1]) {\n        // Adjust the backreference.\n        out += '\\\\' + String(Number(match[1]) + offset);\n      } else {\n        out += match[0];\n        if (match[0] === '(') {\n          numCaptures++;\n        }\n      }\n    }\n    return out;\n  }).map(re => `(${re})`).join(joinWith);\n}\n\n/** @typedef {import('highlight.js').Mode} Mode */\n/** @typedef {import('highlight.js').ModeCallback} ModeCallback */\n\n// Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = '[a-zA-Z]\\\\w*';\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\nconst NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\nconst C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\nconst RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/\nconst SHEBANG = (opts = {}) => {\n  const beginShebang = /^#![ ]*\\//;\n  if (opts.binary) {\n    opts.begin = concat(\n      beginShebang,\n      /.*\\b/,\n      opts.binary,\n      /\\b.*/);\n  }\n  return inherit$1({\n    scope: 'meta',\n    begin: beginShebang,\n    end: /$/,\n    relevance: 0,\n    /** @type {ModeCallback} */\n    \"on:begin\": (m, resp) => {\n      if (m.index !== 0) resp.ignoreMatch();\n    }\n  }, opts);\n};\n\n// Common modes\nconst BACKSLASH_ESCAPE = {\n  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n};\nconst APOS_STRING_MODE = {\n  scope: 'string',\n  begin: '\\'',\n  end: '\\'',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst QUOTE_STRING_MODE = {\n  scope: 'string',\n  begin: '\"',\n  end: '\"',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst PHRASAL_WORDS_MODE = {\n  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */\nconst COMMENT = function(begin, end, modeOptions = {}) {\n  const mode = inherit$1(\n    {\n      scope: 'comment',\n      begin,\n      end,\n      contains: []\n    },\n    modeOptions\n  );\n  mode.contains.push({\n    scope: 'doctag',\n    // hack to avoid the space from being included. the space is necessary to\n    // match here to prevent the plain text rule below from gobbling up doctags\n    begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',\n    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\n    excludeBegin: true,\n    relevance: 0\n  });\n  const ENGLISH_WORD = either(\n    // list of common 1 and 2 letter words in English\n    \"I\",\n    \"a\",\n    \"is\",\n    \"so\",\n    \"us\",\n    \"to\",\n    \"at\",\n    \"if\",\n    \"in\",\n    \"it\",\n    \"on\",\n    // note: this is not an exhaustive list of contractions, just popular ones\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc\n    /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.\n    /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\n  );\n  // looking like plain text, more likely to be a comment\n  mode.contains.push(\n    {\n      // TODO: how to include \", (, ) without breaking grammars that use these for\n      // comment delimiters?\n      // begin: /[ ]+([()\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\":]?([.][ ]|[ ]|\\))){3}/\n      // ---\n\n      // this tries to find sequences of 3 english words in a row (without any\n      // \"programming\" type syntax) this gives us a strong signal that we've\n      // TRULY found a comment - vs perhaps scanning with the wrong language.\n      // It's possible to find something that LOOKS like the start of the\n      // comment - but then if there is no readable text - good chance it is a\n      // false match and not a comment.\n      //\n      // for a visual example please see:\n      // https://github.com/highlightjs/highlight.js/issues/2827\n\n      begin: concat(\n        /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */\n        '(',\n        ENGLISH_WORD,\n        /[.]?[:]?([.][ ]|[ ])/,\n        '){3}') // look for 3 words in a row\n    }\n  );\n  return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT('//', '$');\nconst C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');\nconst HASH_COMMENT_MODE = COMMENT('#', '$');\nconst NUMBER_MODE = {\n  scope: 'number',\n  begin: NUMBER_RE,\n  relevance: 0\n};\nconst C_NUMBER_MODE = {\n  scope: 'number',\n  begin: C_NUMBER_RE,\n  relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n  scope: 'number',\n  begin: BINARY_NUMBER_RE,\n  relevance: 0\n};\nconst REGEXP_MODE = {\n  // this outer rule makes sure we actually have a WHOLE regex and not simply\n  // an expression such as:\n  //\n  //     3 / something\n  //\n  // (which will then blow up when regex's `illegal` sees the newline)\n  begin: /(?=\\/[^/\\n]*\\/)/,\n  contains: [{\n    scope: 'regexp',\n    begin: /\\//,\n    end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [\n      BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/,\n        end: /\\]/,\n        relevance: 0,\n        contains: [BACKSLASH_ESCAPE]\n      }\n    ]\n  }]\n};\nconst TITLE_MODE = {\n  scope: 'title',\n  begin: IDENT_RE,\n  relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n  scope: 'title',\n  begin: UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\nconst METHOD_GUARD = {\n  // excludes method names from keyword processing\n  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\n\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */\nconst END_SAME_AS_BEGIN = function(mode) {\n  return Object.assign(mode,\n    {\n      /** @type {ModeCallback} */\n      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },\n      /** @type {ModeCallback} */\n      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }\n    });\n};\n\nvar MODES = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n    IDENT_RE: IDENT_RE,\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n    NUMBER_RE: NUMBER_RE,\n    C_NUMBER_RE: C_NUMBER_RE,\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n    RE_STARTERS_RE: RE_STARTERS_RE,\n    SHEBANG: SHEBANG,\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n    APOS_STRING_MODE: APOS_STRING_MODE,\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n    COMMENT: COMMENT,\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n    NUMBER_MODE: NUMBER_MODE,\n    C_NUMBER_MODE: C_NUMBER_MODE,\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n    REGEXP_MODE: REGEXP_MODE,\n    TITLE_MODE: TITLE_MODE,\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,\n    METHOD_GUARD: METHOD_GUARD,\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN\n});\n\n/**\n@typedef {import('highlight.js').CallbackResponse} CallbackResponse\n@typedef {import('highlight.js').CompilerExt} CompilerExt\n*/\n\n// Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n\n// ------\n\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */\nfunction skipIfHasPrecedingDot(match, response) {\n  const before = match.input[match.index - 1];\n  if (before === \".\") {\n    response.ignoreMatch();\n  }\n}\n\n/**\n *\n * @type {CompilerExt}\n */\nfunction scopeClassName(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.className !== undefined) {\n    mode.scope = mode.className;\n    delete mode.className;\n  }\n}\n\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */\nfunction beginKeywords(mode, parent) {\n  if (!parent) return;\n  if (!mode.beginKeywords) return;\n\n  // for languages with keywords that include non-word characters checking for\n  // a word boundary is not sufficient, so instead we check for a word boundary\n  // or whitespace - this does no harm in any case since our keyword engine\n  // doesn't allow spaces in keywords anyways and we still check for the boundary\n  // first\n  mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\\\.)(?=\\\\b|\\\\s)';\n  mode.__beforeBegin = skipIfHasPrecedingDot;\n  mode.keywords = mode.keywords || mode.beginKeywords;\n  delete mode.beginKeywords;\n\n  // prevents double relevance, the keywords themselves provide\n  // relevance, the mode doesn't need to double it\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 0;\n}\n\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */\nfunction compileIllegal(mode, _parent) {\n  if (!Array.isArray(mode.illegal)) return;\n\n  mode.illegal = either(...mode.illegal);\n}\n\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */\nfunction compileMatch(mode, _parent) {\n  if (!mode.match) return;\n  if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n\n  mode.begin = mode.match;\n  delete mode.match;\n}\n\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */\nfunction compileRelevance(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 1;\n}\n\n// allow beforeMatch to act as a \"qualifier\" for the match\n// the full match begin must be [beforeMatch][begin]\nconst beforeMatchExt = (mode, parent) => {\n  if (!mode.beforeMatch) return;\n  // starts conflicts with endsParent which we need to make sure the child\n  // rule is not matched multiple times\n  if (mode.starts) throw new Error(\"beforeMatch cannot be used with starts\");\n\n  const originalMode = Object.assign({}, mode);\n  Object.keys(mode).forEach((key) => { delete mode[key]; });\n\n  mode.keywords = originalMode.keywords;\n  mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\n  mode.starts = {\n    relevance: 0,\n    contains: [\n      Object.assign(originalMode, { endsParent: true })\n    ]\n  };\n  mode.relevance = 0;\n\n  delete originalMode.beforeMatch;\n};\n\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n  'of',\n  'and',\n  'for',\n  'in',\n  'not',\n  'or',\n  'if',\n  'then',\n  'parent', // common variable name\n  'list', // common variable name\n  'value' // common variable name\n];\n\nconst DEFAULT_KEYWORD_SCOPE = \"keyword\";\n\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */\nfunction compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {\n  /** @type KeywordDict */\n  const compiledKeywords = Object.create(null);\n\n  // input can be a string of keywords, an array of keywords, or a object with\n  // named keys representing scopeName (which can then point to a string or array)\n  if (typeof rawKeywords === 'string') {\n    compileList(scopeName, rawKeywords.split(\" \"));\n  } else if (Array.isArray(rawKeywords)) {\n    compileList(scopeName, rawKeywords);\n  } else {\n    Object.keys(rawKeywords).forEach(function(scopeName) {\n      // collapse all our objects back into the parent object\n      Object.assign(\n        compiledKeywords,\n        compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)\n      );\n    });\n  }\n  return compiledKeywords;\n\n  // ---\n\n  /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} scopeName\n   * @param {Array<string>} keywordList\n   */\n  function compileList(scopeName, keywordList) {\n    if (caseInsensitive) {\n      keywordList = keywordList.map(x => x.toLowerCase());\n    }\n    keywordList.forEach(function(keyword) {\n      const pair = keyword.split('|');\n      compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];\n    });\n  }\n}\n\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */\nfunction scoreForKeyword(keyword, providedScore) {\n  // manual scores always win over common keywords\n  // so you can force a score of 1 if you really insist\n  if (providedScore) {\n    return Number(providedScore);\n  }\n\n  return commonKeyword(keyword) ? 0 : 1;\n}\n\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */\nfunction commonKeyword(keyword) {\n  return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/\n\n/**\n * @type {Record<string, boolean>}\n */\nconst seenDeprecations = {};\n\n/**\n * @param {string} message\n */\nconst error = (message) => {\n  console.error(message);\n};\n\n/**\n * @param {string} message\n * @param {any} args\n */\nconst warn = (message, ...args) => {\n  console.log(`WARN: ${message}`, ...args);\n};\n\n/**\n * @param {string} version\n * @param {string} message\n */\nconst deprecated = (version, message) => {\n  if (seenDeprecations[`${version}/${message}`]) return;\n\n  console.log(`Deprecated as of ${version}. ${message}`);\n  seenDeprecations[`${version}/${message}`] = true;\n};\n\n/* eslint-disable no-throw-literal */\n\n/**\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n*/\n\nconst MultiClassError = new Error();\n\n/**\n * Renumbers labeled scope names to account for additional inner match\n * groups that otherwise would break everything.\n *\n * Lets say we 3 match scopes:\n *\n *   { 1 => ..., 2 => ..., 3 => ... }\n *\n * So what we need is a clean match like this:\n *\n *   (a)(b)(c) => [ \"a\", \"b\", \"c\" ]\n *\n * But this falls apart with inner match groups:\n *\n * (a)(((b)))(c) => [\"a\", \"b\", \"b\", \"b\", \"c\" ]\n *\n * Our scopes are now \"out of alignment\" and we're repeating `b` 3 times.\n * What needs to happen is the numbers are remapped:\n *\n *   { 1 => ..., 2 => ..., 5 => ... }\n *\n * We also need to know that the ONLY groups that should be output\n * are 1, 2, and 5.  This function handles this behavior.\n *\n * @param {CompiledMode} mode\n * @param {Array<RegExp>} regexes\n * @param {{key: \"beginScope\"|\"endScope\"}} opts\n */\nfunction remapScopeNames(mode, regexes, { key }) {\n  let offset = 0;\n  const scopeNames = mode[key];\n  /** @type Record<number,boolean> */\n  const emit = {};\n  /** @type Record<number,string> */\n  const positions = {};\n\n  for (let i = 1; i <= regexes.length; i++) {\n    positions[i + offset] = scopeNames[i];\n    emit[i + offset] = true;\n    offset += countMatchGroups(regexes[i - 1]);\n  }\n  // we use _emit to keep track of which match groups are \"top-level\" to avoid double\n  // output from inside match groups\n  mode[key] = positions;\n  mode[key]._emit = emit;\n  mode[key]._multi = true;\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction beginMultiClass(mode) {\n  if (!Array.isArray(mode.begin)) return;\n\n  if (mode.skip || mode.excludeBegin || mode.returnBegin) {\n    error(\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\");\n    throw MultiClassError;\n  }\n\n  if (typeof mode.beginScope !== \"object\" || mode.beginScope === null) {\n    error(\"beginScope must be object\");\n    throw MultiClassError;\n  }\n\n  remapScopeNames(mode, mode.begin, {key: \"beginScope\"});\n  mode.begin = _rewriteBackreferences(mode.begin, { joinWith: \"\" });\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction endMultiClass(mode) {\n  if (!Array.isArray(mode.end)) return;\n\n  if (mode.skip || mode.excludeEnd || mode.returnEnd) {\n    error(\"skip, excludeEnd, returnEnd not compatible with endScope: {}\");\n    throw MultiClassError;\n  }\n\n  if (typeof mode.endScope !== \"object\" || mode.endScope === null) {\n    error(\"endScope must be object\");\n    throw MultiClassError;\n  }\n\n  remapScopeNames(mode, mode.end, {key: \"endScope\"});\n  mode.end = _rewriteBackreferences(mode.end, { joinWith: \"\" });\n}\n\n/**\n * this exists only to allow `scope: {}` to be used beside `match:`\n * Otherwise `beginScope` would necessary and that would look weird\n\n  {\n    match: [ /def/, /\\w+/ ]\n    scope: { 1: \"keyword\" , 2: \"title\" }\n  }\n\n * @param {CompiledMode} mode\n */\nfunction scopeSugar(mode) {\n  if (mode.scope && typeof mode.scope === \"object\" && mode.scope !== null) {\n    mode.beginScope = mode.scope;\n    delete mode.scope;\n  }\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction MultiClass(mode) {\n  scopeSugar(mode);\n\n  if (typeof mode.beginScope === \"string\") {\n    mode.beginScope = { _wrap: mode.beginScope };\n  }\n  if (typeof mode.endScope === \"string\") {\n    mode.endScope = { _wrap: mode.endScope };\n  }\n\n  beginMultiClass(mode);\n  endMultiClass(mode);\n}\n\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage\n*/\n\n// compilation\n\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @returns {CompiledLanguage}\n */\nfunction compileLanguage(language) {\n  /**\n   * Builds a regex with the case sensitivity of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n    );\n  }\n\n  /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */\n  class MultiRegex {\n    constructor() {\n      this.matchIndexes = {};\n      // @ts-ignore\n      this.regexes = [];\n      this.matchAt = 1;\n      this.position = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      opts.position = this.position++;\n      // @ts-ignore\n      this.matchIndexes[this.matchAt] = opts;\n      this.regexes.push([opts, re]);\n      this.matchAt += countMatchGroups(re) + 1;\n    }\n\n    compile() {\n      if (this.regexes.length === 0) {\n        // avoids the need to check length every time exec is called\n        // @ts-ignore\n        this.exec = () => null;\n      }\n      const terminators = this.regexes.map(el => el[1]);\n      this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);\n      this.lastIndex = 0;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      this.matcherRe.lastIndex = this.lastIndex;\n      const match = this.matcherRe.exec(s);\n      if (!match) { return null; }\n\n      // eslint-disable-next-line no-undefined\n      const i = match.findIndex((el, i) => i > 0 && el !== undefined);\n      // @ts-ignore\n      const matchData = this.matchIndexes[i];\n      // trim off any earlier non-relevant match groups (ie, the other regex\n      // match groups that make up the multi-matcher)\n      match.splice(0, i);\n\n      return Object.assign(match, matchData);\n    }\n  }\n\n  /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */\n  class ResumableMultiRegex {\n    constructor() {\n      // @ts-ignore\n      this.rules = [];\n      // @ts-ignore\n      this.multiRegexes = [];\n      this.count = 0;\n\n      this.lastIndex = 0;\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    getMatcher(index) {\n      if (this.multiRegexes[index]) return this.multiRegexes[index];\n\n      const matcher = new MultiRegex();\n      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));\n      matcher.compile();\n      this.multiRegexes[index] = matcher;\n      return matcher;\n    }\n\n    resumingScanAtSamePosition() {\n      return this.regexIndex !== 0;\n    }\n\n    considerAll() {\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      this.rules.push([re, opts]);\n      if (opts.type === \"begin\") this.count++;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      const m = this.getMatcher(this.regexIndex);\n      m.lastIndex = this.lastIndex;\n      let result = m.exec(s);\n\n      // The following is because we have no easy way to say \"resume scanning at the\n      // existing position but also skip the current rule ONLY\". What happens is\n      // all prior rules are also skipped which can result in matching the wrong\n      // thing. Example of matching \"booger\":\n\n      // our matcher is [string, \"booger\", number]\n      //\n      // ....booger....\n\n      // if \"booger\" is ignored then we'd really need a regex to scan from the\n      // SAME position for only: [string, number] but ignoring \"booger\" (if it\n      // was the first match), a simple resume would scan ahead who knows how\n      // far looking only for \"number\", ignoring potential string matches (or\n      // future \"booger\" matches that might be valid.)\n\n      // So what we do: We execute two matchers, one resuming at the same\n      // position, but the second full matcher starting at the position after:\n\n      //     /--- resume first regex match here (for [number])\n      //     |/---- full match here for [string, \"booger\", number]\n      //     vv\n      // ....booger....\n\n      // Which ever results in a match first is then used. So this 3-4 step\n      // process essentially allows us to say \"match at this position, excluding\n      // a prior rule that was ignored\".\n      //\n      // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n      // 2. Resume matching for [number]\n      // 3. Match at index + 1 for [string, \"booger\", number]\n      // 4. If #2 and #3 result in matches, which came first?\n      if (this.resumingScanAtSamePosition()) {\n        if (result && result.index === this.lastIndex) ; else { // use the second matcher result\n          const m2 = this.getMatcher(0);\n          m2.lastIndex = this.lastIndex + 1;\n          result = m2.exec(s);\n        }\n      }\n\n      if (result) {\n        this.regexIndex += result.position + 1;\n        if (this.regexIndex === this.count) {\n          // wrap-around to considering all matches again\n          this.considerAll();\n        }\n      }\n\n      return result;\n    }\n  }\n\n  /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */\n  function buildModeRegex(mode) {\n    const mm = new ResumableMultiRegex();\n\n    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: \"begin\" }));\n\n    if (mode.terminatorEnd) {\n      mm.addRule(mode.terminatorEnd, { type: \"end\" });\n    }\n    if (mode.illegal) {\n      mm.addRule(mode.illegal, { type: \"illegal\" });\n    }\n\n    return mm;\n  }\n\n  /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */\n\n  /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */\n  function compileMode(mode, parent) {\n    const cmode = /** @type CompiledMode */ (mode);\n    if (mode.isCompiled) return cmode;\n\n    [\n      scopeClassName,\n      // do this early so compiler extensions generally don't have to worry about\n      // the distinction between match/begin\n      compileMatch,\n      MultiClass,\n      beforeMatchExt\n    ].forEach(ext => ext(mode, parent));\n\n    language.compilerExtensions.forEach(ext => ext(mode, parent));\n\n    // __beforeBegin is considered private API, internal use only\n    mode.__beforeBegin = null;\n\n    [\n      beginKeywords,\n      // do this later so compiler extensions that come earlier have access to the\n      // raw array if they wanted to perhaps manipulate it, etc.\n      compileIllegal,\n      // default to 1 relevance if not specified\n      compileRelevance\n    ].forEach(ext => ext(mode, parent));\n\n    mode.isCompiled = true;\n\n    let keywordPattern = null;\n    if (typeof mode.keywords === \"object\" && mode.keywords.$pattern) {\n      // we need a copy because keywords might be compiled multiple times\n      // so we can't go deleting $pattern from the original on the first\n      // pass\n      mode.keywords = Object.assign({}, mode.keywords);\n      keywordPattern = mode.keywords.$pattern;\n      delete mode.keywords.$pattern;\n    }\n    keywordPattern = keywordPattern || /\\w+/;\n\n    if (mode.keywords) {\n      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n    }\n\n    cmode.keywordPatternRe = langRe(keywordPattern, true);\n\n    if (parent) {\n      if (!mode.begin) mode.begin = /\\B|\\b/;\n      cmode.beginRe = langRe(mode.begin);\n      if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n      if (mode.end) cmode.endRe = langRe(mode.end);\n      cmode.terminatorEnd = source(mode.end) || '';\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;\n      }\n    }\n    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));\n    if (!mode.contains) mode.contains = [];\n\n    mode.contains = [].concat(...mode.contains.map(function(c) {\n      return expandOrCloneMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n\n    cmode.matcher = buildModeRegex(cmode);\n    return cmode;\n  }\n\n  if (!language.compilerExtensions) language.compilerExtensions = [];\n\n  // self is not valid at the top-level\n  if (language.contains && language.contains.includes('self')) {\n    throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n  }\n\n  // we need a null object, which inherit will guarantee\n  language.classNameAliases = inherit$1(language.classNameAliases || {});\n\n  return compileMode(/** @type Mode */ (language));\n}\n\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */\nfunction dependencyOnParent(mode) {\n  if (!mode) return false;\n\n  return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */\nfunction expandOrCloneMode(mode) {\n  if (mode.variants && !mode.cachedVariants) {\n    mode.cachedVariants = mode.variants.map(function(variant) {\n      return inherit$1(mode, { variants: null }, variant);\n    });\n  }\n\n  // EXPAND\n  // if we have variants then essentially \"replace\" the mode with the variants\n  // this happens in compileMode, where this function is called from\n  if (mode.cachedVariants) {\n    return mode.cachedVariants;\n  }\n\n  // CLONE\n  // if we have dependencies on parents then we need a unique\n  // instance of ourselves, so we can be reused with many\n  // different parents without issue\n  if (dependencyOnParent(mode)) {\n    return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });\n  }\n\n  if (Object.isFrozen(mode)) {\n    return inherit$1(mode);\n  }\n\n  // no special dependency issues, just return ourselves\n  return mode;\n}\n\nvar version = \"11.2.0\";\n\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSApi} HLJSApi\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').PluginEvent} PluginEvent\n@typedef {import('highlight.js').HLJSOptions} HLJSOptions\n@typedef {import('highlight.js').LanguageFn} LanguageFn\n@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement\n@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext\n@typedef {import('highlight.js/private').MatchType} MatchType\n@typedef {import('highlight.js/private').KeywordData} KeywordData\n@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch\n@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError\n@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult\n@typedef {import('highlight.js').HighlightOptions} HighlightOptions\n@typedef {import('highlight.js').HighlightResult} HighlightResult\n*/\n\n\nconst escape = escapeHTML;\nconst inherit = inherit$1;\nconst NO_MATCH = Symbol(\"nomatch\");\nconst MAX_KEYWORD_HITS = 7;\n\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */\nconst HLJS = function(hljs) {\n  // Global internal variables used within the highlight.js library.\n  /** @type {Record<string, Language>} */\n  const languages = Object.create(null);\n  /** @type {Record<string, string>} */\n  const aliases = Object.create(null);\n  /** @type {HLJSPlugin[]} */\n  const plugins = [];\n\n  // safe/production mode - swallows more errors, tries to keep running\n  // even if a single syntax or parse hits a fatal error\n  let SAFE_MODE = true;\n  const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n  /** @type {Language} */\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  /** @type HLJSOptions */\n  let options = {\n    ignoreUnescapedHTML: false,\n    noHighlightRe: /^(no-?highlight)$/i,\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n    classPrefix: 'hljs-',\n    cssSelector: 'pre code',\n    languages: null,\n    // beta configuration options, subject to change, welcome to discuss\n    // https://github.com/highlightjs/highlight.js/issues/1086\n    __emitter: TokenTreeEmitter\n  };\n\n  /* Utility functions */\n\n  /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */\n  function shouldNotHighlight(languageName) {\n    return options.noHighlightRe.test(languageName);\n  }\n\n  /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */\n  function blockLanguage(block) {\n    let classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    const match = options.languageDetectRe.exec(classes);\n    if (match) {\n      const language = getLanguage(match[1]);\n      if (!language) {\n        warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n        warn(\"Falling back to no-highlight mode for this block.\", block);\n      }\n      return language ? match[1] : 'no-highlight';\n    }\n\n    return classes\n      .split(/\\s+/)\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\n  }\n\n  /**\n   * Core highlighting function.\n   *\n   * OLD API\n   * highlight(lang, code, ignoreIllegals, continuation)\n   *\n   * NEW API\n   * highlight(code, {lang, ignoreIllegals})\n   *\n   * @param {string} codeOrLanguageName - the language to use for highlighting\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */\n  function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {\n    let code = \"\";\n    let languageName = \"\";\n    if (typeof optionsOrCode === \"object\") {\n      code = codeOrLanguageName;\n      ignoreIllegals = optionsOrCode.ignoreIllegals;\n      languageName = optionsOrCode.language;\n    } else {\n      // old API\n      deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\n      deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\n      languageName = codeOrLanguageName;\n      code = optionsOrCode;\n    }\n\n    // https://github.com/highlightjs/highlight.js/issues/3149\n    // eslint-disable-next-line no-undefined\n    if (ignoreIllegals === undefined) { ignoreIllegals = true; }\n\n    /** @type {BeforeHighlightContext} */\n    const context = {\n      code,\n      language: languageName\n    };\n    // the plugin can change the desired language or the code to be highlighted\n    // just be changing the object it was passed\n    fire(\"before:highlight\", context);\n\n    // a before plugin can usurp the result completely by providing it's own\n    // in which case we don't even need to call highlight\n    const result = context.result\n      ? context.result\n      : _highlight(context.language, context.code, ignoreIllegals);\n\n    result.code = context.code;\n    // the plugin can change anything in result to suite it\n    fire(\"after:highlight\", result);\n\n    return result;\n  }\n\n  /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} codeToHighlight - the code to highlight\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */\n  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\n    const keywordHits = Object.create(null);\n\n    /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {string} matchText - the textual match\n     * @returns {KeywordData | false}\n     */\n    function keywordData(mode, matchText) {\n      return mode.keywords[matchText];\n    }\n\n    function processKeywords() {\n      if (!top.keywords) {\n        emitter.addText(modeBuffer);\n        return;\n      }\n\n      let lastIndex = 0;\n      top.keywordPatternRe.lastIndex = 0;\n      let match = top.keywordPatternRe.exec(modeBuffer);\n      let buf = \"\";\n\n      while (match) {\n        buf += modeBuffer.substring(lastIndex, match.index);\n        const word = language.case_insensitive ? match[0].toLowerCase() : match[0];\n        const data = keywordData(top, word);\n        if (data) {\n          const [kind, keywordRelevance] = data;\n          emitter.addText(buf);\n          buf = \"\";\n\n          keywordHits[word] = (keywordHits[word] || 0) + 1;\n          if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;\n          if (kind.startsWith(\"_\")) {\n            // _ implied for relevance only, do not highlight\n            // by applying a class name\n            buf += match[0];\n          } else {\n            const cssClass = language.classNameAliases[kind] || kind;\n            emitter.addKeyword(match[0], cssClass);\n          }\n        } else {\n          buf += match[0];\n        }\n        lastIndex = top.keywordPatternRe.lastIndex;\n        match = top.keywordPatternRe.exec(modeBuffer);\n      }\n      buf += modeBuffer.substr(lastIndex);\n      emitter.addText(buf);\n    }\n\n    function processSubLanguage() {\n      if (modeBuffer === \"\") return;\n      /** @type HighlightResult */\n      let result = null;\n\n      if (typeof top.subLanguage === 'string') {\n        if (!languages[top.subLanguage]) {\n          emitter.addText(modeBuffer);\n          return;\n        }\n        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);\n      } else {\n        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n      }\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      emitter.addSublanguage(result._emitter, result.language);\n    }\n\n    function processBuffer() {\n      if (top.subLanguage != null) {\n        processSubLanguage();\n      } else {\n        processKeywords();\n      }\n      modeBuffer = '';\n    }\n\n    /**\n     * @param {CompiledMode} mode\n     * @param {RegExpMatchArray} match\n     */\n    function emitMultiClass(scope, match) {\n      let i = 1;\n      // eslint-disable-next-line no-undefined\n      while (match[i] !== undefined) {\n        if (!scope._emit[i]) { i++; continue; }\n        const klass = language.classNameAliases[scope[i]] || scope[i];\n        const text = match[i];\n        if (klass) {\n          emitter.addKeyword(text, klass);\n        } else {\n          modeBuffer = text;\n          processKeywords();\n          modeBuffer = \"\";\n        }\n        i++;\n      }\n    }\n\n    /**\n     * @param {CompiledMode} mode - new mode to start\n     * @param {RegExpMatchArray} match\n     */\n    function startNewMode(mode, match) {\n      if (mode.scope && typeof mode.scope === \"string\") {\n        emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);\n      }\n      if (mode.beginScope) {\n        // beginScope just wraps the begin match itself in a scope\n        if (mode.beginScope._wrap) {\n          emitter.addKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);\n          modeBuffer = \"\";\n        } else if (mode.beginScope._multi) {\n          // at this point modeBuffer should just be the match\n          emitMultiClass(mode.beginScope, match);\n          modeBuffer = \"\";\n        }\n      }\n\n      top = Object.create(mode, { parent: { value: top } });\n      return top;\n    }\n\n    /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */\n    function endOfMode(mode, match, matchPlusRemainder) {\n      let matched = startsWith(mode.endRe, matchPlusRemainder);\n\n      if (matched) {\n        if (mode[\"on:end\"]) {\n          const resp = new Response(mode);\n          mode[\"on:end\"](match, resp);\n          if (resp.isMatchIgnored) matched = false;\n        }\n\n        if (matched) {\n          while (mode.endsParent && mode.parent) {\n            mode = mode.parent;\n          }\n          return mode;\n        }\n      }\n      // even if on:end fires an `ignore` it's still possible\n      // that we might trigger the end node because of a parent mode\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, match, matchPlusRemainder);\n      }\n    }\n\n    /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */\n    function doIgnore(lexeme) {\n      if (top.matcher.regexIndex === 0) {\n        // no more regexes to potentially match here, so we move the cursor forward one\n        // space\n        modeBuffer += lexeme[0];\n        return 1;\n      } else {\n        // no need to move the cursor, we still have additional regexes to try and\n        // match at this very spot\n        resumeScanAtSamePosition = true;\n        return 0;\n      }\n    }\n\n    /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */\n    function doBeginMatch(match) {\n      const lexeme = match[0];\n      const newMode = match.rule;\n\n      const resp = new Response(newMode);\n      // first internal before callbacks, then the public ones\n      const beforeCallbacks = [newMode.__beforeBegin, newMode[\"on:begin\"]];\n      for (const cb of beforeCallbacks) {\n        if (!cb) continue;\n        cb(match, resp);\n        if (resp.isMatchIgnored) return doIgnore(lexeme);\n      }\n\n      if (newMode.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (newMode.excludeBegin) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (!newMode.returnBegin && !newMode.excludeBegin) {\n          modeBuffer = lexeme;\n        }\n      }\n      startNewMode(newMode, match);\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n\n    /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */\n    function doEndMatch(match) {\n      const lexeme = match[0];\n      const matchPlusRemainder = codeToHighlight.substr(match.index);\n\n      const endMode = endOfMode(top, match, matchPlusRemainder);\n      if (!endMode) { return NO_MATCH; }\n\n      const origin = top;\n      if (top.endScope && top.endScope._wrap) {\n        processBuffer();\n        emitter.addKeyword(lexeme, top.endScope._wrap);\n      } else if (top.endScope && top.endScope._multi) {\n        processBuffer();\n        emitMultiClass(top.endScope, match);\n      } else if (origin.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (origin.excludeEnd) {\n          modeBuffer = lexeme;\n        }\n      }\n      do {\n        if (top.scope) {\n          emitter.closeNode();\n        }\n        if (!top.skip && !top.subLanguage) {\n          relevance += top.relevance;\n        }\n        top = top.parent;\n      } while (top !== endMode.parent);\n      if (endMode.starts) {\n        startNewMode(endMode.starts, match);\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    function processContinuations() {\n      const list = [];\n      for (let current = top; current !== language; current = current.parent) {\n        if (current.scope) {\n          list.unshift(current.scope);\n        }\n      }\n      list.forEach(item => emitter.openNode(item));\n    }\n\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\n    let lastMatch = {};\n\n    /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */\n    function processLexeme(textBeforeMatch, match) {\n      const lexeme = match && match[0];\n\n      // add non-matched text to the current mode buffer\n      modeBuffer += textBeforeMatch;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      // we've found a 0 width match and we're stuck, so we need to advance\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\n      // sometimes they can end up matching nothing at all\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\n        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n        if (!SAFE_MODE) {\n          /** @type {AnnotatedError} */\n          const err = new Error(`0 width match regex (${languageName})`);\n          err.languageName = languageName;\n          err.badRule = lastMatch.rule;\n          throw err;\n        }\n        return 1;\n      }\n      lastMatch = match;\n\n      if (match.type === \"begin\") {\n        return doBeginMatch(match);\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\n        // illegal match, we do not continue processing\n        /** @type {AnnotatedError} */\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.scope || '<unnamed>') + '\"');\n        err.mode = top;\n        throw err;\n      } else if (match.type === \"end\") {\n        const processed = doEndMatch(match);\n        if (processed !== NO_MATCH) {\n          return processed;\n        }\n      }\n\n      // edge case for when illegal matches $ (end of line) which is technically\n      // a 0 width match but not a begin/end match so it's not caught by the\n      // first handler (when ignoreIllegals is true)\n      if (match.type === \"illegal\" && lexeme === \"\") {\n        // advance so we aren't stuck in an infinite loop\n        return 1;\n      }\n\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\n      // decent number of iterations yet our index (cursor position in our\n      // parsing) still 3x behind our index then something is very wrong\n      // so we bail\n      if (iterations > 100000 && iterations > match.index * 3) {\n        const err = new Error('potential infinite loop, way more iterations than matches');\n        throw err;\n      }\n\n      /*\n      Why might be find ourselves here?  An potential end match that was\n      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.\n      (this could be because a callback requests the match be ignored, etc)\n\n      This causes no real harm other than stopping a few times too many.\n      */\n\n      modeBuffer += lexeme;\n      return lexeme.length;\n    }\n\n    const language = getLanguage(languageName);\n    if (!language) {\n      error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n      throw new Error('Unknown language: \"' + languageName + '\"');\n    }\n\n    const md = compileLanguage(language);\n    let result = '';\n    /** @type {CompiledMode} */\n    let top = continuation || md;\n    /** @type Record<string,CompiledMode> */\n    const continuations = {}; // keep continuations for sub-languages\n    const emitter = new options.__emitter(options);\n    processContinuations();\n    let modeBuffer = '';\n    let relevance = 0;\n    let index = 0;\n    let iterations = 0;\n    let resumeScanAtSamePosition = false;\n\n    try {\n      top.matcher.considerAll();\n\n      for (;;) {\n        iterations++;\n        if (resumeScanAtSamePosition) {\n          // only regexes not matched previously will now be\n          // considered for a potential match\n          resumeScanAtSamePosition = false;\n        } else {\n          top.matcher.considerAll();\n        }\n        top.matcher.lastIndex = index;\n\n        const match = top.matcher.exec(codeToHighlight);\n        // console.log(\"match\", match[0], match.rule && match.rule.begin)\n\n        if (!match) break;\n\n        const beforeMatch = codeToHighlight.substring(index, match.index);\n        const processedCount = processLexeme(beforeMatch, match);\n        index = match.index + processedCount;\n      }\n      processLexeme(codeToHighlight.substr(index));\n      emitter.closeAllNodes();\n      emitter.finalize();\n      result = emitter.toHTML();\n\n      return {\n        language: languageName,\n        value: result,\n        relevance: relevance,\n        illegal: false,\n        _emitter: emitter,\n        _top: top\n      };\n    } catch (err) {\n      if (err.message && err.message.includes('Illegal')) {\n        return {\n          language: languageName,\n          value: escape(codeToHighlight),\n          illegal: true,\n          relevance: 0,\n          _illegalBy: {\n            message: err.message,\n            index: index,\n            context: codeToHighlight.slice(index - 100, index + 100),\n            mode: err.mode,\n            resultSoFar: result\n          },\n          _emitter: emitter\n        };\n      } else if (SAFE_MODE) {\n        return {\n          language: languageName,\n          value: escape(codeToHighlight),\n          illegal: false,\n          relevance: 0,\n          errorRaised: err,\n          _emitter: emitter,\n          _top: top\n        };\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */\n  function justTextHighlightResult(code) {\n    const result = {\n      value: escape(code),\n      illegal: false,\n      relevance: 0,\n      _top: PLAINTEXT_LANGUAGE,\n      _emitter: new options.__emitter(options)\n    };\n    result._emitter.addText(code);\n    return result;\n  }\n\n  /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - secondBest (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */\n  function highlightAuto(code, languageSubset) {\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\n    const plaintext = justTextHighlightResult(code);\n\n    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>\n      _highlight(name, code, false)\n    );\n    results.unshift(plaintext); // plaintext is always an option\n\n    const sorted = results.sort((a, b) => {\n      // sort base on relevance\n      if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n\n      // always award the tie to the base language\n      // ie if C++ and Arduino are tied, it's more likely to be C++\n      if (a.language && b.language) {\n        if (getLanguage(a.language).supersetOf === b.language) {\n          return 1;\n        } else if (getLanguage(b.language).supersetOf === a.language) {\n          return -1;\n        }\n      }\n\n      // otherwise say they are equal, which has the effect of sorting on\n      // relevance while preserving the original ordering - which is how ties\n      // have historically been settled, ie the language that comes first always\n      // wins in the case of a tie\n      return 0;\n    });\n\n    const [best, secondBest] = sorted;\n\n    /** @type {AutoHighlightResult} */\n    const result = best;\n    result.secondBest = secondBest;\n\n    return result;\n  }\n\n  /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */\n  function updateClassName(element, currentLang, resultLang) {\n    const language = (currentLang && aliases[currentLang]) || resultLang;\n\n    element.classList.add(\"hljs\");\n    element.classList.add(`language-${language}`);\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */\n  function highlightElement(element) {\n    /** @type HTMLElement */\n    let node = null;\n    const language = blockLanguage(element);\n\n    if (shouldNotHighlight(language)) return;\n\n    fire(\"before:highlightElement\",\n      { el: element, language: language });\n\n    // we should be all text, no child nodes\n    if (!options.ignoreUnescapedHTML && element.children.length > 0) {\n      console.warn(\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\");\n      console.warn(\"https://github.com/highlightjs/highlight.js/issues/2886\");\n      console.warn(element);\n    }\n\n    node = element;\n    const text = node.textContent;\n    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);\n\n    element.innerHTML = result.value;\n    updateClassName(element, language, result.language);\n    element.result = {\n      language: result.language,\n      // TODO: remove with version 11.0\n      re: result.relevance,\n      relevance: result.relevance\n    };\n    if (result.secondBest) {\n      element.secondBest = {\n        language: result.secondBest.language,\n        relevance: result.secondBest.relevance\n      };\n    }\n\n    fire(\"after:highlightElement\", { el: element, result, text });\n  }\n\n  /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */\n  function configure(userOptions) {\n    options = inherit(options, userOptions);\n  }\n\n  // TODO: remove v12, deprecated\n  const initHighlighting = () => {\n    highlightAll();\n    deprecated(\"10.6.0\", \"initHighlighting() deprecated.  Use highlightAll() now.\");\n  };\n\n  // TODO: remove v12, deprecated\n  function initHighlightingOnLoad() {\n    highlightAll();\n    deprecated(\"10.6.0\", \"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\");\n  }\n\n  let wantsHighlight = false;\n\n  /**\n   * auto-highlights all pre>code elements on the page\n   */\n  function highlightAll() {\n    // if we are called too early in the loading process\n    if (document.readyState === \"loading\") {\n      wantsHighlight = true;\n      return;\n    }\n\n    const blocks = document.querySelectorAll(options.cssSelector);\n    blocks.forEach(highlightElement);\n  }\n\n  function boot() {\n    // if a highlight was requested before DOM was loaded, do now\n    if (wantsHighlight) highlightAll();\n  }\n\n  // make sure we are in the browser environment\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('DOMContentLoaded', boot, false);\n  }\n\n  /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */\n  function registerLanguage(languageName, languageDefinition) {\n    let lang = null;\n    try {\n      lang = languageDefinition(hljs);\n    } catch (error$1) {\n      error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n      // hard or soft error\n      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }\n      // languages that have serious errors are replaced with essentially a\n      // \"plaintext\" stand-in so that the code blocks will still get normal\n      // css classes applied to them - and one bad language won't break the\n      // entire highlighter\n      lang = PLAINTEXT_LANGUAGE;\n    }\n    // give it a temporary name if it doesn't have one in the meta-data\n    if (!lang.name) lang.name = languageName;\n    languages[languageName] = lang;\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\n\n    if (lang.aliases) {\n      registerAliases(lang.aliases, { languageName });\n    }\n  }\n\n  /**\n   * Remove a language grammar module\n   *\n   * @param {string} languageName\n   */\n  function unregisterLanguage(languageName) {\n    delete languages[languageName];\n    for (const alias of Object.keys(aliases)) {\n      if (aliases[alias] === languageName) {\n        delete aliases[alias];\n      }\n    }\n  }\n\n  /**\n   * @returns {string[]} List of language internal names\n   */\n  function listLanguages() {\n    return Object.keys(languages);\n  }\n\n  /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */\n  function registerAliases(aliasList, { languageName }) {\n    if (typeof aliasList === 'string') {\n      aliasList = [aliasList];\n    }\n    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });\n  }\n\n  /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */\n  function autoDetection(name) {\n    const lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /**\n   * Upgrades the old highlightBlock plugins to the new\n   * highlightElement API\n   * @param {HLJSPlugin} plugin\n   */\n  function upgradePluginAPI(plugin) {\n    // TODO: remove with v12\n    if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\n      plugin[\"before:highlightElement\"] = (data) => {\n        plugin[\"before:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n    if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\n      plugin[\"after:highlightElement\"] = (data) => {\n        plugin[\"after:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function addPlugin(plugin) {\n    upgradePluginAPI(plugin);\n    plugins.push(plugin);\n  }\n\n  /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */\n  function fire(event, args) {\n    const cb = event;\n    plugins.forEach(function(plugin) {\n      if (plugin[cb]) {\n        plugin[cb](args);\n      }\n    });\n  }\n\n  /**\n   * DEPRECATED\n   * @param {HighlightedHTMLElement} el\n   */\n  function deprecateHighlightBlock(el) {\n    deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\n    deprecated(\"10.7.0\", \"Please use highlightElement now.\");\n\n    return highlightElement(el);\n  }\n\n  /* Interface definition */\n  Object.assign(hljs, {\n    highlight,\n    highlightAuto,\n    highlightAll,\n    highlightElement,\n    // TODO: Remove with v12 API\n    highlightBlock: deprecateHighlightBlock,\n    configure,\n    initHighlighting,\n    initHighlightingOnLoad,\n    registerLanguage,\n    unregisterLanguage,\n    listLanguages,\n    getLanguage,\n    registerAliases,\n    autoDetection,\n    inherit,\n    addPlugin\n  });\n\n  hljs.debugMode = function() { SAFE_MODE = false; };\n  hljs.safeMode = function() { SAFE_MODE = true; };\n  hljs.versionString = version;\n\n  for (const key in MODES) {\n    // @ts-ignore\n    if (typeof MODES[key] === \"object\") {\n      // @ts-ignore\n      deepFreeze$1(MODES[key]);\n    }\n  }\n\n  // merge all the modes/regexes into our main object\n  Object.assign(hljs, MODES);\n\n  return hljs;\n};\n\n// export an \"instance\" of the highlighter\nvar highlight = HLJS({});\n\nmodule.exports = highlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///390\n")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var __webpack_exports__=__webpack_require__(929)})();